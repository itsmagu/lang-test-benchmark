	.text
	.def	@feat.00;
	.scl	3;
	.type	0;
	.endef
	.globl	@feat.00
.set @feat.00, 0
	.file	"odin_package"
	.def	__$startup_runtime;
	.scl	2;
	.type	32;
	.endef
	.globl	__$startup_runtime
	.p2align	4, 0x90
__$startup_runtime:
.seh_proc __$startup_runtime
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	jmp	.LBB0_1
.LBB0_1:
	callq	os.get_std_handle
	movq	%rax, os.stdout(%rip)
	addq	$40, %rsp
	retq
	.seh_endproc

	.def	__$equal1;
	.scl	2;
	.type	32;
	.endef
	.globl	__$equal1
	.p2align	4, 0x90
__$equal1:
	pushq	%rbx
	movb	$1, %al
	cmpq	%rdx, %rcx
	je	.LBB1_16
	movq	8(%rcx), %r8
	cmpq	8(%rdx), %r8
	jne	.LBB1_15
	testq	%r8, %r8
	je	.LBB1_7
	movq	(%rdx), %r9
	movq	(%rcx), %r10
	cmpq	%r9, %r10
	je	.LBB1_7
	xorl	%r11d, %r11d
	.p2align	4, 0x90
.LBB1_6:
	movzbl	(%r10,%r11), %ebx
	cmpb	(%r9,%r11), %bl
	jne	.LBB1_15
	incq	%r11
	cmpq	%r11, %r8
	jne	.LBB1_6
.LBB1_7:
	movq	16(%rcx), %r8
	cmpq	16(%rdx), %r8
	jne	.LBB1_15
	movq	32(%rcx), %r8
	cmpq	32(%rdx), %r8
	jne	.LBB1_15
	testq	%r8, %r8
	je	.LBB1_14
	movq	24(%rdx), %r9
	movq	24(%rcx), %r10
	cmpq	%r9, %r10
	je	.LBB1_14
	xorl	%r11d, %r11d
	.p2align	4, 0x90
.LBB1_13:
	movzbl	(%r10,%r11), %ebx
	cmpb	(%r9,%r11), %bl
	jne	.LBB1_15
	incq	%r11
	cmpq	%r11, %r8
	jne	.LBB1_13
.LBB1_14:
	movq	40(%rcx), %rcx
	cmpq	40(%rdx), %rcx
	je	.LBB1_16
.LBB1_15:
	xorl	%eax, %eax
.LBB1_16:
	popq	%rbx
	retq

	.def	__$equal2;
	.scl	2;
	.type	32;
	.endef
	.globl	__$equal2
	.p2align	4, 0x90
__$equal2:
	pushq	%rbx
	movb	$1, %al
	cmpq	%rdx, %rcx
	je	.LBB2_16
	movq	8(%rcx), %r8
	cmpq	8(%rdx), %r8
	jne	.LBB2_15
	testq	%r8, %r8
	je	.LBB2_7
	movq	(%rdx), %r9
	movq	(%rcx), %r10
	cmpq	%r9, %r10
	je	.LBB2_7
	xorl	%r11d, %r11d
	.p2align	4, 0x90
.LBB2_6:
	movzbl	(%r10,%r11), %ebx
	cmpb	(%r9,%r11), %bl
	jne	.LBB2_15
	incq	%r11
	cmpq	%r11, %r8
	jne	.LBB2_6
.LBB2_7:
	movl	16(%rcx), %r8d
	cmpl	16(%rdx), %r8d
	jne	.LBB2_15
	movl	20(%rcx), %r8d
	cmpl	20(%rdx), %r8d
	jne	.LBB2_15
	movq	32(%rcx), %r8
	cmpq	32(%rdx), %r8
	jne	.LBB2_15
	testq	%r8, %r8
	je	.LBB2_16
	movq	24(%rdx), %rdx
	movq	24(%rcx), %rcx
	cmpq	%rdx, %rcx
	je	.LBB2_16
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB2_14:
	movzbl	(%rcx,%r9), %r10d
	cmpb	(%rdx,%r9), %r10b
	jne	.LBB2_15
	incq	%r9
	cmpq	%r9, %r8
	jne	.LBB2_14
	jmp	.LBB2_16
.LBB2_15:
	xorl	%eax, %eax
.LBB2_16:
	popq	%rbx
	retq

	.def	os.get_std_handle;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
os.get_std_handle:
	movl	$-11, %ecx
	jmp	GetStdHandle

	.def	__$cleanup_runtime;
	.scl	2;
	.type	32;
	.endef
	.globl	__$cleanup_runtime
	.p2align	4, 0x90
__$cleanup_runtime:
.seh_proc __$cleanup_runtime
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	jmp	.LBB4_1
.LBB4_1:
	callq	"runtime._destroy_temp_allocator_fini-9834"
	nop
	addq	$40, %rsp
	retq
	.seh_endproc

	.def	"runtime._destroy_temp_allocator_fini-9834";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"runtime._destroy_temp_allocator_fini-9834":
.seh_proc "runtime._destroy_temp_allocator_fini-9834"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$112, %rsp
	.seh_stackalloc 112
	movaps	%xmm6, 96(%rsp)
	.seh_savexmm %xmm6, 96
	.seh_endprologue
	movq	%rcx, %rsi
	movl	_tls_index(%rip), %eax
	movq	%gs:88, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	runtime.global_default_temp_allocator_data@SECREL32+16(%rax), %rax
	testq	%rax, %rax
	je	.LBB5_5
	movl	_tls_index(%rip), %ecx
	movq	%gs:88, %rdx
	movq	(%rdx,%rcx,8), %rcx
	movq	runtime.global_default_temp_allocator_data@SECREL32+32(%rcx), %rcx
	xorps	%xmm6, %xmm6
	leaq	80(%rsp), %rdi
	leaq	.Lggv$3a(%rip), %rbx
	jmp	.LBB5_2
	.p2align	4, 0x90
.LBB5_4:
	movq	%rdx, %rax
	testq	%rdx, %rdx
	je	.LBB5_5
.LBB5_2:
	movq	(%rax), %rdx
	movl	_tls_index(%rip), %r8d
	movq	%gs:88, %r9
	movq	(%r9,%r8,8), %r8
	movq	%rdx, runtime.global_default_temp_allocator_data@SECREL32+16(%r8)
	subq	40(%rax), %rcx
	movq	%rcx, runtime.global_default_temp_allocator_data@SECREL32+32(%r8)
	movq	8(%rax), %r10
	testq	%r10, %r10
	je	.LBB5_4
	movq	16(%rax), %rcx
	movaps	%xmm6, 80(%rsp)
	movq	%rsi, 64(%rsp)
	movq	%rdi, 56(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movq	$0, 40(%rsp)
	movb	$1, %dl
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	*%r10
	movl	_tls_index(%rip), %eax
	movq	%gs:88, %rcx
	movq	(%rcx,%rax,8), %rax
	movq	runtime.global_default_temp_allocator_data@SECREL32+16(%rax), %rdx
	movq	runtime.global_default_temp_allocator_data@SECREL32+32(%rax), %rcx
	jmp	.LBB5_4
.LBB5_5:
	movl	_tls_index(%rip), %eax
	movq	%gs:88, %rcx
	movq	(%rcx,%rax,8), %rax
	xorps	%xmm0, %xmm0
	movaps	%xmm0, runtime.global_default_temp_allocator_data@SECREL32+32(%rax)
	movaps	%xmm0, runtime.global_default_temp_allocator_data@SECREL32+16(%rax)
	movaps	%xmm0, runtime.global_default_temp_allocator_data@SECREL32(%rax)
	movq	$0, runtime.global_default_temp_allocator_data@SECREL32+48(%rax)
	movaps	96(%rsp), %xmm6
	addq	$112, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_endproc

	.def	runtime.bounds_trap;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.bounds_trap:
.seh_proc runtime.bounds_trap
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	"runtime.windows_trap_array_bounds-660"
	int3
	.seh_endproc

	.def	runtime.udivmod128;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.udivmod128:
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	movq	(%rcx), %r9
	movq	8(%rcx), %rax
	movq	(%rdx), %r11
	movq	8(%rdx), %r10
	testq	%rax, %rax
	je	.LBB7_7
	testq	%r11, %r11
	je	.LBB7_10
	testq	%r10, %r10
	je	.LBB7_16
	bsrq	%r10, %r11
	xorl	$63, %r11d
	bsrq	%rax, %r10
	xorl	$63, %r10d
	subl	%r10d, %r11d
	cmpl	$64, %r11d
	jb	.LBB7_24
	pxor	%xmm0, %xmm0
.LBB7_5:
	testq	%r8, %r8
	je	.LBB7_44
	movdqa	(%rcx), %xmm1
	movdqa	%xmm1, (%r8)
	jmp	.LBB7_44
.LBB7_7:
	testq	%r10, %r10
	je	.LBB7_21
	pxor	%xmm0, %xmm0
	testq	%r8, %r8
	je	.LBB7_44
	movq	%r9, (%r8)
	movq	$0, 8(%r8)
	jmp	.LBB7_44
.LBB7_10:
	pxor	%xmm0, %xmm0
	testq	%r10, %r10
	je	.LBB7_44
	testq	%r9, %r9
	je	.LBB7_28
	leaq	-1(%r10), %r11
	testq	%r11, %r10
	jne	.LBB7_31
	testq	%r8, %r8
	je	.LBB7_15
	andq	%rax, %r11
	movq	%r9, (%r8)
	movq	%r11, 8(%r8)
.LBB7_15:
	rep		bsfq	%r10, %rcx
	shrq	%cl, %rax
	movq	%rax, %xmm0
	jmp	.LBB7_44
.LBB7_16:
	leaq	-1(%r11), %r10
	testq	%r10, %r11
	jne	.LBB7_26
	testq	%r8, %r8
	je	.LBB7_19
	andq	%r9, %r10
	movq	%r10, (%r8)
	movq	$0, 8(%r8)
.LBB7_19:
	cmpq	$1, %r11
	jne	.LBB7_33
	movdqa	(%rcx), %xmm0
	jmp	.LBB7_44
.LBB7_21:
	movq	%r9, %rax
	xorl	%edx, %edx
	divq	%r11
	testq	%r8, %r8
	je	.LBB7_23
	movq	%rdx, (%r8)
	movq	$0, 8(%r8)
	jmp	.LBB7_23
.LBB7_24:
	leal	1(%r11), %r10d
	cmpl	$64, %r10d
	je	.LBB7_27
	movq	%rax, %rsi
	movl	%r10d, %ecx
	shrq	%cl, %rsi
	xorb	$63, %r11b
	movl	%r11d, %ecx
	shlq	%cl, %rax
	movq	%r9, %rdi
	movl	%r10d, %ecx
	shrq	%cl, %rdi
	movl	%r11d, %ecx
	shlq	%cl, %r9
	orq	%rdi, %rax
	movq	%r9, %xmm0
	pslldq	$8, %xmm0
	jmp	.LBB7_38
.LBB7_26:
	bsrq	%r11, %r11
	xorl	$63, %r11d
	bsrq	%rax, %rcx
	xorl	$63, %ecx
	subl	%ecx, %r11d
	leal	65(%r11), %r10d
	cmpl	$64, %r10d
	jne	.LBB7_34
.LBB7_27:
	movq	%r9, %xmm0
	pslldq	$8, %xmm0
	movl	$64, %r10d
	xorl	%esi, %esi
	jmp	.LBB7_38
.LBB7_28:
	xorl	%edx, %edx
	divq	%r10
	testq	%r8, %r8
	je	.LBB7_23
	movq	%rdx, 8(%r8)
	movq	$0, (%r8)
.LBB7_23:
	movq	%rax, %xmm0
	jmp	.LBB7_44
.LBB7_31:
	bsrq	%r10, %r11
	xorl	$63, %r11d
	bsrq	%rax, %r10
	xorl	$63, %r10d
	subl	%r10d, %r11d
	cmpl	$63, %r11d
	jae	.LBB7_5
	leal	1(%r11), %r10d
	xorb	$63, %r11b
	jmp	.LBB7_36
.LBB7_33:
	rep		bsfq	%r11, %rdx
	movq	%rax, %r8
	movl	%edx, %ecx
	shrq	%cl, %r8
	negb	%cl
	shlq	%cl, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
	movl	%edx, %ecx
	shrq	%cl, %r9
	orq	%rax, %r9
	movq	%r9, %xmm0
	movq	%r8, %xmm1
	jmp	.LBB7_43
.LBB7_34:
	jae	.LBB7_37
	notb	%r11b
.LBB7_36:
	movq	%r9, %rsi
	movl	%r11d, %ecx
	shlq	%cl, %rsi
	movq	%rsi, %xmm0
	pslldq	$8, %xmm0
	movq	%rax, %rsi
	movl	%r10d, %ecx
	shrq	%cl, %rsi
	movl	%r11d, %ecx
	shlq	%cl, %rax
	movl	%r10d, %ecx
	shrq	%cl, %r9
	orq	%r9, %rax
	jmp	.LBB7_38
.LBB7_37:
	movb	$63, %cl
	subb	%r11b, %cl
	movq	%r9, %rdi
	shlq	%cl, %rdi
	movq	%rax, %rbx
	shlq	%cl, %rbx
	incl	%r11d
	movl	%r11d, %ecx
	shrq	%cl, %r9
	shrq	%cl, %rax
	xorl	%esi, %esi
	cmpl	$64, %r11d
	cmovaeq	%rsi, %r9
	cmovaeq	%rsi, %rax
	orq	%rbx, %r9
	movq	%r9, %xmm1
	movq	%rdi, %xmm0
	punpcklqdq	%xmm1, %xmm0
.LBB7_38:
	movq	(%rdx), %rcx
	movq	8(%rdx), %rdx
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB7_39:
	shldq	$1, %rax, %rsi
	pextrq	$1, %xmm0, %r11
	shldq	$1, %r11, %rax
	movq	%xmm0, %rdi
	shldq	$1, %rdi, %r11
	addq	%rdi, %rdi
	movl	%r9d, %r9d
	orq	%rdi, %r9
	movq	%r11, %xmm1
	movq	%r9, %xmm0
	punpcklqdq	%xmm1, %xmm0
	movq	%rsi, %r11
	notq	%r11
	movq	%rax, %r9
	notq	%r9
	addq	%rcx, %r9
	adcq	%rdx, %r11
	movq	%r11, %r9
	shrq	$63, %r9
	sarq	$63, %r11
	movq	%r11, %rdi
	andq	%rdx, %rdi
	andq	%rcx, %r11
	subq	%r11, %rax
	sbbq	%rdi, %rsi
	decl	%r10d
	jne	.LBB7_39
	movq	%xmm0, %rdx
	pextrq	$1, %xmm0, %rcx
	shldq	$1, %rdx, %rcx
	leaq	(%r9,%rdx,2), %rdx
	testq	%r8, %r8
	je	.LBB7_42
	movq	%rax, (%r8)
	movq	%rsi, 8(%r8)
.LBB7_42:
	movq	%rdx, %xmm0
	movq	%rcx, %xmm1
.LBB7_43:
	punpcklqdq	%xmm1, %xmm0
.LBB7_44:
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq

	.def	runtime.stderr_write;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.stderr_write:
.seh_proc runtime.stderr_write
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rdx, %rsi
	cmpq	$0, 8(%rcx)
	je	.LBB8_1
	movq	%rcx, %rdi
	movl	$-12, %ecx
	callq	GetStdHandle
	movq	%rax, %rbx
	xorl	%r15d, %r15d
	movq	%rax, %rcx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	SetHandleInformation
	movl	$0, 44(%rsp)
	movq	8(%rdi), %r12
	testq	%r12, %r12
	jle	.LBB8_8
	xorl	%r15d, %r15d
	movl	$1073741824, %ebp
	leaq	44(%rsp), %r14
	.p2align	4, 0x90
.LBB8_5:
	movl	%r12d, %r8d
	subl	%r15d, %r8d
	cmpl	$1073741824, %r8d
	cmovgel	%ebp, %r8d
	movq	(%rdi), %rdx
	addq	%r15, %rdx
	movq	$0, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r14, %r9
	callq	WriteFile
	movl	44(%rsp), %ecx
	testq	%rcx, %rcx
	je	.LBB8_7
	testl	%eax, %eax
	je	.LBB8_7
	addq	%rcx, %r15
	cmpq	%r12, %r15
	jl	.LBB8_5
	jmp	.LBB8_8
.LBB8_1:
	xorl	%r15d, %r15d
	jmp	.LBB8_8
.LBB8_7:
	callq	GetLastError
.LBB8_8:
	movq	%r15, (%rsi)
	addq	$48, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	main.main;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
main.main:
.seh_proc main.main
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$1544, %rsp
	.seh_stackalloc 1544
	movaps	%xmm6, 1520(%rsp)
	.seh_savexmm %xmm6, 1520
	.seh_endprologue
	movq	%rcx, %rsi
	cmpq	$2, runtime.args__.1(%rip)
	jl	.LBB9_1
	movq	runtime.args__.0(%rip), %rax
	movq	8(%rax), %rax
	jmp	.LBB9_3
.LBB9_1:
	leaq	.Lcsbs$5(%rip), %rax
.LBB9_3:
	movq	%rax, 400(%rsp)
	xorps	%xmm6, %xmm6
	movaps	%xmm6, 384(%rsp)
	movaps	%xmm6, 112(%rsp)
	leaq	400(%rsp), %rax
	movq	%rax, 112(%rsp)
	movabsq	$5044031582654955523, %rax
	movq	%rax, 120(%rsp)
	leaq	112(%rsp), %rax
	movq	%rax, 384(%rsp)
	movq	$1, 392(%rsp)
	movq	os.stdout(%rip), %rbx
	xorl	%r12d, %r12d
	leaq	496(%rsp), %rdi
	movl	$1024, %r8d
	movq	%rdi, %rcx
	xorl	%edx, %edx
	callq	memset
	movups	%xmm6, 480(%rsp)
	leaq	"os._file_stream_proc-827"(%rip), %rax
	movq	%rax, 456(%rsp)
	movq	%rbx, 464(%rsp)
	movq	$0, 472(%rsp)
	movups	%xmm6, 440(%rsp)
	movq	%rdi, 424(%rsp)
	movq	$1024, 432(%rsp)
	movq	$0, 368(%rsp)
	movq	$1, 88(%rsp)
	leaq	312(%rsp), %r15
	leaq	bufio._writer_proc(%rip), %rbp
	leaq	424(%rsp), %rbx
	leaq	.Lcsbs$d8(%rip), %rdi
	leaq	128(%rsp), %r13
	jmp	.LBB9_4
	.p2align	4, 0x90
.LBB9_16:
	movq	%rdx, %r12
.LBB9_22:
	cmpq	$16, %r12
	jae	.LBB9_23
.LBB9_4:
	movaps	%xmm6, 272(%rsp)
	movaps	%xmm6, 256(%rsp)
	movq	$0, 288(%rsp)
	movq	%rbp, 296(%rsp)
	movq	%rbx, 304(%rsp)
	movups	%xmm6, 32(%r15)
	movups	%xmm6, 16(%r15)
	movups	%xmm6, (%r15)
	movq	$0, 48(%r15)
	movq	%r12, %r14
	.p2align	4, 0x90
.LBB9_5:
	movzbl	(%r14,%rdi), %eax
	cmpl	$37, %eax
	je	.LBB9_10
	cmpl	$123, %eax
	je	.LBB9_10
	cmpl	$125, %eax
	je	.LBB9_10
	incq	%r14
	cmpq	$16, %r14
	jne	.LBB9_5
	movl	$16, %r14d
.LBB9_10:
	movq	%r14, %rax
	subq	%r12, %rax
	jbe	.LBB9_12
	addq	%rdi, %r12
	movq	%r12, 408(%rsp)
	movq	%rax, 416(%rsp)
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movl	$4, %edx
	movq	%rbx, %rcx
	leaq	408(%rsp), %r8
	callq	bufio._writer_proc
	movq	128(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_12:
	cmpq	$15, %r14
	ja	.LBB9_23
	movzbl	(%r14,%rdi), %eax
	leaq	1(%r14), %rdx
	cmpl	$37, %eax
	je	.LBB9_58
	cmpl	$123, %eax
	je	.LBB9_35
	cmpl	$125, %eax
	jne	.LBB9_16
	movl	$16, %r12d
	cmpq	$15, %r14
	je	.LBB9_19
	cmpb	$125, 1(%r14,%rdi)
	leaq	2(%r14), %rax
	cmoveq	%rax, %rdx
	movq	%rdx, %r12
.LBB9_19:
	movb	$125, 96(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 128(%rsp)
	movq	$1, 136(%rsp)
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_22
	movq	304(%rsp), %rcx
	movq	$0, 72(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r13, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	jmp	.LBB9_21
	.p2align	4, 0x90
.LBB9_35:
	movzbl	(%rdx,%rdi), %eax
	cmpl	$58, %eax
	je	.LBB9_36
	cmpl	$123, %eax
	je	.LBB9_54
	cmpl	$125, %eax
	jne	.LBB9_47
.LBB9_36:
	movq	%rdx, %rbp
.LBB9_37:
	movq	88(%rsp), %rax
	xorl	%r13d, %r13d
	.p2align	4, 0x90
.LBB9_38:
	btq	%r13, %rax
	jb	.LBB9_141
	movq	%rax, %rdx
	movl	%r13d, %ecx
	shrq	%cl, %rdx
	testb	$2, %dl
	jne	.LBB9_140
	movq	%rax, %rdx
	movl	%r13d, %ecx
	shrq	%cl, %rdx
	testb	$4, %dl
	jne	.LBB9_139
	movq	%rax, %rdx
	movl	%r13d, %ecx
	shrq	%cl, %rdx
	testb	$8, %dl
	jne	.LBB9_138
	cmpq	$60, %r13
	je	.LBB9_132
	movq	%rax, %rdx
	movl	%r13d, %ecx
	shrq	%cl, %rdx
	leaq	5(%r13), %rcx
	movq	%rcx, %r13
	testb	$16, %dl
	je	.LBB9_38
	decq	%rcx
	xorl	%r14d, %r14d
	movq	%rcx, %r13
	jmp	.LBB9_142
	.p2align	4, 0x90
.LBB9_58:
	cmpq	$15, %r14
	je	.LBB9_61
	cmpb	$37, (%rdx,%rdi)
	jne	.LBB9_61
	movb	$37, 96(%rsp)
	jmp	.LBB9_55
.LBB9_61:
	movq	%rsi, 32(%rsp)
	leaq	256(%rsp), %rcx
	leaq	88(%rsp), %r8
	leaq	384(%rsp), %r9
	callq	"fmt.wprintf.parse_options-0"
	movq	%rax, %r12
	cmpq	$15, %rax
	jg	.LBB9_79
	ja	.LBB9_209
	cmpb	$91, (%r12,%rdi)
	jne	.LBB9_79
	cmpq	$13, %r12
	ja	.LBB9_76
	movl	$16, %ecx
	subq	%r12, %rcx
	leaq	2(%r12), %r14
	movq	$-1, %rax
	.p2align	4, 0x90
.LBB9_66:
	cmpb	$93, -1(%r14,%rdi)
	je	.LBB9_67
	incq	%r14
	decq	%rax
	cmpq	$17, %r14
	jne	.LBB9_66
.LBB9_76:
	incq	%r12
.LBB9_79:
	movq	88(%rsp), %rax
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB9_80:
	btq	%r9, %rax
	jb	.LBB9_96
	movq	%rax, %rdx
	movl	%r9d, %ecx
	shrq	%cl, %rdx
	testb	$2, %dl
	jne	.LBB9_95
	movq	%rax, %rdx
	movl	%r9d, %ecx
	shrq	%cl, %rdx
	testb	$4, %dl
	jne	.LBB9_94
	movq	%rax, %rdx
	movl	%r9d, %ecx
	shrq	%cl, %rdx
	testb	$8, %dl
	jne	.LBB9_93
	cmpq	$60, %r9
	je	.LBB9_87
	movq	%rax, %rdx
	movl	%r9d, %ecx
	shrq	%cl, %rdx
	leaq	5(%r9), %rcx
	movq	%rcx, %r9
	testb	$16, %dl
	je	.LBB9_80
	decq	%rcx
	xorl	%eax, %eax
	movq	%rcx, %r9
	jmp	.LBB9_97
.LBB9_54:
	movb	$123, 96(%rsp)
.LBB9_55:
	leaq	96(%rsp), %rax
	movq	%rax, 128(%rsp)
	movq	$1, 136(%rsp)
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_57
	movq	304(%rsp), %rcx
	movq	$0, 72(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r13, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_57:
	addq	$2, %r14
	movq	%r14, %r12
	jmp	.LBB9_22
.LBB9_47:
	xorl	%eax, %eax
	movq	%rdx, %rbp
	.p2align	4, 0x90
.LBB9_48:
	movzbl	(%rbp,%rdi), %ecx
	leal	-58(%rcx), %r8d
	cmpb	$-10, %r8b
	jb	.LBB9_51
	incq	%rbp
	leaq	(%rax,%rax,4), %rax
	leaq	(%rcx,%rax,2), %rax
	addq	$-48, %rax
	cmpq	$16, %rbp
	jne	.LBB9_48
	movl	$16, %ebp
.LBB9_51:
	cmpq	%rdx, %rbp
	jle	.LBB9_37
	testq	%rax, %rax
	je	.LBB9_53
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_135
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$265(%rip), %r8
	jmp	.LBB9_134
.LBB9_95:
	incq	%r9
	jmp	.LBB9_96
.LBB9_94:
	addq	$2, %r9
	jmp	.LBB9_96
.LBB9_93:
	addq	$3, %r9
.LBB9_96:
	xorl	%eax, %eax
.LBB9_97:
	cmpq	$16, %r12
	jge	.LBB9_98
	jae	.LBB9_210
	movzbl	(%r12,%rdi), %ecx
	cmpq	$32, %rcx
	jne	.LBB9_107
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_22
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$1a0(%rip), %r8
	jmp	.LBB9_106
.LBB9_107:
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rdx
	movzbl	(%rcx,%rdx), %r10d
	leaq	-245(%rcx), %rdx
	cmpq	$-52, %rdx
	ja	.LBB9_109
	andl	$1, %r10d
	movl	%r10d, %r8d
	negl	%r8d
	decl	%r10d
	andl	%ecx, %r10d
	andl	$65533, %r8d
	orl	%r10d, %r8d
	movl	$1, %edx
	jmp	.LBB9_128
.LBB9_109:
	movl	$16, %r11d
	subq	%r12, %r11
	movl	%r10d, %r14d
	andl	$7, %r14d
	movl	$1, %edx
	movl	$65533, %r8d
	cmpq	%r14, %r11
	jae	.LBB9_110
.LBB9_128:
	addq	%rdx, %r12
	testb	%al, %al
	je	.LBB9_130
	leaq	bufio._writer_proc(%rip), %rbp
	jmp	.LBB9_22
.LBB9_130:
	movq	$-2, %rax
	movl	%r9d, %ecx
	rolq	%cl, %rax
	cmpq	$64, %r9
	movq	$-1, %rcx
	cmovaeq	%rcx, %rax
	andq	%rax, 88(%rsp)
	testq	%r9, %r9
	leaq	bufio._writer_proc(%rip), %rbp
	jne	.LBB9_211
	shlq	$4, %r9
	leaq	(%rsp,%r9), %rdx
	addq	$112, %rdx
	leaq	256(%rsp), %rcx
	movq	%rsi, %r9
	callq	fmt.fmt_arg
	jmp	.LBB9_22
.LBB9_87:
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_89
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$264(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_89:
	movb	$1, %al
	xorl	%r9d, %r9d
	jmp	.LBB9_97
.LBB9_140:
	incq	%r13
	jmp	.LBB9_141
.LBB9_139:
	addq	$2, %r13
	jmp	.LBB9_141
.LBB9_138:
	addq	$3, %r13
	jmp	.LBB9_141
.LBB9_132:
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_135
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	128(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$264(%rip), %r8
.LBB9_134:
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_135:
	movb	$1, %r14b
	xorl	%r13d, %r13d
	jmp	.LBB9_142
.LBB9_110:
	cmpq	$15, %r12
	leaq	utf8.accept_ranges(%rip), %r14
	je	.LBB9_111
	shrl	$4, %r10d
	movzbl	1(%r12,%rdi), %ebp
	cmpb	(%r14,%r10,2), %bpl
	jb	.LBB9_128
	cmpb	%bpl, 1(%r14,%r10,2)
	jb	.LBB9_128
	leaq	-194(%rcx), %r14
	movzbl	%bpl, %r10d
	cmpq	$29, %r14
	ja	.LBB9_117
	andl	$31, %ecx
	shll	$6, %ecx
	andl	$63, %r10d
	orl	%ecx, %r10d
	movl	$2, %edx
	movl	%r10d, %r8d
	jmp	.LBB9_128
.LBB9_67:
	leaq	-15(%r12), %r9
	movl	$1, %r8d
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB9_68:
	leaq	(%r12,%r8), %r10
	movzbl	(%rdi,%r10), %r10d
	leal	-58(%r10), %r11d
	cmpb	$-10, %r11b
	jb	.LBB9_71
	leaq	(%rdx,%rdx,4), %rdx
	leaq	(%r10,%rdx,2), %rdx
	addq	$-48, %rdx
	leaq	(%r9,%r8), %r10
	incq	%r10
	incq	%r8
	cmpq	$1, %r10
	jne	.LBB9_68
	movq	%rcx, %r8
.LBB9_71:
	cmpq	$2, %r8
	setl	%r9b
	addq	%r8, %rax
	setne	%cl
	xorl	%eax, %eax
	orb	%r9b, %cl
	cmovneq	%rax, %rdx
	jne	.LBB9_77
	testq	%rdx, %rdx
	js	.LBB9_77
	jle	.LBB9_74
.LBB9_77:
	testb	%cl, %cl
	je	.LBB9_90
	movq	%r14, %r12
	jmp	.LBB9_79
.LBB9_53:
	xorl	%r13d, %r13d
.LBB9_141:
	xorl	%r14d, %r14d
.LBB9_142:
	cmpq	$15, %rbp
	jg	.LBB9_175
	ja	.LBB9_212
	movzbl	(%rbp,%rdi), %eax
	movl	$118, %r8d
	cmpb	$58, %al
	jne	.LBB9_173
	incq	%rbp
	movq	%rsi, 32(%rsp)
	leaq	256(%rsp), %rcx
	movq	%rbp, %rdx
	leaq	88(%rsp), %r8
	leaq	384(%rsp), %r9
	callq	"fmt.wprintf.parse_options-0"
	cmpq	$16, %rax
	jge	.LBB9_146
	movq	%rax, %r12
	jae	.LBB9_213
	movzbl	(%r12,%rdi), %eax
	cmpq	$125, %rax
	leaq	bufio._writer_proc(%rip), %rbp
	jne	.LBB9_153
	movq	296(%rsp), %rax
	testq	%rax, %rax
	leaq	128(%rsp), %r13
	je	.LBB9_152
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$1a0(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_152:
	incq	%r12
	jmp	.LBB9_22
.LBB9_153:
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rcx
	movzbl	(%rax,%rcx), %ecx
	leaq	-245(%rax), %rdx
	cmpq	$-52, %rdx
	ja	.LBB9_155
	andl	$1, %ecx
	movl	%ecx, %r8d
	negl	%r8d
	decl	%ecx
	andl	%eax, %ecx
	andl	$65533, %r8d
	orl	%ecx, %r8d
	movl	$1, %ebp
	jmp	.LBB9_171
.LBB9_155:
	movl	$16, %edx
	subq	%r12, %rdx
	movl	%ecx, %r9d
	andl	$7, %r9d
	movl	$1, %ebp
	movl	$65533, %r8d
	cmpq	%r9, %rdx
	jae	.LBB9_156
.LBB9_171:
	addq	%r12, %rbp
	cmpq	$15, %rbp
	ja	.LBB9_175
	movzbl	(%rbp,%rdi), %eax
.LBB9_173:
	movzbl	%al, %eax
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rcx
	movzbl	(%rax,%rcx), %r9d
	leaq	-245(%rax), %rcx
	cmpq	$-52, %rcx
	ja	.LBB9_177
	andl	$1, %r9d
	movl	%r9d, %ecx
	negl	%ecx
	decl	%r9d
	andl	%eax, %r9d
	andl	$65533, %ecx
	orl	%r9d, %ecx
	movl	$1, %r12d
.LBB9_190:
	addq	%rbp, %r12
	cmpl	$125, %ecx
	jne	.LBB9_194
	testb	%r14b, %r14b
	leaq	bufio._writer_proc(%rip), %rbp
	je	.LBB9_196
	leaq	128(%rsp), %r13
	jmp	.LBB9_22
.LBB9_177:
	movl	$16, %edx
	subq	%rbp, %rdx
	movl	%r9d, %ecx
	andl	$7, %ecx
	cmpq	%rcx, %rdx
	jae	.LBB9_178
.LBB9_193:
	incq	%rbp
	movq	%rbp, %r12
.LBB9_194:
	leaq	bufio._writer_proc(%rip), %rbp
	movq	296(%rsp), %rax
	testq	%rax, %rax
	leaq	128(%rsp), %r13
	je	.LBB9_22
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$1a4(%rip), %r8
.LBB9_106:
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
.LBB9_21:
	addq	%rax, 368(%rsp)
	jmp	.LBB9_22
.LBB9_178:
	cmpq	$15, %rbp
	jae	.LBB9_157
	shrl	$4, %r9d
	movzbl	1(%rbp,%rdi), %ecx
	leaq	utf8.accept_ranges(%rip), %r10
	cmpb	(%r10,%r9,2), %cl
	jb	.LBB9_193
	leaq	utf8.accept_ranges(%rip), %r10
	cmpb	%cl, 1(%r10,%r9,2)
	jb	.LBB9_193
	leaq	-194(%rax), %r9
	movzbl	%cl, %ecx
	cmpq	$29, %r9
	ja	.LBB9_183
	andl	$31, %eax
	shll	$6, %eax
	andl	$63, %ecx
	orl	%eax, %ecx
	movl	$2, %r12d
	jmp	.LBB9_190
.LBB9_196:
	testq	%r13, %r13
	jne	.LBB9_214
	shlq	$4, %r13
	leaq	(%rsp,%r13), %rdx
	addq	$112, %rdx
	leaq	256(%rsp), %rcx
	movq	%rsi, %r9
	callq	fmt.fmt_arg
	andb	$-2, 88(%rsp)
	leaq	128(%rsp), %r13
	jmp	.LBB9_22
.LBB9_156:
	cmpq	$15, %r12
	je	.LBB9_157
	shrl	$4, %ecx
	movzbl	1(%r12,%rdi), %r9d
	leaq	utf8.accept_ranges(%rip), %r10
	cmpb	(%r10,%rcx,2), %r9b
	jb	.LBB9_171
	cmpb	%r9b, 1(%r10,%rcx,2)
	jb	.LBB9_171
	leaq	-194(%rax), %r10
	movzbl	%r9b, %ecx
	cmpq	$29, %r10
	ja	.LBB9_162
	andl	$31, %eax
	shll	$6, %eax
	andl	$63, %ecx
	orl	%eax, %ecx
	movl	$2, %ebp
	movl	%ecx, %r8d
	jmp	.LBB9_171
.LBB9_183:
	cmpq	$14, %rbp
	je	.LBB9_163
	movzbl	2(%rbp,%rdi), %r9d
	cmpb	$-65, %r9b
	jg	.LBB9_193
	movl	%eax, %r10d
	andl	$-16, %r10d
	cmpl	$224, %r10d
	jne	.LBB9_187
	andl	$15, %eax
	shll	$12, %eax
	andl	$63, %ecx
	shll	$6, %ecx
	orl	%eax, %ecx
	andl	$63, %r9d
	orl	%r9d, %ecx
	movl	$3, %r12d
	jmp	.LBB9_190
.LBB9_117:
	cmpq	$14, %r12
	jae	.LBB9_118
	movzbl	2(%r12,%rdi), %ebp
	cmpb	$-65, %bpl
	jg	.LBB9_128
	movl	%ecx, %r14d
	andl	$-16, %r14d
	cmpl	$224, %r14d
	jne	.LBB9_123
	andl	$15, %ecx
	shll	$12, %ecx
	andl	$63, %r10d
	shll	$6, %r10d
	orl	%ecx, %r10d
	andl	$63, %ebp
	orl	%r10d, %ebp
	movl	$3, %edx
	movl	%ebp, %r8d
	jmp	.LBB9_128
.LBB9_90:
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_92
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$265(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_92:
	movb	$1, %al
.LBB9_74:
	movq	%r14, %r12
	xorl	%r9d, %r9d
	jmp	.LBB9_97
.LBB9_162:
	cmpq	$14, %r12
	jae	.LBB9_163
	movzbl	2(%r12,%rdi), %r9d
	cmpb	$-65, %r9b
	jg	.LBB9_171
	movl	%eax, %r10d
	andl	$-16, %r10d
	cmpl	$224, %r10d
	jne	.LBB9_167
	andl	$15, %eax
	shll	$12, %eax
	andl	$63, %ecx
	shll	$6, %ecx
	orl	%eax, %ecx
	andl	$63, %r9d
	orl	%ecx, %r9d
	movl	$3, %ebp
	movl	%r9d, %r8d
	jmp	.LBB9_171
.LBB9_187:
	cmpq	$13, %rbp
	jae	.LBB9_168
	movzbl	3(%rbp,%rdi), %edx
	cmpb	$-65, %dl
	jg	.LBB9_193
	andl	$7, %eax
	shll	$18, %eax
	andl	$63, %ecx
	shll	$12, %ecx
	orl	%eax, %ecx
	andl	$63, %r9d
	shll	$6, %r9d
	orl	%ecx, %r9d
	andl	$63, %edx
	orl	%r9d, %edx
	movl	$4, %r12d
	movl	%edx, %ecx
	jmp	.LBB9_190
.LBB9_123:
	cmpq	$13, %r12
	je	.LBB9_124
	movzbl	3(%r12,%rdi), %r11d
	cmpb	$-65, %r11b
	jg	.LBB9_128
	andl	$7, %ecx
	shll	$18, %ecx
	andl	$63, %r10d
	shll	$12, %r10d
	orl	%ecx, %r10d
	andl	$63, %ebp
	shll	$6, %ebp
	orl	%r10d, %ebp
	andl	$63, %r11d
	orl	%ebp, %r11d
	movl	$4, %edx
	movl	%r11d, %r8d
	jmp	.LBB9_128
.LBB9_167:
	cmpq	$13, %r12
	je	.LBB9_168
	movzbl	3(%r12,%rdi), %edx
	cmpb	$-65, %dl
	jg	.LBB9_171
	andl	$7, %eax
	shll	$18, %eax
	andl	$63, %ecx
	shll	$12, %ecx
	orl	%eax, %ecx
	andl	$63, %r9d
	shll	$6, %r9d
	orl	%ecx, %r9d
	andl	$63, %edx
	orl	%r9d, %edx
	movl	$4, %ebp
	movl	%edx, %r8d
	jmp	.LBB9_171
.LBB9_175:
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_23
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	128(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1a4(%rip), %r8
	jmp	.LBB9_101
.LBB9_98:
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_23
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	jmp	.LBB9_100
.LBB9_146:
	movq	296(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_23
	movq	304(%rsp), %rcx
	movq	$0, 128(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	128(%rsp), %rdx
	movq	%rdx, 40(%rsp)
.LBB9_100:
	movq	$0, 32(%rsp)
	leaq	.Lggv$1a0(%rip), %r8
.LBB9_101:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 368(%rsp)
.LBB9_23:
	movq	88(%rsp), %r13
	testq	%r13, %r13
	je	.LBB9_208
	movq	296(%rsp), %rax
	movq	304(%rsp), %rcx
	movq	368(%rsp), %rdi
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 128(%rsp)
	movaps	%xmm0, 144(%rsp)
	movq	$0, 160(%rsp)
	movq	%rax, 168(%rsp)
	movq	%rcx, 176(%rsp)
	movups	%xmm0, 184(%rsp)
	movups	%xmm0, 200(%rsp)
	movups	%xmm0, 216(%rsp)
	movq	$0, 232(%rsp)
	movq	%rdi, 240(%rsp)
	testq	%rax, %rax
	je	.LBB9_26
	movq	$0, 72(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1a6(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	addq	72(%rsp), %rdi
	movq	%rdi, 240(%rsp)
.LBB9_26:
	movb	$1, %al
	leaq	104(%rsp), %rbp
	xorl	%edi, %edi
	leaq	128(%rsp), %rbx
	leaq	96(%rsp), %r14
	leaq	.Lggv$244(%rip), %r15
.LBB9_27:
	leaq	-1(%rdi), %r12
	shlq	$4, %rdi
	addq	%rbp, %rdi
	.p2align	4, 0x90
.LBB9_28:
	incq	%r12
	cmpq	$63, %r12
	ja	.LBB9_204
	addq	$16, %rdi
	btq	%r12, %r13
	jae	.LBB9_28
	testb	$1, %al
	jne	.LBB9_33
	movq	168(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_33
	movq	176(%rsp), %rcx
	movq	$0, 72(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r15, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 240(%rsp)
.LBB9_33:
	testq	%r12, %r12
	jne	.LBB9_34
	movq	112(%rsp), %rcx
	movq	(%rdi), %rax
	movq	%rcx, 96(%rsp)
	movq	%rax, 104(%rsp)
	testq	%rcx, %rcx
	je	.LBB9_200
	testq	%rax, %rax
	je	.LBB9_200
	movq	%rbx, %rcx
	movq	%r14, %rdx
	movl	$118, %r8d
	movq	%rsi, %r9
	callq	fmt.fmt_arg
	jmp	.LBB9_202
	.p2align	4, 0x90
.LBB9_200:
	movq	168(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_202
	movq	176(%rsp), %rcx
	movq	$0, 72(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$24d(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 240(%rsp)
.LBB9_202:
	movl	$1, %edi
	xorl	%eax, %eax
	jmp	.LBB9_27
.LBB9_204:
	movb	$41, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	168(%rsp), %rax
	testq	%rax, %rax
	je	.LBB9_205
	movq	176(%rsp), %rcx
	movq	$0, 376(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	376(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	240(%rsp), %rax
	addq	376(%rsp), %rax
	movq	%rax, 240(%rsp)
	jmp	.LBB9_207
.LBB9_205:
	movq	240(%rsp), %rax
.LBB9_207:
	movq	%rax, 368(%rsp)
.LBB9_208:
	leaq	424(%rsp), %rdi
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	bufio.writer_flush
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	callq	bufio.writer_flush
	movaps	1520(%rsp), %xmm6
	addq	$1544, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB9_212:
	movq	$16, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$746, %edx
	movl	$22, %r8d
	movq	%rbp, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_210:
	movq	$16, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$715, %edx
	movl	$18, %r8d
	movq	%r12, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_209:
	movq	$16, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$916, %edx
	movl	$32, %r8d
	movq	%r12, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_213:
	movq	$16, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$753, %edx
	movl	$19, %r8d
	movq	%r12, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_34:
	movq	$1, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$793, %edx
	movl	$16, %r8d
	movq	%r12, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_211:
	movq	$1, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$725, %edx
	movl	$23, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_157:
	movq	%rdx, 32(%rsp)
	jmp	.LBB9_112
.LBB9_111:
	movq	%r11, 32(%rsp)
.LBB9_112:
	leaq	.Lggv$10d(%rip), %rcx
	movl	$1, %r9d
	movl	$122, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_214:
	movq	$1, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$776, %edx
	movl	$23, %r8d
	movq	%r13, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_163:
	movq	%rdx, 32(%rsp)
	jmp	.LBB9_119
.LBB9_118:
	movq	%r11, 32(%rsp)
.LBB9_119:
	leaq	.Lggv$10d(%rip), %rcx
	movl	$2, %r9d
	movl	$129, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB9_168:
	movq	%rdx, 32(%rsp)
	jmp	.LBB9_125
.LBB9_124:
	movq	%r11, 32(%rsp)
.LBB9_125:
	leaq	.Lggv$10d(%rip), %rcx
	movl	$3, %r9d
	movl	$136, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	runtime.heap_allocator_proc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.heap_allocator_proc:
.seh_proc runtime.heap_allocator_proc
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	184(%rsp), %r14
	cmpb	$7, %dl
	ja	.LBB10_35
	movq	160(%rsp), %rax
	movzbl	%dl, %ecx
	leaq	.LJTI10_0(%rip), %r10
	movslq	(%r10,%rcx,4), %rcx
	addq	%r10, %rcx
	jmpq	*%rcx
.LBB10_2:
	xorl	%esi, %esi
	testb	%dl, %dl
	sete	%sil
	cmpq	$9, %r9
	movl	$8, %ebx
	cmovgeq	%r9, %rbx
	movq	%r8, %r15
	leaq	(%rbx,%r8), %rdi
	addq	$7, %rdi
	callq	GetProcessHeap
	shll	$3, %esi
	movq	%rax, %rcx
	movl	%esi, %edx
	movq	%rdi, %r8
	callq	HeapAlloc
	xorl	%ecx, %ecx
	movb	$1, %sil
	testq	%rax, %rax
	je	.LBB10_3
	leaq	(%rbx,%r15), %r9
	decq	%r9
	leaq	8(%rax), %r8
	leaq	(%rbx,%rax), %r10
	addq	$7, %r10
	negq	%rbx
	andq	%r10, %rbx
	movq	%r15, %r10
	subq	%r8, %r10
	addq	%rbx, %r10
	movl	$0, %r8d
	cmpq	%r9, %r10
	jg	.LBB10_6
	movq	%r15, %rdx
	movq	%rax, -8(%rbx)
	xorl	%esi, %esi
	testq	%r15, %r15
	cmovleq	%rsi, %rdx
	movq	%rbx, %rcx
	movq	%rdx, %r8
	jmp	.LBB10_6
.LBB10_10:
	cmpq	$9, %r9
	movl	$8, %r15d
	cmovgeq	%r9, %r15
	leaq	(%r15,%r8), %rsi
	leaq	(%r15,%r8), %r12
	decq	%r12
	testq	%rax, %rax
	je	.LBB10_11
	movq	-8(%rax), %rbx
	addq	$7, %rsi
	je	.LBB10_17
	movl	%edx, %ebp
	movq	%r8, %r13
	callq	GetProcessHeap
	movq	%rax, %rcx
	movl	$8, %edx
	testq	%rbx, %rbx
	je	.LBB10_21
	movq	%rbx, %r8
	movq	%rsi, %r9
	callq	HeapReAlloc
	jmp	.LBB10_23
.LBB10_37:
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r14)
	movb	$4, %sil
	jmp	.LBB10_36
.LBB10_7:
	testq	%rax, %rax
	je	.LBB10_35
	movq	-8(%rax), %rsi
	testq	%rsi, %rsi
	je	.LBB10_35
	callq	GetProcessHeap
	movq	%rax, %rcx
	xorl	%edx, %edx
	movq	%rsi, %r8
	callq	HeapFree
	jmp	.LBB10_35
.LBB10_33:
	testq	%rax, %rax
	je	.LBB10_35
	movb	$-37, (%rax)
.LBB10_35:
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r14)
	xorl	%esi, %esi
	jmp	.LBB10_36
.LBB10_11:
	movq	%r8, %rbx
	xorl	%edi, %edi
	cmpb	$3, %dl
	sete	%dil
	addq	$7, %rsi
	callq	GetProcessHeap
	shll	$3, %edi
	movq	%rax, %rcx
	movl	%edi, %edx
	movq	%rsi, %r8
	callq	HeapAlloc
	xorl	%ecx, %ecx
	movb	$1, %sil
	testq	%rax, %rax
	je	.LBB10_12
	leaq	8(%rax), %rdx
	leaq	(%r15,%rax), %r8
	addq	$7, %r8
	negq	%r15
	andq	%r8, %r15
	movq	%rbx, %r8
	subq	%rdx, %r8
	addq	%r15, %r8
	movl	$0, %edx
	cmpq	%r12, %r8
	jg	.LBB10_15
	movq	%rax, -8(%r15)
	xorl	%esi, %esi
	testq	%rbx, %rbx
	cmovleq	%rsi, %rbx
	movq	%r15, %rcx
	movq	%rbx, %rdx
	jmp	.LBB10_15
.LBB10_3:
	xorl	%r8d, %r8d
.LBB10_6:
	movq	%rcx, (%r14)
	movq	%r8, 8(%r14)
	jmp	.LBB10_36
.LBB10_17:
	testq	%rbx, %rbx
	je	.LBB10_18
	movq	%r8, %rsi
	movl	%edx, %ebp
	callq	GetProcessHeap
	xorl	%edi, %edi
	movq	%rax, %rcx
	xorl	%edx, %edx
	movq	%rbx, %r8
	callq	HeapFree
	movl	%ebp, %edx
	movq	%rsi, %r8
	jmp	.LBB10_24
.LBB10_21:
	movq	%rsi, %r8
	callq	HeapAlloc
.LBB10_23:
	movq	%rax, %rdi
	movq	%r13, %r8
	movl	%ebp, %edx
.LBB10_24:
	xorl	%eax, %eax
	movb	$1, %sil
	testq	%rdi, %rdi
	je	.LBB10_25
	leaq	8(%rdi), %rcx
	leaq	(%r15,%rdi), %r9
	addq	$7, %r9
	negq	%r15
	andq	%r9, %r15
	movq	%r8, %r9
	subq	%rcx, %r9
	addq	%r15, %r9
	movl	$0, %ebx
	cmpq	%r12, %r9
	jg	.LBB10_32
	xorl	%esi, %esi
	testq	%r8, %r8
	movl	$0, %ebx
	cmovgq	%r8, %rbx
	movq	%rdi, -8(%r15)
	cmpb	$3, %dl
	jne	.LBB10_31
	movq	168(%rsp), %r9
	subq	%r9, %r8
	jle	.LBB10_31
	testq	%r9, %r9
	js	.LBB10_38
	addq	%r15, %r9
	xorl	%esi, %esi
	movq	%r9, %rcx
	xorl	%edx, %edx
	callq	memset
.LBB10_31:
	movq	%r15, %rax
	jmp	.LBB10_32
.LBB10_25:
	xorl	%ebx, %ebx
.LBB10_32:
	movq	%rax, (%r14)
	movq	%rbx, 8(%r14)
	jmp	.LBB10_36
.LBB10_12:
	xorl	%edx, %edx
.LBB10_15:
	movq	%rcx, (%r14)
	movq	%rdx, 8(%r14)
.LBB10_36:
	movl	%esi, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB10_18:
	xorl	%edi, %edi
	jmp	.LBB10_24
.LBB10_38:
	movq	%rbx, 40(%rsp)
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$24e(%rip), %rcx
	movl	$63, %edx
	movl	$37, %r8d
	callq	runtime.slice_handle_error
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI10_0:
	.long	.LBB10_2-.LJTI10_0
	.long	.LBB10_7-.LJTI10_0
	.long	.LBB10_37-.LJTI10_0
	.long	.LBB10_10-.LJTI10_0
	.long	.LBB10_33-.LJTI10_0
	.long	.LBB10_37-.LJTI10_0
	.long	.LBB10_2-.LJTI10_0
	.long	.LBB10_10-.LJTI10_0
	.text
	.seh_endproc

	.def	"os._file_stream_proc-827";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"os._file_stream_proc-827":
.seh_proc "os._file_stream_proc-827"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$2424, %rsp
	.seh_stackalloc 2424
	movaps	%xmm6, 2400(%rsp)
	.seh_savexmm %xmm6, 2400
	.seh_endprologue
	cmpq	$9, %rdx
	ja	.LBB11_72
	movq	%r9, %r14
	movq	%r8, %r15
	movq	%rcx, %rdi
	xorl	%ebx, %ebx
	leaq	.LJTI11_0(%rip), %rax
	movslq	(%rax,%rdx,4), %rcx
	addq	%rax, %rcx
	jmpq	*%rcx
.LBB11_2:
	movq	%rdi, %rcx
	callq	CloseHandle
	testl	%eax, %eax
	jne	.LBB11_72
	jmp	.LBB11_71
.LBB11_3:
	movq	8(%r15), %r14
	testq	%r14, %r14
	je	.LBB11_11
	movl	$0, 80(%rsp)
	jle	.LBB11_11
	xorl	%esi, %esi
	movl	$1073741824, %ebp
	leaq	80(%rsp), %rbx
	.p2align	4, 0x90
.LBB11_6:
	movq	8(%r15), %rax
	cmpq	%rax, %rsi
	jae	.LBB11_111
	movl	%r14d, %r8d
	subl	%esi, %r8d
	cmpl	$1073741824, %r8d
	cmovgel	%ebp, %r8d
	movq	(%r15), %rdx
	addq	%rsi, %rdx
	movq	$0, 32(%rsp)
	movq	%rdi, %rcx
	movq	%rbx, %r9
	callq	WriteFile
	movl	80(%rsp), %ecx
	testq	%rcx, %rcx
	je	.LBB11_94
	testl	%eax, %eax
	je	.LBB11_94
	addq	%rcx, %rsi
	cmpq	%r14, %rsi
	jl	.LBB11_6
	testq	%rsi, %rsi
	jne	.LBB11_73
.LBB11_11:
	movl	$1, %ebx
	xorl	%esi, %esi
	jmp	.LBB11_106
.LBB11_12:
	movl	$767, %esi
	jmp	.LBB11_106
.LBB11_13:
	cmpq	$0, 8(%r15)
	je	.LBB11_98
	movl	$0, 60(%rsp)
	leaq	60(%rsp), %rdx
	movq	%rdi, %rcx
	callq	GetConsoleMode
	movq	8(%r15), %rcx
	cmpq	$1073741824, %rcx
	movl	$1073741824, %ebx
	cmovlq	%rcx, %rbx
	testl	%eax, %eax
	je	.LBB11_90
	testq	%rcx, %rcx
	js	.LBB11_117
	je	.LBB11_98
	movq	(%r15), %r14
	xorl	%esi, %esi
	leaq	1628(%rsp), %r12
	movl	$772, %r8d
	movq	%r12, %rcx
	xorl	%edx, %edx
	callq	memset
	leaq	80(%rsp), %rcx
	movl	$1544, %r8d
	xorl	%edx, %edx
	callq	memset
	movq	%rbx, %rax
	shrq	$2, %rax
	cmpq	$2, %rax
	movl	$1, %ecx
	cmovgeq	%rax, %rcx
	cmpq	$386, %rcx
	movl	$386, %r8d
	cmovbq	%rcx, %r8
	leaq	48(%rsp), %rbp
	movq	%r14, 64(%rsp)
	movq	%r8, 72(%rsp)
.LBB11_18:
	movl	$0, 48(%rsp)
	movq	$0, 32(%rsp)
	movq	%rdi, %rcx
	movq	%r12, %rdx
	movq	%rbp, %r9
	callq	ReadConsoleW
	testl	%eax, %eax
	je	.LBB11_20
	xorl	%r13d, %r13d
	jmp	.LBB11_21
.LBB11_20:
	callq	GetLastError
	movl	%eax, %r13d
.LBB11_21:
	movl	48(%rsp), %r15d
	cmpq	$387, %r15
	jae	.LBB11_115
	testq	%r15, %r15
	je	.LBB11_49
	xorl	%ebp, %ebp
	xorl	%r12d, %r12d
	.p2align	4, 0x90
.LBB11_24:
	cmpq	$1543, %rbp
	jg	.LBB11_42
	cmpq	%r15, %r12
	jae	.LBB11_109
	movzwl	1628(%rsp,%r12,2), %eax
	leal	8192(%rax), %ecx
	movzwl	%cx, %ecx
	cmpl	$63488, %ecx
	jae	.LBB11_29
	cmpw	$127, %ax
	ja	.LBB11_35
	movl	$1, %r9d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	jmp	.LBB11_39
	.p2align	4, 0x90
.LBB11_29:
	movl	$65533, %ecx
	cmpl	$56319, %eax
	ja	.LBB11_38
	leaq	1(%r12), %r10
	cmpq	%r15, %r10
	jge	.LBB11_38
	movzwl	1630(%rsp,%r12,2), %edx
	movl	%edx, %r8d
	andl	$64512, %r8d
	cmpl	$56320, %r8d
	jne	.LBB11_38
	shll	$10, %eax
	addl	%edx, %eax
	addl	$-56613888, %eax
	movl	%eax, %ecx
	andl	$2095104, %ecx
	movl	$65533, %r8d
	cmpl	$55296, %ecx
	je	.LBB11_34
	movl	%eax, %r8d
.LBB11_34:
	movl	%r8d, %eax
	shrl	$18, %eax
	orb	$-16, %al
	movl	%r8d, %edx
	shrl	$12, %edx
	andb	$63, %dl
	orb	$-128, %dl
	movl	%r8d, %ecx
	shrl	$6, %ecx
	andb	$63, %cl
	orb	$-128, %cl
	andb	$63, %r8b
	orb	$-128, %r8b
	movl	$4, %r9d
	movq	%r10, %r12
	jmp	.LBB11_40
.LBB11_35:
	cmpl	$2048, %eax
	jae	.LBB11_37
	movl	%eax, %r8d
	shrl	$6, %r8d
	orb	$-64, %r8b
	andb	$63, %al
	movl	%eax, %edx
	orb	$-128, %dl
	movl	$2, %r9d
	xorl	%ecx, %ecx
	movl	%r8d, %eax
	jmp	.LBB11_39
.LBB11_37:
	movl	%eax, %ecx
	andl	$63488, %ecx
	cmpl	$55296, %ecx
	movl	$65533, %ecx
	cmovel	%ecx, %eax
	movl	%eax, %ecx
.LBB11_38:
	movl	%ecx, %eax
	shrl	$12, %eax
	orb	$-32, %al
	movl	%ecx, %edx
	shrl	$6, %edx
	andb	$63, %dl
	orb	$-128, %dl
	andb	$63, %cl
	orb	$-128, %cl
	movl	$3, %r9d
.LBB11_39:
	xorl	%r8d, %r8d
.LBB11_40:
	movb	%al, 52(%rsp)
	movb	%dl, 53(%rsp)
	movb	%cl, 54(%rsp)
	movb	%r8b, 55(%rsp)
	testq	%rbp, %rbp
	js	.LBB11_110
	movl	$1544, %r14d
	subq	%rbp, %r14
	cmpq	%r9, %r14
	cmovgeq	%r9, %r14
	leaq	(%rsp,%rbp), %rcx
	addq	$80, %rcx
	leaq	52(%rsp), %rdx
	movq	%r14, %r8
	callq	memcpy
	addq	%r14, %rbp
	incq	%r12
	cmpq	%r15, %r12
	jl	.LBB11_24
.LBB11_42:
	cmpq	$1544, %rbp
	ja	.LBB11_116
	xorl	%eax, %eax
	movq	64(%rsp), %r14
	.p2align	4, 0x90
.LBB11_44:
	cmpq	%rbx, %rsi
	jge	.LBB11_48
	movzbl	80(%rsp,%rax), %ecx
	cmpb	$26, %cl
	je	.LBB11_93
	cmpq	%rbx, %rsi
	jae	.LBB11_112
	movb	%cl, (%r14,%rsi)
	incq	%rsi
	incq	%rax
	cmpq	%rax, %rbp
	jne	.LBB11_44
.LBB11_48:
	movl	48(%rsp), %eax
	leaq	1628(%rsp), %r12
	leaq	48(%rsp), %rbp
	jmp	.LBB11_50
.LBB11_49:
	xorl	%eax, %eax
.LBB11_50:
	movq	72(%rsp), %r8
	cmpl	%r8d, %eax
	jb	.LBB11_93
	jne	.LBB11_57
	cmpq	$2, %rsi
	jl	.LBB11_57
	leaq	-2(%rsi), %r9
	cmpq	%rbx, %rsi
	jg	.LBB11_118
	addq	%r14, %r9
	leaq	.Lcsbs$f1(%rip), %rax
	cmpq	%rax, %r9
	je	.LBB11_93
	cmpb	$13, (%r9)
	jne	.LBB11_57
	cmpb	$10, 1(%r9)
	je	.LBB11_93
.LBB11_57:
	cmpq	%rbx, %rsi
	jge	.LBB11_93
	testq	%r13, %r13
	je	.LBB11_18
	jmp	.LBB11_93
.LBB11_59:
	testq	%r14, %r14
	js	.LBB11_85
	movq	8(%r15), %rbp
	movl	$1, %ebx
	testq	%rbp, %rbp
	jle	.LBB11_89
	movq	(%r15), %r15
	xorps	%xmm6, %xmm6
	leaq	80(%rsp), %r13
	leaq	1628(%rsp), %r12
	xorl	%esi, %esi
	jmp	.LBB11_64
	.p2align	4, 0x90
.LBB11_62:
	movl	1628(%rsp), %r9d
	cmpq	%r9, %rbp
	jb	.LBB11_114
.LBB11_63:
	addq	%r9, %rsi
	addq	%r9, %r15
	addq	%r9, %r14
	subq	%r9, %rbp
	jle	.LBB11_67
.LBB11_64:
	cmpq	$1073741824, %rbp
	movl	$1073741824, %r8d
	cmovlq	%rbp, %r8
	movq	%r14, %rax
	shrq	$32, %rax
	movaps	%xmm6, 80(%rsp)
	movl	%r14d, 96(%rsp)
	movl	%eax, 100(%rsp)
	movq	$0, 104(%rsp)
	movl	$0, 1628(%rsp)
	movq	%r13, 32(%rsp)
	movq	%rdi, %rcx
	movq	%r15, %rdx
	movq	%r12, %r9
	callq	ReadFile
	testl	%eax, %eax
	jne	.LBB11_62
	callq	GetLastError
	movl	%eax, %r9d
	testl	%eax, %eax
	je	.LBB11_63
	cmpl	$38, %eax
	jne	.LBB11_107
.LBB11_67:
	xorl	%r13d, %r13d
	testq	%rsi, %rsi
	jne	.LBB11_103
	jmp	.LBB11_108
.LBB11_68:
	movq	$0, 80(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdi, %rcx
	callq	GetFileSizeEx
	testl	%eax, %eax
	je	.LBB11_101
	xorl	%r13d, %r13d
	jmp	.LBB11_102
.LBB11_70:
	movq	%rdi, %rcx
	callq	FlushFileBuffers
	testl	%eax, %eax
	jne	.LBB11_72
.LBB11_71:
	callq	GetLastError
.LBB11_72:
	xorl	%esi, %esi
	jmp	.LBB11_73
.LBB11_74:
	testq	%r14, %r14
	js	.LBB11_85
	movq	8(%r15), %r13
	movl	$1, %ebx
	testq	%r13, %r13
	jle	.LBB11_89
	movq	(%r15), %r15
	xorl	%esi, %esi
	xorps	%xmm6, %xmm6
	leaq	80(%rsp), %rbp
	leaq	1628(%rsp), %r12
	jmp	.LBB11_79
	.p2align	4, 0x90
.LBB11_77:
	movl	1628(%rsp), %r9d
	cmpq	%r9, %r13
	jb	.LBB11_113
.LBB11_78:
	addq	%r9, %rsi
	addq	%r9, %r15
	addq	%r9, %r14
	subq	%r9, %r13
	jle	.LBB11_88
.LBB11_79:
	cmpq	$1073741824, %r13
	movl	$1073741824, %r8d
	cmovlq	%r13, %r8
	movq	%r14, %rax
	shrq	$32, %rax
	movaps	%xmm6, 80(%rsp)
	movl	%r14d, 96(%rsp)
	movl	%eax, 100(%rsp)
	movq	$0, 104(%rsp)
	movl	$0, 1628(%rsp)
	movq	%rbp, 32(%rsp)
	movq	%rdi, %rcx
	movq	%r15, %rdx
	movq	%r12, %r9
	callq	WriteFile
	testl	%eax, %eax
	jne	.LBB11_77
	callq	GetLastError
	testl	%eax, %eax
	jne	.LBB11_99
	xorl	%r9d, %r9d
	jmp	.LBB11_78
.LBB11_82:
	movq	%r14, %rax
	shrq	$32, %rax
	movl	%eax, 80(%rsp)
	movq	%rdi, %rcx
	callq	GetFileType
	cmpl	$3, %eax
	jne	.LBB11_86
	movl	$536870912, %r13d
	xorl	%esi, %esi
	jmp	.LBB11_103
.LBB11_84:
	movl	$-1, %ebx
	xorl	%esi, %esi
	jmp	.LBB11_106
.LBB11_85:
	movl	$14, %ebx
	xorl	%esi, %esi
	jmp	.LBB11_106
.LBB11_98:
	xorl	%r13d, %r13d
	jmp	.LBB11_95
.LBB11_86:
	movq	2528(%rsp), %rax
	xorl	%ecx, %ecx
	cmpq	$1, %rax
	sete	%cl
	cmpq	$2, %rax
	movl	$2, %r9d
	cmovnel	%ecx, %r9d
	leaq	80(%rsp), %r8
	movq	%rdi, %rcx
	movl	%r14d, %edx
	callq	SetFilePointer
	cmpl	$-1, %eax
	je	.LBB11_97
	movl	80(%rsp), %ecx
	shlq	$32, %rcx
	movl	%eax, %esi
	orq	%rcx, %rsi
	xorl	%r13d, %r13d
	jmp	.LBB11_103
.LBB11_101:
	callq	GetLastError
	movl	%eax, %r13d
.LBB11_102:
	movq	80(%rsp), %rsi
	jmp	.LBB11_103
.LBB11_88:
	testq	%rsi, %rsi
	jne	.LBB11_73
.LBB11_89:
	xorl	%esi, %esi
	jmp	.LBB11_106
.LBB11_90:
	movl	$0, 56(%rsp)
	testq	%rcx, %rcx
	je	.LBB11_119
	movq	(%r15), %rdx
	movq	$0, 32(%rsp)
	leaq	56(%rsp), %r9
	movq	%rdi, %rcx
	movl	%ebx, %r8d
	callq	ReadFile
	testl	%eax, %eax
	je	.LBB11_100
	movl	56(%rsp), %esi
	xorl	%eax, %eax
	testq	%rsi, %rsi
	movl	$38, %r13d
	cmovneq	%rax, %r13
.LBB11_93:
	testq	%rsi, %rsi
	jne	.LBB11_103
	jmp	.LBB11_95
.LBB11_94:
	callq	GetLastError
	movl	%eax, %r13d
	testq	%rsi, %rsi
	jne	.LBB11_103
	jmp	.LBB11_95
.LBB11_97:
	callq	GetLastError
	movl	%eax, %r13d
	xorl	%esi, %esi
	jmp	.LBB11_103
.LBB11_99:
	movl	%eax, %r13d
	jmp	.LBB11_103
.LBB11_100:
	callq	GetLastError
	movl	%eax, %r13d
.LBB11_95:
	xorl	%esi, %esi
	testq	%r13, %r13
	je	.LBB11_96
.LBB11_103:
	testq	%r13, %r13
	je	.LBB11_73
	movl	$1, %ebx
	cmpl	$38, %r13d
	je	.LBB11_106
	movl	$14, %ebx
	jmp	.LBB11_106
.LBB11_73:
	xorl	%ebx, %ebx
.LBB11_106:
	movq	2536(%rsp), %rax
	movq	%rsi, (%rax)
	movl	%ebx, %eax
	movaps	2400(%rsp), %xmm6
	addq	$2424, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB11_96:
	movl	$1, %ebx
	jmp	.LBB11_106
.LBB11_107:
	movq	%r9, %r13
	testq	%rsi, %rsi
	jne	.LBB11_103
.LBB11_108:
	xorl	%esi, %esi
	testq	%r13, %r13
	jne	.LBB11_103
	jmp	.LBB11_106
.LBB11_109:
	movq	%r15, 32(%rsp)
	leaq	.Lggv$5f(%rip), %rcx
	movl	$117, %edx
	movl	$17, %r8d
	movq	%r12, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB11_110:
	movq	$1544, 40(%rsp)
	movq	$1544, 32(%rsp)
	leaq	.Lggv$5f(%rip), %rcx
	movl	$127, %edx
	movl	$14, %r8d
	movq	%rbp, %r9
	callq	runtime.slice_handle_error
.LBB11_111:
	movq	%rax, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$91, %edx
	movl	$48, %r8d
	movq	%rsi, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB11_112:
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$134, %edx
	movl	$6, %r8d
	movq	%rsi, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB11_113:
	movq	%r13, 40(%rsp)
	movq	%r13, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$327, %edx
	movl	$8, %r8d
	callq	runtime.slice_handle_error
.LBB11_114:
	movq	%rbp, 40(%rsp)
	movq	%rbp, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$299, %edx
	movl	$8, %r8d
	callq	runtime.slice_handle_error
.LBB11_115:
	movq	%r15, 32(%rsp)
	movq	$386, 40(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$124, %edx
	movl	$50, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB11_116:
	movq	%rbp, 32(%rsp)
	movq	$1544, 40(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$125, %edx
	movl	$14, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB11_117:
	movq	%rcx, 40(%rsp)
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$167, %edx
	movl	$46, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB11_118:
	movq	%rbx, 40(%rsp)
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$143, %edx
	movl	$58, %r8d
	callq	runtime.slice_handle_error
.LBB11_119:
	movq	$0, 32(%rsp)
	leaq	.Lggv$115(%rip), %rcx
	movl	$174, %edx
	movl	$40, %r8d
	xorl	%r9d, %r9d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI11_0:
	.long	.LBB11_2-.LJTI11_0
	.long	.LBB11_70-.LJTI11_0
	.long	.LBB11_13-.LJTI11_0
	.long	.LBB11_59-.LJTI11_0
	.long	.LBB11_3-.LJTI11_0
	.long	.LBB11_74-.LJTI11_0
	.long	.LBB11_82-.LJTI11_0
	.long	.LBB11_68-.LJTI11_0
	.long	.LBB11_84-.LJTI11_0
	.long	.LBB11_12-.LJTI11_0
	.text
	.seh_endproc

	.def	"runtime.windows_trap_array_bounds-660";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"runtime.windows_trap_array_bounds-660":
.seh_proc "runtime.windows_trap_array_bounds-660"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	$-1073741684, %ecx
	xorl	%edx, %edx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	RaiseException
	int3
	.seh_endproc

	.def	runtime.type_assertion_trap;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.type_assertion_trap:
.seh_proc runtime.type_assertion_trap
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	"runtime.windows_trap_type_assertion-663"
	int3
	.seh_endproc

	.def	"runtime.windows_trap_type_assertion-663";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"runtime.windows_trap_type_assertion-663":
.seh_proc "runtime.windows_trap_type_assertion-663"
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	callq	"runtime.windows_trap_array_bounds-660"
	int3
	.seh_endproc

	.def	runtime.bounds_check_error;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.bounds_check_error:
.seh_proc runtime.bounds_check_error
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	80(%rsp), %rax
	cmpq	%rax, %r9
	jae	.LBB15_2
	addq	$40, %rsp
	retq
.LBB15_2:
	movq	%rax, 32(%rsp)
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	io.write_u64;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_u64:
.seh_proc io.write_u64
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$168, %rsp
	.seh_stackalloc 168
	.seh_endprologue
	movq	%r9, %rsi
	movq	%r8, %rdi
	movq	%rcx, %rbx
	movq	240(%rsp), %r14
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$32, 104(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r14, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$0, 32(%rsp)
	leaq	80(%rsp), %rcx
	leaq	96(%rsp), %rax
	movl	$10, %r9d
	movq	%rdx, %r8
	movq	%rax, %rdx
	callq	strconv.append_bits
	movaps	80(%rsp), %xmm0
	movups	%xmm0, 112(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB16_1
	movq	8(%rbx), %rcx
	movq	$0, 72(%rsp)
	movq	%r14, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	112(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rcx
	testq	%rdi, %rdi
	je	.LBB16_4
	addq	%rcx, (%rdi)
	jmp	.LBB16_4
.LBB16_1:
	movl	$-1, %eax
	xorl	%ecx, %ecx
.LBB16_4:
	movq	%rcx, (%rsi)
	addq	$168, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_endproc

	.def	io.write_i64;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_i64:
.seh_proc io.write_i64
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$168, %rsp
	.seh_stackalloc 168
	.seh_endprologue
	movq	%r9, %rsi
	movq	%r8, %rdi
	movq	%rcx, %rbx
	movq	240(%rsp), %r14
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$32, 104(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r14, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	leaq	80(%rsp), %rcx
	leaq	96(%rsp), %rax
	movl	$10, %r9d
	movq	%rdx, %r8
	movq	%rax, %rdx
	callq	strconv.append_bits
	movaps	80(%rsp), %xmm0
	movups	%xmm0, 112(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB17_1
	movq	8(%rbx), %rcx
	movq	$0, 72(%rsp)
	movq	%r14, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	112(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rcx
	testq	%rdi, %rdi
	je	.LBB17_4
	addq	%rcx, (%rdi)
	jmp	.LBB17_4
.LBB17_1:
	movl	$-1, %eax
	xorl	%ecx, %ecx
.LBB17_4:
	movq	%rcx, (%rsi)
	addq	$168, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_endproc

	.def	runtime.default_random_generator_proc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.default_random_generator_proc:
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	subq	$40, %rsp
	testq	%rcx, %rcx
	movl	_tls_index(%rip), %eax
	movq	%gs:88, %r9
	movq	(%r9,%rax,8), %rax
	leaq	"runtime.default_random_generator_proc-.global_rand_seed-29264"@SECREL32(%rax), %rsi
	cmovneq	%rcx, %rsi
	cmpq	$2, %rdx
	je	.LBB18_18
	cmpq	$1, %rdx
	je	.LBB18_13
	testq	%rdx, %rdx
	jne	.LBB18_21
	movq	(%rsi), %rdx
	testq	%rdx, %rdx
	jne	.LBB18_7
	cmpq	$0, 8(%rsi)
	je	.LBB18_6
	xorl	%edx, %edx
	jmp	.LBB18_7
.LBB18_13:
	movq	$0, 32(%rsp)
	movq	(%r8), %rdx
	testq	%rdx, %rdx
	je	.LBB18_16
	movq	8(%r8), %rax
	testq	%rax, %rax
	jle	.LBB18_16
	cmpq	$8, %rax
	movl	$8, %r8d
	cmovlq	%rax, %r8
	leaq	32(%rsp), %rcx
	callq	memcpy
	movq	32(%rsp), %rdx
	testq	%rdx, %rdx
	jne	.LBB18_17
.LBB18_16:
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
.LBB18_17:
	leaq	1(,%rdx,2), %rax
	movq	%rax, 8(%rsi)
	leaq	(%rdx,%rdx,2), %rax
	incq	%rax
	movabsq	$6364136223846793005, %rcx
	imulq	%rax, %rcx
	leaq	(%rcx,%rdx,2), %rax
	incq	%rax
	movq	%rax, (%rsi)
	jmp	.LBB18_21
.LBB18_18:
	cmpq	$4, 8(%r8)
	jne	.LBB18_21
	movq	(%r8), %rax
	orl	$10, (%rax)
	jmp	.LBB18_21
.LBB18_6:
	rdtsc
	shlq	$32, %rdx
	orq	%rax, %rdx
	leaq	1(,%rdx,2), %rax
	movq	%rax, 8(%rsi)
	leaq	(%rdx,%rdx,2), %rax
	incq	%rax
	movabsq	$6364136223846793005, %rcx
	imulq	%rax, %rcx
	leaq	(%rcx,%rdx,2), %rdx
	incq	%rdx
	movq	%rdx, (%rsi)
.LBB18_7:
	movq	8(%r8), %rax
	cmpq	$8, %rax
	jne	.LBB18_8
	movq	(%r8), %rax
	movabsq	$6364136223846793005, %rcx
	imulq	%rdx, %rcx
	movq	8(%rsi), %r8
	orq	$1, %r8
	addq	%rcx, %r8
	movq	%r8, (%rsi)
	movq	%rdx, %rcx
	shrq	$59, %rcx
	movq	%rcx, %r8
	addq	$5, %r8
	xorq	%rdx, %r8
	movabsq	$-5840758589994634535, %rdx
	imulq	%r8, %rdx
	rorq	%cl, %rdx
	movq	%rdx, (%rax)
	jmp	.LBB18_21
.LBB18_8:
	testq	%rax, %rax
	jle	.LBB18_21
	movabsq	$-5840758589994634535, %rdx
	movabsq	$6364136223846793005, %r9
	xorl	%r10d, %r10d
	xorl	%ecx, %ecx
	xorl	%r11d, %r11d
	jmp	.LBB18_10
	.p2align	4, 0x90
.LBB18_12:
	movb	%r11b, (%rdi,%r10)
	shrq	$8, %r11
	decb	%cl
	incq	%r10
	cmpq	%r10, %rax
	je	.LBB18_21
.LBB18_10:
	movq	(%r8), %rdi
	testb	%cl, %cl
	jne	.LBB18_12
	movq	(%rsi), %rbx
	movq	8(%rsi), %r14
	movq	%rbx, %rcx
	shrq	$59, %rcx
	movq	%rcx, %r11
	addq	$5, %r11
	xorq	%rbx, %r11
	imulq	%r9, %rbx
	orq	$1, %r14
	addq	%rbx, %r14
	movq	%r14, (%rsi)
	imulq	%rdx, %r11
	rorq	%cl, %r11
	movb	$7, %cl
	jmp	.LBB18_12
.LBB18_21:
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq

	.def	runtime.slice_handle_error;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.slice_handle_error:
.seh_proc runtime.slice_handle_error
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$80, %rsp
	.seh_stackalloc 80
	.seh_endprologue
	movq	%r9, %rdi
	movq	152(%rsp), %rsi
	movq	144(%rsp), %rbx
	xorps	%xmm0, %xmm0
	movups	%xmm0, 64(%rsp)
	movups	(%rcx), %xmm0
	movups	%xmm0, 40(%rsp)
	movl	%edx, 56(%rsp)
	movl	%r8d, 60(%rsp)
	leaq	40(%rsp), %rcx
	callq	runtime.print_caller_location
	leaq	.Lggv$45(%rip), %rcx
	callq	runtime.print_string
	movq	%rdi, %rcx
	callq	runtime.print_i64
	leaq	.Lggv$46(%rip), %rcx
	callq	runtime.print_string
	movq	%rbx, %rcx
	callq	runtime.print_i64
	leaq	.Lggv$250(%rip), %rcx
	callq	runtime.print_string
	movq	%rsi, %rcx
	callq	runtime.print_i64
	movb	$10, %cl
	callq	runtime.print_byte
	callq	runtime.bounds_trap
	int3
	.seh_endproc

	.def	main;
	.scl	2;
	.type	32;
	.endef
	.globl	main
	.p2align	4, 0x90
main:
.seh_proc main
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$264, %rsp
	.seh_stackalloc 264
	.seh_endprologue
	movq	%rdx, %rsi
	movslq	%ecx, %rdi
	leaq	.Lggv$41(%rip), %rcx
	movl	$43, %edx
	movl	$17, %r8d
	movq	%rdi, %r9
	callq	runtime.multi_pointer_slice_expr_error
	movq	%rsi, runtime.args__.0(%rip)
	movq	%rdi, runtime.args__.1(%rip)
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 32(%rsp)
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm0, 64(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 128(%rsp)
	leaq	32(%rsp), %rcx
	callq	runtime.default_context
	movaps	128(%rsp), %xmm0
	movaps	%xmm0, 240(%rsp)
	movaps	112(%rsp), %xmm0
	movaps	%xmm0, 224(%rsp)
	movaps	96(%rsp), %xmm0
	movaps	%xmm0, 208(%rsp)
	movaps	32(%rsp), %xmm0
	movaps	48(%rsp), %xmm1
	movaps	64(%rsp), %xmm2
	movaps	80(%rsp), %xmm3
	movaps	%xmm3, 192(%rsp)
	movaps	%xmm2, 176(%rsp)
	movaps	%xmm1, 160(%rsp)
	movaps	%xmm0, 144(%rsp)
	callq	__$startup_runtime
	leaq	144(%rsp), %rsi
	movq	%rsi, %rcx
	callq	main.main
	movq	%rsi, %rcx
	callq	__$cleanup_runtime
	xorl	%eax, %eax
	addq	$264, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_endproc

	.def	runtime.default_temp_allocator_proc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.default_temp_allocator_proc:
.seh_proc runtime.default_temp_allocator_proc
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$112, %rsp
	.seh_stackalloc 112
	movaps	%xmm6, 96(%rsp)
	.seh_savexmm %xmm6, 96
	.seh_endprologue
	cmpb	$7, %dl
	ja	.LBB21_24
	movq	%rcx, %rdi
	movq	224(%rsp), %r15
	movq	208(%rsp), %rbx
	movq	192(%rsp), %rsi
	movzbl	%dl, %eax
	leaq	.LJTI21_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB21_2:
	testq	%rsi, %rsi
	je	.LBB21_6
	movq	200(%rsp), %r14
	cmpq	%r14, %r8
	jne	.LBB21_15
	testq	%r8, %r8
	jns	.LBB21_25
	leaq	.Lggv$bd(%rip), %rcx
	movl	$208, %edx
	jmp	.LBB21_35
.LBB21_6:
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r15, 40(%rsp)
	leaq	80(%rsp), %rax
	movq	%rax, 32(%rsp)
	movq	%rdi, %rcx
	movq	%r8, %rdx
	movq	%r9, %r8
	movq	%rbx, %r9
	callq	runtime.arena_alloc
	movq	80(%rsp), %rsi
	movq	88(%rsp), %r8
	jmp	.LBB21_26
.LBB21_7:
	movq	16(%rdi), %rax
	testq	%rax, %rax
	je	.LBB21_23
	xorps	%xmm6, %xmm6
	leaq	80(%rsp), %rsi
	jmp	.LBB21_10
	.p2align	4, 0x90
.LBB21_9:
	movq	%rcx, %rax
	testq	%rcx, %rcx
	je	.LBB21_23
.LBB21_10:
	movq	(%rax), %rcx
	testq	%rcx, %rcx
	je	.LBB21_22
	movq	%rcx, 16(%rdi)
	movq	40(%rax), %rdx
	subq	%rdx, 32(%rdi)
	movq	8(%rax), %r10
	testq	%r10, %r10
	je	.LBB21_9
	movq	16(%rax), %rcx
	movaps	%xmm6, 80(%rsp)
	movq	%r15, 64(%rsp)
	movq	%rsi, 56(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rax, 32(%rsp)
	movq	$0, 40(%rsp)
	movb	$1, %dl
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	*%r10
	movq	16(%rdi), %rcx
	jmp	.LBB21_9
.LBB21_13:
	testq	%rsi, %rsi
	je	.LBB21_24
	movb	$93, (%rsi)
	jmp	.LBB21_24
.LBB21_15:
	testq	%r8, %r8
	je	.LBB21_20
	leaq	-1(%r9), %rax
	testq	%rsi, %rax
	jne	.LBB21_27
	cmpq	%r14, %r8
	jae	.LBB21_27
	testq	%r8, %r8
	jns	.LBB21_25
	leaq	.Lggv$bd(%rip), %rcx
	movl	$215, %edx
.LBB21_35:
	movq	%r8, %r9
	movl	$19, %r8d
	callq	runtime.multi_pointer_slice_handle_error
.LBB21_20:
	movb	$4, %al
.LBB21_21:
	xorl	%esi, %esi
	xorl	%r8d, %r8d
	jmp	.LBB21_26
.LBB21_22:
	movq	24(%rax), %rcx
	movq	32(%rax), %r8
	xorl	%edx, %edx
	callq	memset
	movq	16(%rdi), %rax
	movq	$0, 32(%rax)
.LBB21_23:
	movq	$0, 24(%rdi)
.LBB21_24:
	xorl	%esi, %esi
	xorl	%r8d, %r8d
.LBB21_25:
	xorl	%eax, %eax
.LBB21_26:
	movq	216(%rsp), %rcx
	movq	%rsi, (%rcx)
	movq	%r8, 8(%rcx)
	movaps	96(%rsp), %xmm6
	addq	$112, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB21_27:
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r15, 40(%rsp)
	leaq	80(%rsp), %rax
	movq	%rax, 32(%rsp)
	movq	%rdi, %rcx
	movq	%r8, %rdx
	movq	%r9, %r8
	movq	%rbx, %r9
	callq	runtime.arena_alloc
	testb	%al, %al
	jne	.LBB21_21
	movq	80(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB21_24
	testq	%r14, %r14
	js	.LBB21_36
	movq	88(%rsp), %r8
	cmpq	%r14, %r8
	cmovlq	%r8, %r14
	testq	%r14, %r14
	jle	.LBB21_32
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	movq	%r8, %rsi
	movq	%r14, %r8
	callq	memmove
	movq	%rsi, %r8
.LBB21_32:
	xorl	%eax, %eax
	movq	%rdi, %rsi
	jmp	.LBB21_26
.LBB21_36:
	leaq	.Lggv$bd(%rip), %rcx
	movl	$223, %edx
	movl	$28, %r8d
	movq	%r14, %r9
	callq	runtime.multi_pointer_slice_handle_error
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI21_0:
	.long	.LBB21_6-.LJTI21_0
	.long	.LBB21_20-.LJTI21_0
	.long	.LBB21_7-.LJTI21_0
	.long	.LBB21_2-.LJTI21_0
	.long	.LBB21_13-.LJTI21_0
	.long	.LBB21_20-.LJTI21_0
	.long	.LBB21_6-.LJTI21_0
	.long	.LBB21_2-.LJTI21_0
	.text
	.seh_endproc

	.def	bufio.writer_flush;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
bufio.writer_flush:
.seh_proc bufio.writer_flush
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$88, %rsp
	.seh_stackalloc 88
	.seh_endprologue
	movl	56(%rcx), %edi
	testl	%edi, %edi
	jne	.LBB22_16
	movq	48(%rcx), %r9
	testq	%r9, %r9
	je	.LBB22_2
	movq	8(%rcx), %rax
	cmpq	%rax, %r9
	jg	.LBB22_17
	movq	%rax, %r8
	orq	%r9, %r8
	js	.LBB22_17
	movq	(%rcx), %rax
	movq	%rax, 72(%rsp)
	movq	%r9, 80(%rsp)
	movq	32(%rcx), %r10
	testq	%r10, %r10
	je	.LBB22_18
	movq	40(%rcx), %rax
	movq	$0, 64(%rsp)
	movq	%rdx, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	xorl	%edi, %edi
	leaq	72(%rsp), %r8
	movl	$4, %edx
	movq	%rcx, %r14
	movq	%rax, %rcx
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%r14, %rcx
	movq	64(%rsp), %rsi
	movq	48(%r14), %r9
	cmpq	%rsi, %r9
	movl	$3, %ebx
	cmovlel	%eax, %ebx
	testl	%eax, %eax
	cmovnel	%eax, %ebx
	testl	%ebx, %ebx
	je	.LBB22_15
	testq	%rsi, %rsi
	jle	.LBB22_14
	movq	%r9, %r8
	subq	%rsi, %r8
	jle	.LBB22_14
	movq	8(%rcx), %rax
	js	.LBB22_19
	cmpq	%rax, %r8
	jg	.LBB22_19
	cmpq	%rax, %r9
	jg	.LBB22_20
	cmpq	%rax, %rsi
	jg	.LBB22_20
	movq	(%rcx), %rcx
	leaq	(%rcx,%rsi), %rdx
	callq	memmove
	movq	%r14, %rcx
	movq	48(%r14), %r9
	jmp	.LBB22_14
.LBB22_2:
	xorl	%edi, %edi
	jmp	.LBB22_16
.LBB22_18:
	movl	$-1, %ebx
	xorl	%esi, %esi
.LBB22_14:
	subq	%rsi, %r9
	movq	%r9, 48(%rcx)
	movl	%ebx, 56(%rcx)
	movl	%ebx, %edi
	jmp	.LBB22_16
.LBB22_15:
	movq	$0, 48(%rcx)
.LBB22_16:
	movl	%edi, %eax
	addq	$88, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB22_17:
	movq	%rax, 40(%rsp)
	movq	%r9, 32(%rsp)
	leaq	.Lggv$59(%rip), %rcx
	movl	$63, %edx
	movl	$32, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB22_19:
	movq	%rax, 40(%rsp)
	movq	%r8, 32(%rsp)
	leaq	.Lggv$59(%rip), %rcx
	movl	$69, %edx
	movl	$14, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB22_20:
	movq	%rax, 40(%rsp)
	movq	%r9, 32(%rsp)
	leaq	.Lggv$59(%rip), %rcx
	movl	$69, %edx
	movl	$29, %r8d
	movq	%rsi, %r9
	callq	runtime.slice_handle_error
	int3
	.seh_endproc

	.def	runtime.multi_pointer_slice_handle_error;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.multi_pointer_slice_handle_error:
.seh_proc runtime.multi_pointer_slice_handle_error
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$80, %rsp
	.seh_stackalloc 80
	.seh_endprologue
	movq	%r9, %rsi
	xorps	%xmm0, %xmm0
	movups	%xmm0, 64(%rsp)
	movups	(%rcx), %xmm0
	movups	%xmm0, 40(%rsp)
	movl	%edx, 56(%rsp)
	movl	%r8d, 60(%rsp)
	leaq	40(%rsp), %rcx
	callq	runtime.print_caller_location
	leaq	.Lggv$45(%rip), %rcx
	callq	runtime.print_string
	xorl	%ecx, %ecx
	callq	runtime.print_i64
	leaq	.Lggv$46(%rip), %rcx
	callq	runtime.print_string
	movq	%rsi, %rcx
	callq	runtime.print_i64
	movb	$10, %cl
	callq	runtime.print_byte
	callq	runtime.bounds_trap
	int3
	.seh_endproc

	.def	strconv.append_bits;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv.append_bits:
.seh_proc strconv.append_bits
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$192, %rsp
	.seh_stackalloc 192
	.seh_endprologue
	movq	%r9, %r10
	movq	%r8, %rax
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	movzbl	256(%rsp), %ecx
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 160(%rsp)
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 128(%rsp)
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movaps	%xmm0, 48(%rsp)
	movb	$0, 176(%rsp)
	testb	%cl, %cl
	je	.LBB24_1
	movq	264(%rsp), %rcx
	addq	$-8, %rcx
	shldq	$61, %rcx, %rcx
	cmpq	$7, %rcx
	ja	.LBB24_8
	leaq	.LJTI24_0(%rip), %rdx
	movslq	(%rdx,%rcx,4), %rcx
	addq	%rdx, %rcx
	jmpq	*%rcx
.LBB24_4:
	movsbq	%al, %rdx
	shrb	$7, %al
	movl	%eax, %ecx
	jmp	.LBB24_5
.LBB24_1:
	xorl	%ecx, %ecx
	jmp	.LBB24_10
.LBB24_7:
	movq	%rax, %rcx
	shrq	$63, %rcx
	movq	%rax, %rdx
	negq	%rdx
	cmovnsq	%rdx, %rax
	jmp	.LBB24_10
.LBB24_6:
	movzwl	%ax, %ecx
	shrl	$15, %ecx
	movswq	%ax, %rdx
.LBB24_5:
	movq	%rdx, %rax
	negq	%rax
	cmovsq	%rdx, %rax
	jmp	.LBB24_10
.LBB24_9:
	movl	%eax, %ecx
	shrl	$31, %ecx
	movl	%eax, %edx
	negl	%edx
	cmovnsl	%edx, %eax
.LBB24_10:
	movq	272(%rsp), %r8
	cmpq	%r10, %rax
	jae	.LBB24_12
	movl	$129, %r11d
	movl	$128, %r9d
	leaq	176(%rsp), %rbx
	jmp	.LBB24_18
.LBB24_12:
	movl	$128, %r9d
	.p2align	4, 0x90
.LBB24_13:
	cmpq	$129, %r9
	jae	.LBB24_44
	movq	8(%r8), %r11
	xorl	%edx, %edx
	divq	%r10
	cmpq	%r11, %rdx
	jae	.LBB24_45
	movq	(%r8), %r11
	movzbl	(%r11,%rdx), %edx
	movb	%dl, 48(%rsp,%r9)
	decq	%r9
	cmpq	%r10, %rax
	jae	.LBB24_13
	cmpq	$129, %r9
	jae	.LBB24_46
	leaq	(%rsp,%r9), %rbx
	addq	$48, %rbx
	leaq	1(%r9), %r11
.LBB24_18:
	movq	8(%r8), %rdx
	cmpq	%rdx, %rax
	jae	.LBB24_47
	movzbl	280(%rsp), %edx
	movq	(%r8), %r8
	movzbl	(%r8,%rax), %eax
	movb	%al, (%rbx)
	testb	$1, %dl
	je	.LBB24_33
	addq	$-2, %r10
	shldq	$63, %r10, %r10
	cmpq	$7, %r10
	ja	.LBB24_33
	leaq	.LJTI24_1(%rip), %rax
	movslq	(%rax,%r10,4), %r8
	addq	%rax, %r8
	jmpq	*%r8
.LBB24_22:
	addq	$-2, %r11
	movb	$98, %al
	cmpq	$129, %r11
	jb	.LBB24_31
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$83, %edx
	jmp	.LBB24_24
.LBB24_27:
	addq	$-2, %r11
	movb	$122, %al
	cmpq	$129, %r11
	jb	.LBB24_31
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$86, %edx
	jmp	.LBB24_24
.LBB24_25:
	addq	$-2, %r11
	movb	$111, %al
	cmpq	$129, %r11
	jb	.LBB24_31
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$84, %edx
	jmp	.LBB24_24
.LBB24_29:
	addq	$-2, %r11
	movb	$120, %al
	cmpq	$129, %r11
	jae	.LBB24_30
.LBB24_31:
	movb	%al, 48(%rsp,%r11)
	movq	%r11, %r9
	decq	%r9
	cmpq	$129, %r9
	jae	.LBB24_48
	movb	$48, 48(%rsp,%r9)
.LBB24_33:
	testb	%cl, %cl
	je	.LBB24_34
	decq	%r9
	movb	$45, %al
	cmpq	$129, %r9
	jb	.LBB24_38
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$97, %edx
	movl	$11, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_34:
	testb	$2, %dl
	je	.LBB24_39
	decq	%r9
	movb	$43, %al
	cmpq	$129, %r9
	jae	.LBB24_36
.LBB24_38:
	movb	%al, 48(%rsp,%r9)
.LBB24_39:
	movl	$129, %ebx
	subq	%r9, %rbx
	movq	8(%rdi), %rax
	cmpq	%rbx, %rax
	movq	%rbx, %r8
	cmovlq	%rax, %r8
	testq	%r8, %r8
	jle	.LBB24_41
	leaq	(%rsp,%r9), %rdx
	addq	$48, %rdx
	movq	(%rdi), %rcx
	callq	memcpy
	movq	8(%rdi), %rax
.LBB24_41:
	testq	%rax, %rax
	js	.LBB24_49
	cmpq	%rax, %rbx
	jg	.LBB24_49
	movq	(%rdi), %rax
	movq	%rax, (%rsi)
	movq	%rbx, 8(%rsi)
	movq	%rsi, %rax
	addq	$192, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB24_45:
	movq	%r11, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movq	%rdx, %r9
	movl	$75, %edx
	movl	$23, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_44:
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$75, %edx
	movl	$11, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_47:
	movq	%rdx, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$78, %edx
	movl	$22, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_49:
	movq	%rax, 40(%rsp)
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$104, %edx
	movl	$19, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB24_46:
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$78, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_48:
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$91, %edx
	movl	$12, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_36:
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$99, %edx
	movl	$11, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_30:
	movq	$129, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$87, %edx
.LBB24_24:
	movl	$20, %r8d
	movq	%r11, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB24_8:
	movq	288(%rsp), %r9
	movq	32(%r9), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$30(%rip), %rdx
	leaq	.Lggv$2f(%rip), %r8
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI24_0:
	.long	.LBB24_4-.LJTI24_0
	.long	.LBB24_6-.LJTI24_0
	.long	.LBB24_8-.LJTI24_0
	.long	.LBB24_9-.LJTI24_0
	.long	.LBB24_8-.LJTI24_0
	.long	.LBB24_8-.LJTI24_0
	.long	.LBB24_8-.LJTI24_0
	.long	.LBB24_7-.LJTI24_0
.LJTI24_1:
	.long	.LBB24_22-.LJTI24_1
	.long	.LBB24_33-.LJTI24_1
	.long	.LBB24_33-.LJTI24_1
	.long	.LBB24_25-.LJTI24_1
	.long	.LBB24_33-.LJTI24_1
	.long	.LBB24_27-.LJTI24_1
	.long	.LBB24_33-.LJTI24_1
	.long	.LBB24_29-.LJTI24_1
	.text
	.seh_endproc

	.def	runtime.multi_pointer_slice_expr_error;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.multi_pointer_slice_expr_error:
.seh_proc runtime.multi_pointer_slice_expr_error
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testq	%r9, %r9
	js	.LBB25_2
	addq	$40, %rsp
	retq
.LBB25_2:
	callq	runtime.multi_pointer_slice_handle_error
	int3
	.seh_endproc

	.def	runtime.encode_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.encode_rune:
	cmpl	$2048, %ecx
	jae	.LBB26_2
	movl	%ecx, %r9d
	shrl	$6, %r9d
	orb	$-64, %r9b
	movl	$2, %eax
	xorl	%r8d, %r8d
	xorl	%r10d, %r10d
	jmp	.LBB26_5
.LBB26_2:
	movl	%ecx, %eax
	andl	$2095104, %eax
	cmpl	$55296, %eax
	movl	$65533, %eax
	movl	%ecx, %r8d
	cmovel	%eax, %r8d
	cmpl	$1114112, %ecx
	cmovael	%eax, %r8d
	movl	%r8d, %r9d
	cmpl	$65535, %ecx
	ja	.LBB26_4
	shrl	$12, %r9d
	orb	$-32, %r9b
	movl	%r8d, %ecx
	shrl	$6, %ecx
	andb	$63, %r8b
	orb	$-128, %r8b
	movl	$3, %eax
	xorl	%r10d, %r10d
	jmp	.LBB26_5
.LBB26_4:
	shrl	$18, %r9d
	orb	$-16, %r9b
	movl	%r8d, %ecx
	shrl	$12, %ecx
	movl	%r8d, %r11d
	shrl	$6, %r11d
	andb	$63, %r11b
	orb	$-128, %r11b
	andb	$63, %r8b
	movl	%r8d, %r10d
	orb	$-128, %r10b
	movl	$4, %eax
	movl	%r11d, %r8d
.LBB26_5:
	andb	$63, %cl
	orb	$-128, %cl
	movb	%r9b, (%rdx)
	movb	%cl, 1(%rdx)
	movb	%r8b, 2(%rdx)
	movb	%r10b, 3(%rdx)
	retq

	.def	utf8.decode_rune_in_bytes;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
utf8.decode_rune_in_bytes:
.seh_proc utf8.decode_rune_in_bytes
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	8(%rcx), %r10
	movl	$65533, %r8d
	testq	%r10, %r10
	jle	.LBB27_1
	movq	(%rcx), %r11
	movzbl	(%r11), %ecx
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rax
	movzbl	(%rcx,%rax), %r9d
	leaq	-245(%rcx), %rax
	cmpq	$-52, %rax
	ja	.LBB27_5
	andl	$1, %r9d
	movl	%r9d, %r8d
	negl	%r8d
	decl	%r9d
	andl	%ecx, %r9d
	andl	$65533, %r8d
	orl	%r9d, %r8d
	movl	$1, %eax
	jmp	.LBB27_2
.LBB27_1:
	xorl	%eax, %eax
	jmp	.LBB27_2
.LBB27_5:
	movl	%r9d, %esi
	andl	$7, %esi
	movl	$1, %eax
	cmpq	%rsi, %r10
	jae	.LBB27_6
.LBB27_2:
	movl	%r8d, (%rdx)
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB27_6:
	cmpq	$1, %r10
	je	.LBB27_18
	shrl	$4, %r9d
	leaq	utf8.accept_ranges(%rip), %rsi
	movzbl	1(%r11), %ebx
	cmpb	(%rsi,%r9,2), %bl
	jb	.LBB27_2
	cmpb	%bl, 1(%rsi,%r9,2)
	jb	.LBB27_2
	leaq	-194(%rcx), %rsi
	movzbl	%bl, %r9d
	cmpq	$29, %rsi
	ja	.LBB27_11
	andl	$31, %ecx
	shll	$6, %ecx
	andl	$63, %r9d
	orl	%ecx, %r9d
	movl	$2, %eax
	movl	%r9d, %r8d
	jmp	.LBB27_2
.LBB27_11:
	cmpq	$2, %r10
	jbe	.LBB27_19
	movzbl	2(%r11), %esi
	cmpb	$-65, %sil
	jg	.LBB27_2
	movl	%ecx, %edi
	andl	$-16, %edi
	cmpl	$224, %edi
	jne	.LBB27_15
	andl	$15, %ecx
	shll	$12, %ecx
	andl	$63, %r9d
	shll	$6, %r9d
	orl	%ecx, %r9d
	andl	$63, %esi
	orl	%r9d, %esi
	movl	$3, %eax
	movl	%esi, %r8d
	jmp	.LBB27_2
.LBB27_15:
	cmpq	$3, %r10
	je	.LBB27_20
	movzbl	3(%r11), %r10d
	cmpb	$-65, %r10b
	jg	.LBB27_2
	andl	$7, %ecx
	shll	$18, %ecx
	andl	$63, %r9d
	shll	$12, %r9d
	orl	%ecx, %r9d
	andl	$63, %esi
	shll	$6, %esi
	orl	%r9d, %esi
	andl	$63, %r10d
	orl	%esi, %r10d
	movl	$4, %eax
	movl	%r10d, %r8d
	jmp	.LBB27_2
.LBB27_18:
	movq	$1, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$1, %r9d
	movl	$122, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB27_19:
	movq	%r10, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$2, %r9d
	movl	$129, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB27_20:
	movq	$3, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$3, %r9d
	movl	$136, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	runtime.arena_alloc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.arena_alloc:
.seh_proc runtime.arena_alloc
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$112, %rsp
	.seh_stackalloc 112
	movaps	%xmm6, 96(%rsp)
	.seh_savexmm %xmm6, 96
	.seh_endprologue
	movq	216(%rsp), %rsi
	leaq	-1(%r8), %rbx
	testq	%rbx, %r8
	jne	.LBB28_27
	movq	208(%rsp), %rdi
	testq	%rdx, %rdx
	je	.LBB28_2
	movq	%rbx, %rax
	andq	%rdx, %rax
	movq	%r8, %r14
	subq	%rax, %r14
	testq	%rax, %rax
	cmoveq	%rax, %r14
	addq	%rdx, %r14
	movq	16(%rcx), %r10
	testq	%r10, %r10
	je	.LBB28_6
	movq	32(%r10), %r11
	movq	%r11, %rax
	addq	%r14, %rax
	jb	.LBB28_20
	cmpq	40(%r10), %rax
	jbe	.LBB28_20
.LBB28_6:
	movq	40(%rcx), %rax
	testq	%rax, %rax
	jne	.LBB28_8
	movq	$4194304, 40(%rcx)
	movl	$4194304, %eax
.LBB28_8:
	cmpq	%rax, %r14
	cmovaq	%r14, %rax
	movq	(%rcx), %r11
	testq	%r11, %r11
	jne	.LBB28_10
	leaq	runtime.heap_allocator_proc(%rip), %r11
	movq	%r11, (%rcx)
	movq	$0, 8(%rcx)
.LBB28_10:
	cmpq	$49, %r8
	movl	$48, %r14d
	cmovaeq	%r8, %r14
	addq	%r14, %rax
	je	.LBB28_11
	movq	%rdx, %r15
	cmpq	$17, %r8
	movl	$16, %r10d
	movq	%r8, %r12
	cmovgeq	%r8, %r10
	movq	%rcx, %r13
	movq	8(%rcx), %rcx
	xorps	%xmm6, %xmm6
	movaps	%xmm6, 80(%rsp)
	movq	%rsi, 64(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 56(%rsp)
	movq	%r9, 48(%rsp)
	movups	%xmm6, 32(%rsp)
	xorl	%edx, %edx
	movq	%rax, %r8
	movq	%r10, %r9
	callq	*%r11
	testb	%al, %al
	je	.LBB28_13
	movups	%xmm6, (%rdi)
	jmp	.LBB28_18
.LBB28_2:
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%rdi)
	xorl	%eax, %eax
	jmp	.LBB28_18
.LBB28_11:
	xorl	%eax, %eax
	xorl	%r10d, %r10d
	jmp	.LBB28_14
.LBB28_13:
	movq	80(%rsp), %r10
	movq	88(%rsp), %rax
	movq	%r13, %rcx
	movq	(%r13), %r11
	movq	%r15, %rdx
	movq	%r12, %r8
.LBB28_14:
	addq	%r10, %rax
	movq	8(%rcx), %r9
	movq	%r11, 8(%r10)
	movq	%r9, 16(%r10)
	addq	%r10, %r14
	movq	%r14, 24(%r10)
	subq	%r14, %rax
	movq	%rax, 40(%r10)
	cmpq	$0, 32(%r10)
	jne	.LBB28_28
	cmpq	$0, (%r10)
	jne	.LBB28_16
	movq	16(%rcx), %rax
	movq	%rax, (%r10)
	movq	%r10, 16(%rcx)
	movq	40(%r10), %rax
	addq	%rax, 32(%rcx)
	movq	32(%r10), %r11
.LBB28_20:
	movq	24(%r10), %r9
	addq	%r11, %r9
	andq	%r9, %rbx
	subq	%rbx, %r8
	testq	%rbx, %rbx
	cmoveq	%rbx, %r8
	xorl	%esi, %esi
	movq	%rdx, %rbx
	movb	$1, %al
	addq	%r8, %rbx
	jb	.LBB28_21
	xorl	%esi, %esi
	addq	%r11, %rbx
	jae	.LBB28_23
.LBB28_21:
	movq	%r11, %r14
	xorl	%r15d, %r15d
.LBB28_26:
	subq	%r11, %r14
	addq	%r14, 24(%rcx)
	movq	%rsi, (%rdi)
	movq	%r15, 8(%rdi)
.LBB28_18:
	movaps	96(%rsp), %xmm6
	addq	$112, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB28_23:
	xorl	%esi, %esi
	movq	%r11, %r14
	movl	$0, %r15d
	cmpq	40(%r10), %rbx
	ja	.LBB28_26
	testq	%rdx, %rdx
	js	.LBB28_29
	addq	%r8, %r9
	movq	%rbx, 32(%r10)
	movq	16(%rcx), %rax
	movq	32(%rax), %r14
	xorl	%eax, %eax
	movq	%r9, %rsi
	movq	%rdx, %r15
	jmp	.LBB28_26
.LBB28_29:
	leaq	.Lggv$bd(%rip), %rcx
	movq	%rdx, %r9
	movl	$85, %edx
	movl	$49, %r8d
	callq	runtime.multi_pointer_slice_handle_error
.LBB28_27:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$267(%rip), %rcx
	leaq	.Lggv$6e(%rip), %rdx
	movq	%r9, %r8
	movq	%rsi, %r9
	callq	*%r10
.LBB28_28:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$267(%rip), %rcx
	leaq	.Lggv$24c(%rip), %rdx
	leaq	.Lggv$36(%rip), %r8
	movq	%rsi, %r9
	callq	*%r10
.LBB28_16:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$267(%rip), %rcx
	leaq	.Lggv$24c(%rip), %rdx
	leaq	.Lggv$38(%rip), %r8
	movq	%rsi, %r9
	callq	*%r10
	int3
	.seh_endproc

	.def	runtime.print_string;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_string:
.seh_proc runtime.print_string
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	$0, 32(%rsp)
	leaq	32(%rsp), %rdx
	callq	runtime.stderr_write
	nop
	addq	$40, %rsp
	retq
	.seh_endproc

	.def	runtime.print_byte;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_byte:
.seh_proc runtime.print_byte
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 48(%rsp)
	movb	%cl, 32(%rsp)
	leaq	32(%rsp), %rax
	movq	%rax, 48(%rsp)
	movq	$1, 56(%rsp)
	movq	$0, 40(%rsp)
	leaq	48(%rsp), %rcx
	leaq	40(%rsp), %rdx
	callq	runtime.stderr_write
	movq	40(%rsp), %rax
	addq	$72, %rsp
	retq
	.seh_endproc

	.def	strconv.format_digits;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv.format_digits:
.seh_proc strconv.format_digits
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$136, %rsp
	.seh_stackalloc 136
	.seh_endprologue
	movq	%rcx, %rsi
	movzbl	256(%rsp), %r15d
	movq	(%rdx), %rdi
	movq	8(%rdx), %r12
	movl	%r15d, %eax
	addl	$-69, %eax
	cmpl	$34, %eax
	ja	.LBB31_100
	movq	248(%rsp), %rbp
	movq	240(%rsp), %r13
	movabsq	$4294967297, %rcx
	btq	%rax, %rcx
	jb	.LBB31_46
	movabsq	$8589934594, %rcx
	btq	%rax, %rcx
	jb	.LBB31_7
	movabsq	$17179869188, %rcx
	btq	%rax, %rcx
	jae	.LBB31_100
	movq	16(%r13), %rax
	movq	24(%r13), %rcx
	cmpq	%rcx, %rax
	movq	%rax, %r11
	cmovlq	%rbp, %r11
	cmpq	%rbp, %rax
	cmovgeq	%rbp, %r11
	testb	%r8b, %r8b
	movl	$6, %r10d
	cmoveq	%r11, %r10
	leaq	-1(%rcx), %r11
	cmpq	$-4, %r11
	jl	.LBB31_6
	cmpq	%r10, %r11
	jge	.LBB31_6
	cmpq	%rbp, %rcx
	cmovgeq	%rbp, %rax
	subq	%rcx, %rax
	xorl	%ecx, %ecx
	testq	%rax, %rax
	cmovgq	%rax, %rcx
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 96(%rsp)
	movq	%r13, 32(%rsp)
	movq	%rcx, 40(%rsp)
	movb	$102, 48(%rsp)
	leaq	96(%rsp), %rcx
	callq	strconv.format_digits
	movaps	96(%rsp), %xmm0
	movups	%xmm0, (%rsi)
	jmp	.LBB31_98
.LBB31_7:
	addb	%r9b, %r9b
	addb	$43, %r9b
	movw	$0, 64(%rsp)
	movb	$0, 66(%rsp)
	movb	%r9b, 64(%rsp)
	testq	%r12, %r12
	js	.LBB31_104
	movl	$1, %r14d
	cmovleq	%r12, %r14
	je	.LBB31_10
	leaq	64(%rsp), %rdx
	movq	%rdi, %rcx
	movq	%r14, %r8
	callq	memcpy
.LBB31_10:
	movq	24(%r13), %rax
	testq	%rax, %rax
	movq	%rsi, 80(%rsp)
	jle	.LBB31_23
	movq	8(%r13), %rcx
	movq	16(%r13), %rdx
	cmpq	%rax, %rdx
	movq	%rax, %rsi
	cmovlq	%rdx, %rsi
	testq	%rcx, %rcx
	js	.LBB31_105
	testq	%rdx, %rdx
	js	.LBB31_105
	cmpq	%rcx, %rsi
	jg	.LBB31_105
	movq	%r12, %rcx
	subq	%r14, %rcx
	cmpq	%rsi, %rcx
	cmovgeq	%rsi, %rcx
	xorl	%ebx, %ebx
	testq	%rcx, %rcx
	cmovgq	%rcx, %rbx
	jle	.LBB31_16
	movq	(%r13), %rdx
	leaq	(%rdi,%r14), %rcx
	movq	%rbx, %r8
	callq	memmove
	movq	24(%r13), %rax
.LBB31_16:
	addq	%r14, %rbx
	cmpq	%rax, %rsi
	jge	.LBB31_26
	leaq	64(%rsp), %r14
	jmp	.LBB31_18
	.p2align	4, 0x90
.LBB31_22:
	addq	%r15, %rbx
	incq	%rsi
	cmpq	%rax, %rsi
	jge	.LBB31_26
.LBB31_18:
	movb	$48, 64(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rcx
	subq	%rbx, %rcx
	jl	.LBB31_86
	xorl	%r15d, %r15d
	testq	%rcx, %rcx
	setg	%r15b
	jle	.LBB31_22
	leaq	(%rdi,%rbx), %rcx
	movq	%r14, %rdx
	movq	%r15, %r8
	callq	memcpy
	movq	24(%r13), %rax
	jmp	.LBB31_22
.LBB31_46:
	addb	%r9b, %r9b
	addb	$43, %r9b
	movb	%r9b, 64(%rsp)
	testq	%r12, %r12
	js	.LBB31_104
	movl	$1, %ebx
	cmovleq	%r12, %rbx
	je	.LBB31_49
	leaq	64(%rsp), %rdx
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	memcpy
.LBB31_49:
	cmpq	$0, 16(%r13)
	je	.LBB31_50
	cmpq	$0, 8(%r13)
	je	.LBB31_107
	movq	(%r13), %rax
	movzbl	(%rax), %eax
	jmp	.LBB31_53
.LBB31_6:
	cmpq	%rbp, %rax
	cmovlq	%rax, %rbp
	decq	%rbp
	leal	-2(%r15), %eax
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 112(%rsp)
	movb	%al, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	%r13, 32(%rsp)
	leaq	112(%rsp), %rcx
	callq	strconv.format_digits
	movaps	112(%rsp), %xmm0
	movups	%xmm0, (%rsi)
	jmp	.LBB31_98
.LBB31_100:
	movb	$37, 64(%rsp)
	movb	%r15b, 65(%rsp)
	testq	%r12, %r12
	js	.LBB31_104
	cmpq	$2, %r12
	movl	$2, %ebx
	cmovlq	%r12, %rbx
	testq	%r12, %r12
	je	.LBB31_103
	leaq	64(%rsp), %rdx
	movq	%rdi, %rcx
	movq	%rbx, %r8
	callq	memcpy
	jmp	.LBB31_103
.LBB31_23:
	movq	%r12, %rax
	subq	%r14, %rax
	xorl	%ebx, %ebx
	testq	%rax, %rax
	setg	%bl
	movb	$48, 64(%rsp)
	cmpq	%r14, %r12
	jle	.LBB31_25
	leaq	(%rdi,%r14), %rcx
	leaq	64(%rsp), %rdx
	movq	%rbx, %r8
	callq	memcpy
.LBB31_25:
	addq	%rbx, %r14
	movq	%r14, %rbx
.LBB31_26:
	testq	%rbp, %rbp
	jle	.LBB31_41
	movb	$46, 64(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	xorl	%r14d, %r14d
	testq	%rax, %rax
	setg	%r14b
	jle	.LBB31_31
	leaq	(%rdi,%rbx), %rcx
	leaq	64(%rsp), %rdx
	movq	%r14, %r8
	callq	memcpy
.LBB31_31:
	addq	%r14, %rbx
	xorl	%esi, %esi
	leaq	64(%rsp), %r14
	jmp	.LBB31_32
	.p2align	4, 0x90
.LBB31_40:
	addq	%r15, %rbx
	incq	%rsi
	cmpq	%rsi, %rbp
	je	.LBB31_41
.LBB31_32:
	movq	24(%r13), %rax
	movq	%rsi, %r9
	addq	%rax, %r9
	movb	$48, %cl
	js	.LBB31_36
	cmpq	16(%r13), %r9
	jge	.LBB31_36
	movq	8(%r13), %rcx
	cmpq	%rcx, %r9
	jae	.LBB31_106
	addq	(%r13), %rax
	movzbl	(%rsi,%rax), %ecx
.LBB31_36:
	movb	%cl, 64(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	xorl	%r15d, %r15d
	testq	%rax, %rax
	setg	%r15b
	jle	.LBB31_40
	leaq	(%rdi,%rbx), %rcx
	movq	%r14, %rdx
	movq	%r15, %r8
	callq	memcpy
	jmp	.LBB31_40
.LBB31_41:
	testq	%rbx, %rbx
	js	.LBB31_43
	cmpq	%r12, %rbx
	jg	.LBB31_43
	movq	80(%rsp), %rsi
.LBB31_103:
	movq	%rdi, (%rsi)
	movq	%rbx, 8(%rsi)
	jmp	.LBB31_98
.LBB31_50:
	movb	$48, %al
.LBB31_53:
	movq	%r12, %rcx
	subq	%rbx, %rcx
	xorl	%r14d, %r14d
	testq	%rcx, %rcx
	setg	%r14b
	movb	%al, 64(%rsp)
	cmpq	%rbx, %r12
	jle	.LBB31_55
	leaq	(%rdi,%rbx), %rcx
	leaq	64(%rsp), %rdx
	movq	%r14, %r8
	callq	memcpy
.LBB31_55:
	addq	%r14, %rbx
	testq	%rbp, %rbp
	movq	%rsi, 80(%rsp)
	movq	%r15, 88(%rsp)
	jle	.LBB31_73
	movb	$46, 64(%rsp)
	movq	%r12, %rax
	subq	%rbx, %rax
	jb	.LBB31_86
	xorl	%r14d, %r14d
	testq	%rax, %rax
	setg	%r14b
	cmpq	%rbx, %r12
	jle	.LBB31_59
	leaq	(%rdi,%rbx), %rcx
	leaq	64(%rsp), %rdx
	movq	%r14, %r8
	callq	memcpy
.LBB31_59:
	addq	%r14, %rbx
	leaq	1(%rbp), %rsi
	movq	16(%r13), %rax
	cmpq	%rsi, %rax
	cmovlq	%rax, %rsi
	cmpq	$2, %rsi
	jl	.LBB31_60
	movq	8(%r13), %rax
	cmpq	%rax, %rsi
	jg	.LBB31_108
	movq	%r12, %rax
	subq	%rbx, %rax
	jb	.LBB31_86
	leaq	-1(%rsi), %rcx
	cmpq	%rcx, %rax
	cmovlq	%rax, %rcx
	xorl	%r14d, %r14d
	testq	%rcx, %rcx
	cmovgq	%rcx, %r14
	jle	.LBB31_65
	movq	(%r13), %rdx
	incq	%rdx
	leaq	(%rdi,%rbx), %rcx
	movq	%r14, %r8
	callq	memmove
.LBB31_65:
	addq	%r14, %rbx
	cmpq	%rbp, %rsi
	ja	.LBB31_73
	jmp	.LBB31_67
.LBB31_60:
	movl	$1, %esi
	cmpq	%rbp, %rsi
	jbe	.LBB31_67
.LBB31_73:
	movq	88(%rsp), %rax
	movb	%al, 64(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	xorl	%r15d, %r15d
	testq	%rax, %rax
	setg	%r15b
	movq	80(%rsp), %rsi
	jle	.LBB31_77
	leaq	(%rdi,%rbx), %rcx
	leaq	64(%rsp), %rdx
	movq	%r15, %r8
	callq	memcpy
.LBB31_77:
	movq	16(%r13), %rax
	movq	24(%r13), %rcx
	decq	%rcx
	testq	%rax, %rax
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	shrq	$63, %rax
	addb	%al, %al
	addb	$43, %al
	movq	%rcx, %r14
	negq	%r14
	cmovsq	%rcx, %r14
	addq	%r15, %rbx
	movb	%al, 64(%rsp)
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	xorl	%r15d, %r15d
	testq	%rax, %rax
	setg	%r15b
	jle	.LBB31_81
	leaq	(%rdi,%rbx), %rcx
	leaq	64(%rsp), %rdx
	movq	%r15, %r8
	callq	memcpy
.LBB31_81:
	addq	%r15, %rbx
	cmpq	$10, %r14
	jge	.LBB31_82
	addb	$48, %r14b
	movb	$48, 64(%rsp)
	jmp	.LBB31_84
.LBB31_82:
	cmpq	$100, %r14
	jae	.LBB31_89
	movzbl	%r14b, %eax
	imull	$205, %eax, %eax
	shrl	$11, %eax
	movl	%eax, %ecx
	orb	$48, %cl
	addl	%eax, %eax
	leal	(%rax,%rax,4), %eax
	subb	%al, %r14b
	orb	$48, %r14b
	movb	%cl, 64(%rsp)
.LBB31_84:
	movb	%r14b, 65(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	cmpq	$2, %rax
	movl	$2, %ecx
	jmp	.LBB31_92
.LBB31_67:
	leaq	64(%rsp), %r14
	jmp	.LBB31_68
	.p2align	4, 0x90
.LBB31_72:
	addq	%r15, %rbx
	incq	%rsi
	cmpq	%rbp, %rsi
	jg	.LBB31_73
.LBB31_68:
	movb	$48, 64(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	xorl	%r15d, %r15d
	testq	%rax, %rax
	setg	%r15b
	jle	.LBB31_72
	leaq	(%rdi,%rbx), %rcx
	movq	%r14, %rdx
	movq	%r15, %r8
	callq	memcpy
	jmp	.LBB31_72
.LBB31_89:
	movq	%r14, %rax
	shrq	$2, %rax
	movabsq	$2951479051793528259, %rcx
	mulq	%rcx
	movq	%rdx, %rcx
	shrl	$2, %ecx
	addb	$48, %cl
	movabsq	$-3689348814741910323, %rdx
	movq	%r14, %rax
	mulq	%rdx
	shrq	$3, %rdx
	movzbl	%dl, %eax
	imull	$205, %eax, %eax
	shrl	$10, %eax
	andl	$-2, %eax
	leal	(%rax,%rax,4), %eax
	movl	%edx, %r8d
	subb	%al, %r8b
	orb	$48, %r8b
	addl	%edx, %edx
	leal	(%rdx,%rdx,4), %eax
	subl	%eax, %r14d
	orb	$48, %r14b
	movb	%cl, 64(%rsp)
	movb	%r8b, 65(%rsp)
	movb	%r14b, 66(%rsp)
	testq	%rbx, %rbx
	js	.LBB31_86
	movq	%r12, %rax
	subq	%rbx, %rax
	jl	.LBB31_86
	cmpq	$3, %rax
	movl	$3, %ecx
.LBB31_92:
	cmovlq	%rax, %rcx
	xorl	%r14d, %r14d
	testq	%rcx, %rcx
	cmovgq	%rcx, %r14
	testq	%rax, %rax
	jle	.LBB31_94
	leaq	(%rdi,%rbx), %rcx
	leaq	64(%rsp), %rdx
	movq	%r14, %r8
	callq	memcpy
.LBB31_94:
	addq	%rbx, %r14
	js	.LBB31_96
	cmpq	%r12, %r14
	jg	.LBB31_96
	movq	%rdi, (%rsi)
	movq	%r14, 8(%rsi)
.LBB31_98:
	movq	%rsi, %rax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB31_86:
	movq	%r12, 40(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$146, %edx
	movl	$22, %r8d
	movq	%rbx, %r9
	callq	runtime.slice_handle_error
.LBB31_106:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$174, %edx
	movl	$22, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB31_104:
	movq	%r12, 40(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$146, %edx
	movl	$22, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB31_96:
	movq	%r12, 40(%rsp)
	movq	%r14, 32(%rsp)
	jmp	.LBB31_44
.LBB31_43:
	movq	%r12, 40(%rsp)
	movq	%rbx, 32(%rsp)
.LBB31_44:
	leaq	.Lggv$257(%rip), %rcx
	movl	$143, %edx
	movl	$13, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB31_107:
	movq	$0, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$186, %edx
	movl	$21, %r8d
	xorl	%r9d, %r9d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB31_105:
	movq	%rcx, 40(%rsp)
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$159, %edx
	movl	$31, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB31_108:
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$1, %r9d
	movl	$195, %edx
	movl	$32, %r8d
	callq	runtime.slice_handle_error
	int3
	.seh_endproc

	.def	runtime.print_encoded_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_encoded_rune:
.seh_proc runtime.print_encoded_rune
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movl	%ecx, %esi
	movb	$39, %cl
	callq	runtime.print_byte
	leal	-7(%rsi), %eax
	cmpl	$20, %eax
	ja	.LBB32_10
	leaq	.LJTI32_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB32_2:
	leaq	.Lggv$aa(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_10:
	testl	%esi, %esi
	jle	.LBB32_11
	cmpl	$31, %esi
	ja	.LBB32_14
	movzbl	%sil, %edi
	shrl	$4, %edi
	andl	$15, %esi
	leaq	.Lggv$89(%rip), %rcx
	callq	runtime.print_string
	movq	$36, 32(%rsp)
	leaq	.Lggv$f8(%rip), %rbx
	movq	%rbx, %rcx
	movl	$164, %edx
	movl	$35, %r8d
	movq	%rdi, %r9
	callq	runtime.bounds_check_error
	leaq	.Lcsbs$4(%rip), %r14
	movzbl	(%rdi,%r14), %ecx
	callq	runtime.print_byte
	movq	$36, 32(%rsp)
	movq	%rbx, %rcx
	movl	$165, %edx
	movl	$35, %r8d
	movq	%rsi, %r9
	callq	runtime.bounds_check_error
	movzbl	(%rsi,%r14), %ecx
	callq	runtime.print_byte
	jmp	.LBB32_15
.LBB32_5:
	leaq	.Lggv$ad(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_3:
	leaq	.Lggv$ab(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_7:
	leaq	.Lggv$af(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_4:
	leaq	.Lggv$ac(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_8:
	leaq	.Lggv$b0(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_6:
	leaq	.Lggv$ae(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_9:
	leaq	.Lggv$b1(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_11:
	leaq	.Lggv$7d(%rip), %rcx
	callq	runtime.print_string
	jmp	.LBB32_15
.LBB32_14:
	movl	%esi, %ecx
	callq	runtime.print_rune
.LBB32_15:
	movb	$39, %cl
	addq	$40, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	runtime.print_byte
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI32_0:
	.long	.LBB32_2-.LJTI32_0
	.long	.LBB32_3-.LJTI32_0
	.long	.LBB32_8-.LJTI32_0
	.long	.LBB32_6-.LJTI32_0
	.long	.LBB32_9-.LJTI32_0
	.long	.LBB32_5-.LJTI32_0
	.long	.LBB32_7-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_10-.LJTI32_0
	.long	.LBB32_4-.LJTI32_0
	.text
	.seh_endproc

	.def	io.write_encoded_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_encoded_rune:
.seh_proc io.write_encoded_rune
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$192, %rsp
	.seh_stackalloc 192
	.seh_endprologue
	movq	%r9, %rsi
	movl	%r8d, %ebp
	movl	%edx, %r14d
	movq	%rcx, %rbx
	movq	296(%rsp), %rdi
	movq	288(%rsp), %r15
	movq	$0, 80(%rsp)
	testb	%r8b, %r8b
	je	.LBB33_3
	movb	$39, 95(%rsp)
	leaq	95(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_8
	movq	8(%rbx), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	120(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rcx
	addq	120(%rsp), %rcx
	movq	%rcx, 80(%rsp)
	testl	%eax, %eax
	jne	.LBB33_32
	jmp	.LBB33_4
.LBB33_3:
	xorl	%ecx, %ecx
.LBB33_4:
	leal	-7(%r14), %eax
	cmpl	$20, %eax
	ja	.LBB33_9
	leaq	.LJTI33_0(%rip), %rdx
	movslq	(%rdx,%rax,4), %rax
	addq	%rdx, %rax
	jmpq	*%rax
.LBB33_6:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$aa(%rip), %r8
	jmp	.LBB33_31
.LBB33_8:
	movl	$-1, %eax
	xorl	%ecx, %ecx
	jmp	.LBB33_32
.LBB33_9:
	cmpl	$31, %r14d
	jg	.LBB33_35
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %r12
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$89(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rcx
	addq	96(%rsp), %rcx
	movq	%rcx, 80(%rsp)
	testl	%eax, %eax
	jne	.LBB33_32
	movw	$0, 118(%rsp)
	leaq	118(%rsp), %rax
	movq	%rax, 168(%rsp)
	movq	$2, 176(%rsp)
	movslq	%r14d, %r8
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 128(%rsp)
	movq	%rdi, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	leaq	128(%rsp), %rcx
	leaq	168(%rsp), %rdx
	movl	$16, %r9d
	callq	strconv.append_bits
	movq	128(%rsp), %rcx
	movq	136(%rsp), %rax
	movq	%rcx, 152(%rsp)
	movq	%rax, 160(%rsp)
	cmpq	$2, %rax
	je	.LBB33_52
	cmpq	$1, %rax
	je	.LBB33_46
	testq	%rax, %rax
	jne	.LBB33_47
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_54
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$8a(%rip), %r8
	jmp	.LBB33_31
.LBB33_17:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ad(%rip), %r8
	jmp	.LBB33_31
.LBB33_19:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ab(%rip), %r8
	jmp	.LBB33_31
.LBB33_21:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$af(%rip), %r8
	jmp	.LBB33_31
.LBB33_23:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ac(%rip), %r8
	jmp	.LBB33_31
.LBB33_25:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$b0(%rip), %r8
	jmp	.LBB33_31
.LBB33_27:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ae(%rip), %r8
	jmp	.LBB33_31
.LBB33_29:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_42
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$b1(%rip), %r8
.LBB33_31:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rcx
	addq	96(%rsp), %rcx
	movq	%rcx, 80(%rsp)
	testl	%eax, %eax
	jne	.LBB33_32
.LBB33_47:
	testb	%bpl, %bpl
	je	.LBB33_50
	movb	$39, 95(%rsp)
	leaq	95(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_54
	movq	8(%rbx), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	120(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rcx
	addq	120(%rsp), %rcx
	testl	%eax, %eax
	jne	.LBB33_32
	jmp	.LBB33_51
.LBB33_42:
	movl	$-1, %eax
.LBB33_32:
	movq	%rcx, (%r15)
	testq	%rsi, %rsi
	je	.LBB33_34
.LBB33_33:
	addq	%rcx, (%rsi)
.LBB33_34:
	addq	$192, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB33_50:
	movq	80(%rsp), %rcx
.LBB33_51:
	movq	%rcx, (%r15)
	xorl	%eax, %eax
	testq	%rsi, %rsi
	jne	.LBB33_33
	jmp	.LBB33_34
.LBB33_35:
	movq	%rdi, 32(%rsp)
	leaq	80(%rsp), %r8
	leaq	184(%rsp), %r9
	movq	%rbx, %rcx
	movl	%r14d, %edx
	callq	io.write_rune
	testl	%eax, %eax
	je	.LBB33_47
.LBB33_36:
	movq	80(%rsp), %rcx
	jmp	.LBB33_32
.LBB33_46:
	leaq	80(%rsp), %r8
	movq	%rbx, %rcx
	movb	$48, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB33_36
	jmp	.LBB33_47
.LBB33_52:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB33_54
	movq	8(%rbx), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	152(%rsp), %r8
	jmp	.LBB33_31
.LBB33_54:
	movl	$-1, %eax
	movq	80(%rsp), %rcx
	jmp	.LBB33_32
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI33_0:
	.long	.LBB33_6-.LJTI33_0
	.long	.LBB33_19-.LJTI33_0
	.long	.LBB33_25-.LJTI33_0
	.long	.LBB33_27-.LJTI33_0
	.long	.LBB33_29-.LJTI33_0
	.long	.LBB33_17-.LJTI33_0
	.long	.LBB33_21-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_9-.LJTI33_0
	.long	.LBB33_23-.LJTI33_0
	.text
	.seh_endproc

	.def	strconv_decimal.assign;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv_decimal.assign:
.seh_proc strconv_decimal.assign
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$112, %rsp
	.seh_stackalloc 112
	.seh_endprologue
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movaps	%xmm0, 48(%rsp)
	testq	%rdx, %rdx
	je	.LBB34_5
	movq	%rdx, %r8
	xorl	%r10d, %r10d
	movabsq	$-3689348814741910323, %r11
	movabsq	$2951479051793528259, %rsi
	.p2align	4, 0x90
.LBB34_2:
	cmpq	$64, %r10
	je	.LBB34_17
	movq	%r8, %rax
	mulq	%r11
	movq	%rdx, %r9
	shrq	$3, %r9
	imull	$246, %r9d, %eax
	addl	%r8d, %eax
	addb	$48, %al
	movb	%al, 48(%rsp,%r10)
	cmpq	$10, %r8
	jb	.LBB34_6
	movq	%r8, %rax
	shrq	$2, %rax
	mulq	%rsi
	shrq	$2, %rdx
	imull	$246, %edx, %eax
	addl	%eax, %r9d
	addb	$48, %r9b
	movb	%r9b, 49(%rsp,%r10)
	addq	$2, %r10
	cmpq	$100, %r8
	movq	%rdx, %r8
	jae	.LBB34_2
	jmp	.LBB34_7
.LBB34_5:
	movups	%xmm0, 384(%rcx)
	addq	$392, %rcx
	movq	%rcx, %rdx
	jmp	.LBB34_15
.LBB34_6:
	incq	%r10
.LBB34_7:
	movq	$0, 384(%rcx)
	incq	%r10
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB34_8:
	cmpq	$384, %r9
	jae	.LBB34_18
	movzbl	46(%rsp,%r10), %eax
	movb	%al, (%rcx,%r9)
	movq	384(%rcx), %rax
	leaq	1(%rax), %r9
	movq	%r9, 384(%rcx)
	decq	%r10
	cmpq	$1, %r10
	jg	.LBB34_8
	leaq	392(%rcx), %rdx
	movq	%r9, 392(%rcx)
	movabsq	$9223372036854775806, %r8
	cmpq	%r8, %rax
	ja	.LBB34_14
	.p2align	4, 0x90
.LBB34_11:
	cmpq	$385, %r9
	jae	.LBB34_19
	cmpb	$48, (%rcx,%rax)
	jne	.LBB34_16
	movq	%rax, 384(%rcx)
	leaq	-1(%rax), %r8
	incq	%rax
	cmpq	$1, %rax
	movq	%r8, %rax
	ja	.LBB34_11
	jmp	.LBB34_15
.LBB34_14:
	testq	%r9, %r9
	jne	.LBB34_16
.LBB34_15:
	movq	$0, (%rdx)
.LBB34_16:
	addq	$112, %rsp
	popq	%rsi
	retq
.LBB34_18:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$186, %edx
	movl	$12, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB34_17:
	movq	$64, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$64, %r9d
	movl	$179, %edx
	movl	$7, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB34_19:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$157, %edx
	movl	$30, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	runtime.print_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_rune:
.seh_proc runtime.print_rune
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	cmpl	$127, %ecx
	jg	.LBB35_1
	addq	$72, %rsp
	jmp	runtime.print_byte
.LBB35_1:
	movl	$0, 40(%rsp)
	leaq	40(%rsp), %rdx
	callq	runtime.encode_rune
	movl	40(%rsp), %ecx
	movl	%ecx, 44(%rsp)
	leaq	44(%rsp), %rcx
	movq	%rcx, 56(%rsp)
	movq	%rax, 64(%rsp)
	movq	$0, 48(%rsp)
	leaq	56(%rsp), %rcx
	leaq	48(%rsp), %rdx
	callq	runtime.stderr_write
	nop
	addq	$72, %rsp
	retq
	.seh_endproc

	.def	runtime.print_u64;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_u64:
.seh_proc runtime.print_u64
	subq	$200, %rsp
	.seh_stackalloc 200
	.seh_endprologue
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 176(%rsp)
	movaps	%xmm0, 160(%rsp)
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 128(%rsp)
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movb	$0, 192(%rsp)
	movl	$129, %r8d
	leaq	.Lcsbs$4(%rip), %r9
	cmpq	$10, %rcx
	jb	.LBB36_1
	movabsq	$-3689348814741910323, %r10
	.p2align	4, 0x90
.LBB36_3:
	movq	%rcx, %rax
	mulq	%r10
	shrq	$3, %rdx
	leaq	(%rdx,%rdx), %rax
	leaq	(%rax,%rax,4), %rax
	movq	%rcx, %r11
	subq	%rax, %r11
	movzbl	(%r9,%r11), %eax
	movb	%al, 63(%rsp,%r8)
	decq	%r8
	cmpq	$99, %rcx
	movq	%rdx, %rcx
	ja	.LBB36_3
	jmp	.LBB36_4
.LBB36_1:
	movq	%rcx, %rdx
.LBB36_4:
	leaq	64(%rsp), %rax
	leaq	(%r8,%rax), %rcx
	decq	%rcx
	movzbl	(%rdx,%r9), %edx
	movb	%dl, -1(%r8,%rax)
	movl	$130, %eax
	subq	%r8, %rax
	movq	%rcx, 40(%rsp)
	movq	%rax, 48(%rsp)
	leaq	40(%rsp), %rcx
	leaq	56(%rsp), %rdx
	callq	runtime.stderr_write
	nop
	addq	$200, %rsp
	retq
	.seh_endproc

	.def	strconv_decimal.shift_right;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv_decimal.shift_right:
.seh_proc strconv_decimal.shift_right
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	%rcx, %rax
	leaq	384(%rcx), %r8
	movq	384(%rcx), %r10
	xorl	%r9d, %r9d
	testq	%r10, %r10
	movl	$0, %esi
	cmovgq	%r10, %rsi
	leaq	-1(%r10), %rdi
	xorl	%r11d, %r11d
	.p2align	4, 0x90
.LBB37_1:
	cmpq	%r9, %rsi
	je	.LBB37_6
	cmpq	$384, %r9
	je	.LBB37_36
	movzbl	(%rax,%r9), %ecx
	leaq	(%r11,%r11,4), %r11
	leaq	(%rcx,%r11,2), %r11
	addq	$-48, %r11
	movq	%r11, %rbx
	movl	%edx, %ecx
	shrq	%cl, %rbx
	testq	%rbx, %rbx
	jne	.LBB37_9
	cmpq	%r9, %rdi
	je	.LBB37_6
	movzbl	1(%rax,%r9), %ecx
	leaq	(%r11,%r11,4), %r11
	leaq	(%rcx,%r11,2), %r11
	addq	$-48, %r11
	addq	$2, %r9
	movq	%r11, %rbx
	movl	%edx, %ecx
	shrq	%cl, %rbx
	testq	%rbx, %rbx
	je	.LBB37_1
	jmp	.LBB37_12
.LBB37_6:
	testq	%r11, %r11
	je	.LBB37_32
	movq	%r11, %r9
	movl	%edx, %ecx
	shrq	%cl, %r9
	testq	%r9, %r9
	je	.LBB37_10
	movq	%rsi, %r9
	jmp	.LBB37_12
.LBB37_9:
	incq	%r9
	jmp	.LBB37_12
.LBB37_10:
	movq	%rsi, %r9
	.p2align	4, 0x90
.LBB37_11:
	addq	%r11, %r11
	leaq	(%r11,%r11,4), %r11
	incq	%r9
	movq	%r11, %rsi
	movl	%edx, %ecx
	shrq	%cl, %rsi
	testq	%rsi, %rsi
	je	.LBB37_11
.LBB37_12:
	movq	392(%rax), %rdi
	subq	%r9, %rdi
	movq	$-1, %rsi
	movl	%edx, %ecx
	shlq	%cl, %rsi
	incq	%rdi
	movq	%rdi, 392(%rax)
	notq	%rsi
	cmpq	%r10, %r9
	jge	.LBB37_16
	xorl	%r10d, %r10d
	.p2align	4, 0x90
.LBB37_14:
	cmpq	$384, %r9
	jae	.LBB37_34
	movq	%r11, %rdi
	andq	%rsi, %rdi
	movl	%edx, %ecx
	shrq	%cl, %r11
	movzbl	(%rax,%r9), %ecx
	addb	$48, %r11b
	movb	%r11b, (%rax,%r10)
	incq	%r10
	leaq	(%rdi,%rdi,4), %r11
	leaq	(%rcx,%r11,2), %r11
	addq	$-48, %r11
	incq	%r9
	cmpq	384(%rax), %r9
	jl	.LBB37_14
	jmp	.LBB37_17
.LBB37_16:
	xorl	%r10d, %r10d
.LBB37_17:
	leaq	392(%rax), %rdi
	testq	%r11, %r11
	jne	.LBB37_21
	movq	%r10, (%r8)
	testq	%r10, %r10
	jne	.LBB37_27
	jmp	.LBB37_31
	.p2align	4, 0x90
.LBB37_20:
	andq	%rsi, %r11
	leaq	(%r11,%r11), %rcx
	leaq	(%rcx,%rcx,4), %rcx
	testq	%r11, %r11
	movq	%rcx, %r11
	je	.LBB37_26
.LBB37_21:
	movq	%r11, %r9
	movl	%edx, %ecx
	shrq	%cl, %r9
	cmpq	$383, %r10
	jg	.LBB37_24
	ja	.LBB37_37
	addb	$48, %r9b
	movb	%r9b, (%rax,%r10)
	incq	%r10
	jmp	.LBB37_20
	.p2align	4, 0x90
.LBB37_24:
	testq	%r9, %r9
	je	.LBB37_20
	movb	$1, 401(%rax)
	jmp	.LBB37_20
.LBB37_26:
	movq	%r10, (%r8)
.LBB37_27:
	leaq	-1(%r10), %r9
	.p2align	4, 0x90
.LBB37_28:
	cmpq	$385, %r10
	jae	.LBB37_35
	cmpb	$48, (%rax,%r9)
	jne	.LBB37_33
	movq	%r9, (%r8)
	leaq	-1(%r9), %rcx
	incq	%r9
	cmpq	$1, %r9
	movq	%rcx, %r9
	ja	.LBB37_28
.LBB37_31:
	movq	%rdi, %r8
.LBB37_32:
	movq	$0, (%r8)
.LBB37_33:
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB37_34:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$227, %edx
	movl	$22, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB37_35:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$157, %edx
	movl	$30, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB37_36:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$384, %r9d
	movl	$219, %edx
	movl	$22, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB37_37:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$239, %edx
	movl	$13, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	io.write_escaped_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_escaped_rune:
.seh_proc io.write_escaped_rune
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$104, %rsp
	.seh_stackalloc 104
	.seh_endprologue
	movq	%r9, %rsi
	movl	%edx, %ebx
	movq	192(%rsp), %rdi
	movq	$0, 56(%rsp)
	cmpl	$92, %edx
	je	.LBB38_2
	movzbl	%r8b, %eax
	cmpl	%ebx, %eax
	je	.LBB38_2
	cmpl	$255, %ebx
	jg	.LBB38_13
	leal	-32(%rbx), %eax
	cmpl	$95, %eax
	jb	.LBB38_12
	cmpl	$161, %ebx
	jl	.LBB38_13
	cmpl	$173, %ebx
	je	.LBB38_13
.LBB38_12:
	movq	%rdi, 40(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 32(%rsp)
	leaq	56(%rsp), %r9
	movl	%ebx, %edx
	xorl	%r8d, %r8d
	callq	io.write_encoded_rune
	jmp	.LBB38_50
.LBB38_2:
	movb	$92, 71(%rsp)
	leaq	71(%rsp), %r14
	movq	%r14, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	%rcx, %r12
	movq	8(%rcx), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	88(%rsp), %r15
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	56(%rsp), %rcx
	addq	88(%rsp), %rcx
	movq	%rcx, 56(%rsp)
	testl	%eax, %eax
	jne	.LBB38_51
	movb	%bl, 71(%rsp)
	movq	%r14, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	(%r12), %rax
	testq	%rax, %rax
	je	.LBB38_6
	movq	8(%r12), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	56(%rsp), %rcx
	addq	88(%rsp), %rcx
	jmp	.LBB38_51
.LBB38_13:
	leal	-7(%rbx), %eax
	cmpl	$20, %eax
	ja	.LBB38_33
	leaq	.LJTI38_0(%rip), %rdx
	movslq	(%rdx,%rax,4), %rax
	addq	%rdx, %rax
	jmpq	*%rax
.LBB38_15:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$aa(%rip), %r8
	jmp	.LBB38_17
.LBB38_6:
	movl	$-1, %eax
	jmp	.LBB38_51
.LBB38_33:
	cmpl	$32, %ebx
	jge	.LBB38_34
	leaq	56(%rsp), %r8
	movq	%rcx, %r14
	movb	$92, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movb	$120, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movzbl	%bl, %ebx
	movl	%ebx, %eax
	shrl	$4, %eax
	leaq	.Lcsbs$2(%rip), %r15
.LBB38_46:
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	andl	$15, %ebx
	movzbl	(%rbx,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
.LBB38_48:
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	jmp	.LBB38_18
.LBB38_23:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ad(%rip), %r8
	jmp	.LBB38_17
.LBB38_19:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ab(%rip), %r8
	jmp	.LBB38_17
.LBB38_27:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$af(%rip), %r8
	jmp	.LBB38_17
.LBB38_21:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ac(%rip), %r8
	jmp	.LBB38_17
.LBB38_29:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$b0(%rip), %r8
	jmp	.LBB38_17
.LBB38_25:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$ae(%rip), %r8
	jmp	.LBB38_17
.LBB38_31:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB38_3
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$b1(%rip), %r8
.LBB38_17:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	56(%rsp), %rcx
	addq	72(%rsp), %rcx
	movq	%rcx, 56(%rsp)
	testl	%eax, %eax
	jne	.LBB38_51
.LBB38_18:
	xorl	%eax, %eax
.LBB38_50:
	movq	56(%rsp), %rcx
	jmp	.LBB38_51
.LBB38_3:
	movl	$-1, %eax
	xorl	%ecx, %ecx
.LBB38_51:
	movq	%rcx, (%rsi)
	addq	$104, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB38_34:
	movl	$65533, %r14d
	cmpl	$1114111, %ebx
	ja	.LBB38_37
	cmpl	$65535, %ebx
	ja	.LBB38_49
	movl	%ebx, %r14d
.LBB38_37:
	leaq	56(%rsp), %r8
	movq	%rcx, %rbx
	movb	$92, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	leaq	56(%rsp), %r8
	movq	%rbx, %rcx
	movb	$117, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%r14d, %eax
	shrl	$12, %eax
	leaq	.Lcsbs$2(%rip), %r15
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%rbx, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%r14d, %eax
	shrl	$8, %eax
	andl	$15, %eax
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%rbx, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%r14d, %eax
	shrl	$4, %eax
	andl	$15, %eax
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%rbx, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	andl	$15, %r14d
	movzbl	(%r14,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%rbx, %rcx
	jmp	.LBB38_48
.LBB38_49:
	leaq	56(%rsp), %r8
	movq	%rcx, %r14
	movb	$92, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movb	$85, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movb	$48, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%ebx, %eax
	shrl	$20, %eax
	leaq	.Lcsbs$2(%rip), %r15
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%ebx, %eax
	shrl	$16, %eax
	andl	$15, %eax
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%ebx, %eax
	shrl	$12, %eax
	andl	$15, %eax
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%ebx, %eax
	shrl	$8, %eax
	andl	$15, %eax
	movzbl	(%rax,%r15), %edx
	leaq	56(%rsp), %r8
	movq	%r14, %rcx
	movq	%rdi, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB38_50
	movl	%ebx, %eax
	shrl	$4, %eax
	andl	$15, %eax
	jmp	.LBB38_46
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI38_0:
	.long	.LBB38_15-.LJTI38_0
	.long	.LBB38_19-.LJTI38_0
	.long	.LBB38_29-.LJTI38_0
	.long	.LBB38_25-.LJTI38_0
	.long	.LBB38_31-.LJTI38_0
	.long	.LBB38_23-.LJTI38_0
	.long	.LBB38_27-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_33-.LJTI38_0
	.long	.LBB38_21-.LJTI38_0
	.text
	.seh_endproc

	.def	runtime.print_i64;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_i64:
.seh_proc runtime.print_i64
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$208, %rsp
	.seh_stackalloc 208
	.seh_endprologue
	movq	%rcx, %r8
	negq	%r8
	cmovsq	%rcx, %r8
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 176(%rsp)
	movaps	%xmm0, 160(%rsp)
	movaps	%xmm0, 144(%rsp)
	movaps	%xmm0, 128(%rsp)
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movb	$0, 192(%rsp)
	movl	$129, %r9d
	leaq	.Lcsbs$4(%rip), %r10
	cmpq	$10, %r8
	jl	.LBB39_1
	movabsq	$-3689348814741910323, %r11
	.p2align	4, 0x90
.LBB39_3:
	movq	%r8, %rax
	mulq	%r11
	shrq	$3, %rdx
	leaq	(%rdx,%rdx), %rax
	leaq	(%rax,%rax,4), %rax
	movq	%r8, %rsi
	subq	%rax, %rsi
	movzbl	(%r10,%rsi), %eax
	movb	%al, 63(%rsp,%r9)
	decq	%r9
	cmpq	$99, %r8
	movq	%rdx, %r8
	ja	.LBB39_3
	jmp	.LBB39_4
.LBB39_1:
	movq	%r8, %rdx
.LBB39_4:
	movabsq	$7378697629483820647, %r8
	movq	%rdx, %rax
	movq	%rdx, %r11
	imulq	%r8
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$2, %rdx
	addq	%rax, %rdx
	addq	%rdx, %rdx
	leaq	(%rdx,%rdx,4), %rax
	subq	%rax, %r11
	movzbl	(%r10,%r11), %eax
	movb	%al, 63(%rsp,%r9)
	testq	%rcx, %rcx
	js	.LBB39_6
	decq	%r9
	jmp	.LBB39_7
.LBB39_6:
	movb	$45, 62(%rsp,%r9)
	addq	$-2, %r9
.LBB39_7:
	leaq	(%rsp,%r9), %rax
	addq	$64, %rax
	movl	$129, %ecx
	subq	%r9, %rcx
	movq	%rax, 40(%rsp)
	movq	%rcx, 48(%rsp)
	leaq	40(%rsp), %rcx
	leaq	56(%rsp), %rdx
	callq	runtime.stderr_write
	nop
	addq	$208, %rsp
	popq	%rsi
	retq
	.seh_endproc

	.def	runtime.print_caller_location;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_caller_location:
.seh_proc runtime.print_caller_location
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$32, %rsp
	.seh_stackalloc 32
	.seh_endprologue
	movq	%rcx, %rsi
	callq	runtime.print_string
	movb	$40, %cl
	callq	runtime.print_byte
	movslq	16(%rsi), %rcx
	callq	runtime.print_u64
	cmpl	$0, 20(%rsi)
	je	.LBB40_2
	movb	$58, %cl
	callq	runtime.print_byte
	movslq	20(%rsi), %rcx
	callq	runtime.print_u64
.LBB40_2:
	movb	$41, %cl
	addq	$32, %rsp
	popq	%rsi
	jmp	runtime.print_byte
	.seh_endproc

	.def	bufio._writer_proc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
bufio._writer_proc:
.seh_proc bufio._writer_proc
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$104, %rsp
	.seh_stackalloc 104
	.seh_endprologue
	decq	%rdx
	cmpq	$8, %rdx
	ja	.LBB41_34
	movq	%rcx, %rsi
	movq	224(%rsp), %rdi
	leaq	.LJTI41_0(%rip), %rax
	movslq	(%rax,%rdx,4), %rcx
	addq	%rax, %rcx
	jmpq	*%rcx
.LBB41_4:
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	bufio.writer_flush
	movl	%eax, %edi
	xorl	%r12d, %r12d
	jmp	.LBB41_3
.LBB41_30:
	movq	(%rsi), %rdx
	testq	%rdx, %rdx
	je	.LBB41_33
	movq	16(%rsi), %rax
	testq	%rax, %rax
	je	.LBB41_33
	movq	8(%rsi), %r8
	movq	24(%rsi), %rcx
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%rdi, 64(%rsp)
	leaq	80(%rsp), %r9
	movq	%r9, 56(%rsp)
	leaq	.Lggv$35(%rip), %r9
	movq	%r9, 48(%rsp)
	movq	%r8, 40(%rsp)
	movq	%rdx, 32(%rsp)
	movb	$1, %dl
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	callq	*%rax
.LBB41_33:
	xorps	%xmm0, %xmm0
	movups	%xmm0, 48(%rsi)
	movups	%xmm0, 32(%rsi)
	movups	%xmm0, 16(%rsi)
	movups	%xmm0, (%rsi)
	movq	$0, 64(%rsi)
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	jmp	.LBB41_3
.LBB41_5:
	movq	(%r8), %rbx
	movq	8(%r8), %r14
	movq	%rbx, 80(%rsp)
	movq	%r14, 88(%rsp)
	movq	8(%rsi), %rax
	movq	48(%rsi), %r9
	movq	%rax, %rcx
	subq	%r9, %rcx
	cmpq	%rcx, %r14
	jle	.LBB41_6
	xorl	%r13d, %r13d
	leaq	96(%rsp), %rbp
	leaq	80(%rsp), %r15
	movq	%rbx, %rdx
	xorl	%r12d, %r12d
	.p2align	4, 0x90
.LBB41_8:
	cmpl	$0, 56(%rsi)
	jne	.LBB41_9
	testq	%r9, %r9
	je	.LBB41_11
	js	.LBB41_35
	cmpq	%rax, %r9
	jg	.LBB41_35
	cmpq	%r14, %rcx
	cmovlq	%rcx, %r14
	movq	%r14, %rbx
	testq	%r14, %r14
	cmovleq	%r13, %rbx
	jle	.LBB41_20
	addq	(%rsi), %r9
	movq	%r9, %rcx
	movq	%rbx, %r8
	callq	memmove
	movq	48(%rsi), %r9
.LBB41_20:
	addq	%rbx, %r9
	movq	%r9, 48(%rsi)
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	bufio.writer_flush
.LBB41_21:
	movq	88(%rsp), %rax
	testq	%rbx, %rbx
	js	.LBB41_36
	movq	%rax, %r14
	subq	%rbx, %r14
	jl	.LBB41_36
	addq	%rbx, %r12
	addq	80(%rsp), %rbx
	movq	%rbx, 80(%rsp)
	movq	%r14, 88(%rsp)
	movq	8(%rsi), %rax
	movq	48(%rsi), %r9
	movq	%rax, %rcx
	subq	%r9, %rcx
	movq	%rbx, %rdx
	cmpq	%rcx, %r14
	jg	.LBB41_8
	jmp	.LBB41_24
	.p2align	4, 0x90
.LBB41_11:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	je	.LBB41_12
	movq	40(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r15, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rbx
	movl	%eax, 56(%rsi)
	testq	%rbx, %rbx
	jns	.LBB41_21
	testl	%eax, %eax
	jne	.LBB41_21
	jmp	.LBB41_15
.LBB41_12:
	movl	$-1, 56(%rsi)
	xorl	%ebx, %ebx
	jmp	.LBB41_21
.LBB41_2:
	xorl	%edi, %edi
	movl	$786, %r12d
	jmp	.LBB41_3
.LBB41_34:
	movl	$-1, %edi
	xorl	%r12d, %r12d
	jmp	.LBB41_3
.LBB41_6:
	xorl	%r12d, %r12d
	jmp	.LBB41_24
.LBB41_9:
	movq	%rdx, %rbx
.LBB41_24:
	movl	56(%rsi), %edi
	testl	%edi, %edi
	jne	.LBB41_3
	testq	%r9, %r9
	js	.LBB41_37
	movq	%rax, %rcx
	subq	%r9, %rcx
	jl	.LBB41_37
	cmpq	%r14, %rcx
	cmovlq	%rcx, %r14
	xorl	%edi, %edi
	testq	%r14, %r14
	cmovleq	%rdi, %r14
	jle	.LBB41_29
	addq	(%rsi), %r9
	movq	%r9, %rcx
	movq	%rbx, %rdx
	movq	%r14, %r8
	callq	memmove
	movq	48(%rsi), %r9
.LBB41_29:
	addq	%r14, %r9
	movq	%r9, 48(%rsi)
	addq	%r14, %r12
.LBB41_3:
	movq	216(%rsp), %rax
	movq	%r12, (%rax)
	movl	%edi, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB41_15:
	movl	$11, 56(%rsi)
	movl	$11, %edi
	jmp	.LBB41_3
.LBB41_36:
	movq	%rax, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$59(%rip), %rcx
	movl	$108, %edx
	movl	$8, %r8d
	movq	%rbx, %r9
	callq	runtime.slice_handle_error
.LBB41_35:
	movq	%rax, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$59(%rip), %rcx
	movl	$103, %edx
	movl	$18, %r8d
	callq	runtime.slice_handle_error
.LBB41_37:
	movq	%rax, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$59(%rip), %rcx
	movl	$113, %edx
	movl	$17, %r8d
	callq	runtime.slice_handle_error
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI41_0:
	.long	.LBB41_4-.LJTI41_0
	.long	.LBB41_34-.LJTI41_0
	.long	.LBB41_34-.LJTI41_0
	.long	.LBB41_5-.LJTI41_0
	.long	.LBB41_34-.LJTI41_0
	.long	.LBB41_34-.LJTI41_0
	.long	.LBB41_34-.LJTI41_0
	.long	.LBB41_30-.LJTI41_0
	.long	.LBB41_2-.LJTI41_0
	.text
	.seh_endproc

	.def	runtime.type_assertion_check2;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.type_assertion_check2:
.seh_proc runtime.type_assertion_check2
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	testb	%cl, %cl
	je	.LBB42_2
	addq	$56, %rsp
	retq
.LBB42_2:
	movq	112(%rsp), %rcx
	movq	104(%rsp), %r10
	movq	96(%rsp), %rax
	movq	%rcx, 40(%rsp)
	movq	%r10, 32(%rsp)
	movq	%rdx, %rcx
	movl	%r8d, %edx
	movl	%r9d, %r8d
	movq	%rax, %r9
	callq	"runtime.type_assertion_check2.handle_error-1"
	int3
	.seh_endproc

	.def	runtime.print_typeid;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.print_typeid:
.seh_proc runtime.print_typeid
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testq	%rcx, %rcx
	je	.LBB43_1
	callq	runtime.__type_info_of
	movq	%rax, %rcx
	addq	$40, %rsp
	jmp	runtime.print_type
.LBB43_1:
	leaq	.Lggv$249(%rip), %rcx
	addq	$40, %rsp
	jmp	runtime.print_string
	.seh_endproc

	.def	runtime.print_type;
	.scl	3;
	.type	32;
	.endef
runtime.print_type:
.seh_proc runtime.print_type
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$200, %rsp
	.seh_stackalloc 200
	.seh_endprologue
	testq	%rcx, %rcx
	je	.LBB44_43
	movq	%rcx, %rsi
	leaq	.LJTI44_0(%rip), %rbx
	movabsq	$9223372036854775807, %r12
.LBB44_2:
	movq	104(%rsi), %rax
	decq	%rax
	cmpq	$28, %rax
	ja	.LBB44_89
	leaq	32(%rsi), %rdx
	movslq	(%rbx,%rax,4), %rax
	addq	%rbx, %rax
	jmpq	*%rax
.LBB44_4:
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$16c(%rip), %rcx
	callq	runtime.print_string
	movq	72(%rsp), %rcx
	callq	runtime.print_type
	leaq	.Lggv$16d(%rip), %rcx
	jmp	.LBB44_22
.LBB44_5:
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movups	32(%rdx), %xmm2
	movaps	%xmm2, 96(%rsp)
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$16f(%rip), %rcx
	callq	runtime.print_string
	movq	88(%rsp), %rcx
	callq	runtime.print_u64
	leaq	.Lggv$244(%rip), %rcx
	callq	runtime.print_string
	movq	96(%rsp), %rcx
	callq	runtime.print_u64
	leaq	.Lggv$171(%rip), %rcx
	jmp	.LBB44_22
.LBB44_6:
	movq	48(%rdx), %rax
	movq	%rax, 112(%rsp)
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movups	32(%rdx), %xmm2
	movaps	%xmm2, 96(%rsp)
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	testb	%al, %al
	je	.LBB44_8
	leaq	.Lggv$143(%rip), %rcx
	callq	runtime.print_string
.LBB44_8:
	movb	$91, %cl
	callq	runtime.print_byte
	movq	72(%rsp), %rcx
	callq	runtime.print_type
	jmp	.LBB44_31
.LBB44_9:
	movq	16(%rdx), %rax
	movq	%rax, 80(%rsp)
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$135(%rip), %rcx
	callq	runtime.print_string
	movq	64(%rsp), %rax
	testq	%rax, %rax
	je	.LBB44_34
	movq	104(%rax), %rcx
	xorl	%r14d, %r14d
	movl	$0, %r15d
	cmpq	$18, %rcx
	jne	.LBB44_12
	movq	32(%rax), %r15
	movq	40(%rax), %r14
.LBB44_12:
	addq	$32, %rax
	cmpq	$18, %rcx
	sete	%cl
	movq	%rax, 48(%rsp)
	movabsq	$3602879701896396869, %rax
	movq	%rax, 40(%rsp)
	movabsq	$1369094286720630814, %rax
	movq	%rax, 32(%rsp)
	leaq	.Lggv$f8(%rip), %rdx
	movl	$327, %r8d
	movl	$9, %r9d
	callq	runtime.type_assertion_check2
	movb	$40, %cl
	callq	runtime.print_byte
	leaq	.Lggv$1df(%rip), %rsi
	testq	%r14, %r14
	jle	.LBB44_35
	negq	%r14
	movq	$-1, %r13
.LBB44_14:
	movq	8(%r15,%r13,8), %rdi
	cmpq	%r12, %r13
	jae	.LBB44_16
	leaq	.Lggv$244(%rip), %rcx
	callq	runtime.print_string
.LBB44_16:
	movq	%rdi, %rcx
	callq	runtime.print_type
	leaq	(%r14,%r13), %rax
	incq	%rax
	incq	%r13
	cmpq	$-1, %rax
	jne	.LBB44_14
	jmp	.LBB44_35
.LBB44_17:
	movq	(%rdx), %rsi
	movq	%rsi, 64(%rsp)
	leaq	.Lggv$133(%rip), %rcx
	jmp	.LBB44_37
.LBB44_18:
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$147(%rip), %rcx
	jmp	.LBB44_22
.LBB44_19:
	movq	(%rdx), %rsi
	movq	%rsi, 64(%rsp)
	testq	%rsi, %rsi
	je	.LBB44_93
	leaq	.Lggv$132(%rip), %rcx
	jmp	.LBB44_37
.LBB44_21:
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$146(%rip), %rcx
.LBB44_22:
	callq	runtime.print_string
	jmp	.LBB44_23
.LBB44_24:
	movq	16(%rdx), %rax
	movq	%rax, 80(%rsp)
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	movb	$91, %cl
	callq	runtime.print_byte
	jmp	.LBB44_30
.LBB44_25:
	leaq	64(%rsp), %rdi
	movl	$72, %r8d
	movq	%rdi, %rcx
	callq	memcpy
	movzbl	45(%rdi), %eax
	cmpl	$3, %eax
	je	.LBB44_40
	cmpl	$2, %eax
	je	.LBB44_39
	cmpl	$1, %eax
	jne	.LBB44_101
	leaq	.Lggv$149(%rip), %rcx
	callq	runtime.print_string
	movslq	112(%rsp), %rcx
	callq	runtime.print_u64
	movb	$93, %cl
	callq	runtime.print_byte
	jmp	.LBB44_42
.LBB44_29:
	movq	16(%rdx), %rax
	movq	%rax, 80(%rsp)
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$169(%rip), %rcx
	callq	runtime.print_string
.LBB44_30:
	movq	80(%rsp), %rcx
	callq	runtime.print_u64
.LBB44_31:
	movb	$93, %cl
	callq	runtime.print_byte
.LBB44_23:
	movq	64(%rsp), %rsi
	jmp	.LBB44_38
.LBB44_32:
	movq	(%rdx), %rsi
	movq	%rsi, 64(%rsp)
	leaq	.Lggv$134(%rip), %rcx
	jmp	.LBB44_37
.LBB44_33:
	movq	16(%rdx), %rax
	movq	%rax, 80(%rsp)
	movups	(%rdx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$148(%rip), %rcx
	callq	runtime.print_string
	movq	64(%rsp), %rcx
	callq	runtime.print_type
	movb	$93, %cl
	callq	runtime.print_byte
	movq	72(%rsp), %rsi
	jmp	.LBB44_38
.LBB44_34:
	leaq	.Lggv$136(%rip), %rsi
.LBB44_35:
	movq	%rsi, %rcx
	callq	runtime.print_string
	movq	72(%rsp), %rsi
	testq	%rsi, %rsi
	je	.LBB44_89
	leaq	.Lggv$13b(%rip), %rcx
.LBB44_37:
	callq	runtime.print_string
	jmp	.LBB44_38
.LBB44_39:
	leaq	.Lggv$14a(%rip), %rcx
	jmp	.LBB44_41
.LBB44_40:
	leaq	.Lggv$14b(%rip), %rcx
.LBB44_41:
	callq	runtime.print_string
.LBB44_42:
	movq	120(%rsp), %rsi
.LBB44_38:
	testq	%rsi, %rsi
	jne	.LBB44_2
.LBB44_43:
	leaq	.Lggv$249(%rip), %rcx
.LBB44_44:
	addq	$200, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	runtime.print_string
.LBB44_45:
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movups	32(%rdx), %xmm2
	movaps	%xmm2, 96(%rsp)
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$155(%rip), %rcx
	callq	runtime.print_string
	cmpb	$0, 104(%rsp)
	je	.LBB44_47
	leaq	.Lggv$158(%rip), %rcx
	callq	runtime.print_string
	movq	8(%rsi), %rcx
	callq	runtime.print_u64
	leaq	.Lggv$16d(%rip), %rcx
	callq	runtime.print_string
.LBB44_47:
	cmpb	$0, 105(%rsp)
	je	.LBB44_49
	leaq	.Lggv$156(%rip), %rcx
	callq	runtime.print_string
.LBB44_49:
	movb	$123, %cl
	callq	runtime.print_byte
	movq	72(%rsp), %rbx
	testq	%rbx, %rbx
	jle	.LBB44_66
	movabsq	$9223372036854775807, %r14
	movq	64(%rsp), %r15
	negq	%rbx
	movq	$-1, %r12
	leaq	.Lggv$244(%rip), %rsi
.LBB44_51:
	movq	8(%r15,%r12,8), %rdi
	cmpq	%r14, %r12
	jae	.LBB44_53
	movq	%rsi, %rcx
	callq	runtime.print_string
.LBB44_53:
	movq	%rdi, %rcx
	callq	runtime.print_type
	leaq	(%rbx,%r12), %rax
	incq	%rax
	incq	%r12
	cmpq	$-1, %rax
	jne	.LBB44_51
	jmp	.LBB44_66
.LBB44_54:
	leaq	.Lggv$12d(%rip), %rcx
	jmp	.LBB44_44
.LBB44_55:
	movzwl	32(%rsi), %eax
	movw	%ax, 64(%rsp)
	movq	24(%rsi), %rcx
	movabsq	$72057594037928016, %rdx
	cmpq	%rdx, %rcx
	je	.LBB44_117
	movabsq	$72057594037928080, %rdx
	cmpq	%rdx, %rcx
	je	.LBB44_116
	movabsq	$4683743612465315844, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB44_118
	leaq	.Lggv$122(%rip), %rcx
	jmp	.LBB44_44
.LBB44_59:
	leaq	.Lggv$12b(%rip), %rcx
	jmp	.LBB44_73
.LBB44_60:
	movb	32(%rsi), %al
	movb	%al, 64(%rsp)
	movb	$102, %cl
	jmp	.LBB44_119
.LBB44_61:
	movq	32(%rdx), %rax
	movq	%rax, 96(%rsp)
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$15b(%rip), %rcx
	callq	runtime.print_string
	movq	64(%rsp), %rcx
	callq	runtime.print_type
	leaq	.Lggv$163(%rip), %rcx
	callq	runtime.print_string
	movq	80(%rsp), %rbx
	testq	%rbx, %rbx
	jle	.LBB44_66
	movabsq	$9223372036854775807, %r14
	movq	72(%rsp), %r15
	negq	%rbx
	addq	$8, %r15
	movq	$-1, %r12
	leaq	.Lggv$244(%rip), %rsi
	leaq	168(%rsp), %rdi
.LBB44_63:
	movups	-8(%r15), %xmm0
	movups	%xmm0, 168(%rsp)
	cmpq	%r14, %r12
	jae	.LBB44_65
	movq	%rsi, %rcx
	callq	runtime.print_string
.LBB44_65:
	movq	%rdi, %rcx
	callq	runtime.print_string
	leaq	(%rbx,%r12), %rax
	incq	%rax
	incq	%r12
	addq	$16, %r15
	cmpq	$-1, %rax
	jne	.LBB44_63
.LBB44_66:
	leaq	.Lggv$1da(%rip), %rcx
	jmp	.LBB44_44
.LBB44_67:
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movups	32(%rdx), %xmm2
	leaq	64(%rsp), %rcx
	movaps	%xmm2, 32(%rcx)
	movaps	%xmm1, 16(%rcx)
	movaps	%xmm0, (%rcx)
	callq	runtime.print_string
	jmp	.LBB44_89
.LBB44_68:
	leaq	.Lggv$12f(%rip), %rcx
	jmp	.LBB44_44
.LBB44_69:
	leaq	.Lggv$130(%rip), %rcx
	jmp	.LBB44_44
.LBB44_70:
	movabsq	$504403158265495599, %rax
	cmpq	%rax, 24(%rsi)
	jne	.LBB44_95
	leaq	.Lggv$12e(%rip), %rcx
	jmp	.LBB44_44
.LBB44_72:
	leaq	.Lggv$12a(%rip), %rcx
.LBB44_73:
	callq	runtime.print_string
	jmp	.LBB44_120
.LBB44_74:
	leaq	.Lggv$127(%rip), %rcx
	jmp	.LBB44_44
.LBB44_75:
	movq	48(%rdx), %rax
	movq	%rax, 112(%rsp)
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movups	32(%rdx), %xmm2
	movaps	%xmm2, 96(%rsp)
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$162(%rip), %rcx
	callq	runtime.print_string
	movq	64(%rsp), %rcx
	callq	runtime.print_type
	leaq	.Lggv$163(%rip), %rcx
	callq	runtime.print_string
	movq	72(%rsp), %r12
	movq	112(%rsp), %rsi
	leaq	.Lggv$f8(%rip), %rcx
	movl	$473, %edx
	movl	$28, %r8d
	movq	%rsi, %r9
	callq	runtime.multi_pointer_slice_expr_error
	testq	%rsi, %rsi
	jle	.LBB44_114
	movq	80(%rsp), %rbp
	movq	88(%rsp), %rdi
	negq	%rsi
	addq	$8, %r12
	movq	$-1, %r13
	leaq	152(%rsp), %rbx
	leaq	.Lggv$18b(%rip), %r14
	leaq	.Lggv$167(%rip), %r15
.LBB44_77:
	movups	-8(%r12), %xmm0
	movups	%xmm0, 152(%rsp)
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %r13
	jae	.LBB44_79
	leaq	.Lggv$244(%rip), %rcx
	callq	runtime.print_string
.LBB44_79:
	movq	%rbx, %rcx
	callq	runtime.print_string
	movq	%r14, %rcx
	callq	runtime.print_string
	movq	8(%rbp,%r13,8), %rcx
	callq	runtime.print_type
	movq	%r15, %rcx
	callq	runtime.print_string
	movq	8(%rdi,%r13,8), %rcx
	callq	runtime.print_u64
	leaq	(%rsi,%r13), %rax
	incq	%rax
	incq	%r13
	addq	$16, %r12
	cmpq	$-1, %rax
	jne	.LBB44_77
	jmp	.LBB44_114
.LBB44_80:
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movq	88(%rsp), %r13
	cmpq	$1, %r13
	je	.LBB44_82
	movb	$40, %cl
	callq	runtime.print_byte
	testq	%r13, %r13
	jle	.LBB44_94
.LBB44_82:
	movq	80(%rsp), %rdi
	movq	64(%rsp), %r14
	movq	72(%rsp), %r15
	addq	$8, %rdi
	xorl	%esi, %esi
	leaq	.Lggv$f8(%rip), %rbx
.LBB44_83:
	leaq	-1(%rsi), %rax
	movq	-8(%rdi), %rcx
	movq	(%rdi), %rbp
	movq	%rcx, 136(%rsp)
	movq	%rbp, 144(%rsp)
	movabsq	$9223372036854775807, %rcx
	cmpq	%rcx, %rax
	jae	.LBB44_85
	leaq	.Lggv$244(%rip), %rcx
	callq	runtime.print_string
.LBB44_85:
	movq	%r15, 32(%rsp)
	movq	%rbx, %rcx
	movl	$345, %edx
	movl	$20, %r8d
	movq	%rsi, %r9
	callq	runtime.bounds_check_error
	movq	(%r14,%rsi,8), %r12
	testq	%rbp, %rbp
	jle	.LBB44_87
	leaq	136(%rsp), %rcx
	callq	runtime.print_string
	leaq	.Lggv$18b(%rip), %rcx
	callq	runtime.print_string
.LBB44_87:
	movq	%r12, %rcx
	callq	runtime.print_type
	incq	%rsi
	addq	$16, %rdi
	cmpq	%rsi, %r13
	jne	.LBB44_83
	cmpq	$1, %r13
	jne	.LBB44_94
.LBB44_89:
	addq	$200, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB44_90:
	movups	(%rdx), %xmm0
	movups	16(%rdx), %xmm1
	movaps	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	leaq	.Lggv$15e(%rip), %rcx
	callq	runtime.print_string
	movq	64(%rsp), %rsi
	movq	%rsi, %rcx
	callq	runtime.type_info_base
	movq	104(%rax), %rax
	cmpq	$3, %rax
	je	.LBB44_96
	cmpq	$21, %rax
	jne	.LBB44_97
	movq	%rsi, %rcx
	callq	runtime.print_type
	jmp	.LBB44_98
.LBB44_93:
	leaq	.Lggv$131(%rip), %rcx
	jmp	.LBB44_44
.LBB44_94:
	leaq	.Lggv$1df(%rip), %rcx
	jmp	.LBB44_44
.LBB44_95:
	movb	$98, %cl
	jmp	.LBB44_119
.LBB44_96:
	movl	80(%rsp), %ecx
	callq	runtime.print_encoded_rune
	leaq	.Lggv$f4(%rip), %rcx
	callq	runtime.print_string
	movl	88(%rsp), %ecx
	callq	runtime.print_encoded_rune
	jmp	.LBB44_98
.LBB44_97:
	movq	80(%rsp), %rcx
	callq	runtime.print_i64
	leaq	.Lggv$f4(%rip), %rcx
	callq	runtime.print_string
	movq	88(%rsp), %rcx
	callq	runtime.print_i64
.LBB44_98:
	movq	72(%rsp), %rsi
	testq	%rsi, %rsi
	je	.LBB44_100
	leaq	.Lggv$161(%rip), %rcx
	callq	runtime.print_string
	movq	%rsi, %rcx
	callq	runtime.print_type
.LBB44_100:
	movb	$93, %cl
	jmp	.LBB44_115
.LBB44_101:
	leaq	.Lggv$14c(%rip), %rcx
	callq	runtime.print_string
	movb	108(%rsp), %bl
	testb	$1, %bl
	je	.LBB44_103
	leaq	.Lggv$14d(%rip), %rcx
	callq	runtime.print_string
.LBB44_103:
	testb	$2, %bl
	je	.LBB44_105
	leaq	.Lggv$14e(%rip), %rcx
	callq	runtime.print_string
.LBB44_105:
	testb	$4, %bl
	je	.LBB44_107
	leaq	.Lggv$14f(%rip), %rcx
	callq	runtime.print_string
.LBB44_107:
	testb	$8, %bl
	je	.LBB44_109
	leaq	.Lggv$158(%rip), %rcx
	callq	runtime.print_string
	movq	8(%rsi), %rcx
	callq	runtime.print_u64
	leaq	.Lggv$16d(%rip), %rcx
	callq	runtime.print_string
.LBB44_109:
	movb	$123, %cl
	callq	runtime.print_byte
	movslq	104(%rsp), %rsi
	movq	72(%rsp), %r15
	leaq	.Lggv$f8(%rip), %rcx
	movl	$413, %edx
	movl	$28, %r8d
	movq	%rsi, %r9
	callq	runtime.multi_pointer_slice_expr_error
	testq	%rsi, %rsi
	jle	.LBB44_114
	movabsq	$9223372036854775807, %r12
	movq	64(%rsp), %r13
	negq	%rsi
	addq	$8, %r15
	movq	$-1, %rbp
	leaq	.Lggv$244(%rip), %rdi
	leaq	184(%rsp), %rbx
	leaq	.Lggv$18b(%rip), %r14
.LBB44_111:
	movups	-8(%r15), %xmm0
	movups	%xmm0, 184(%rsp)
	cmpq	%r12, %rbp
	jae	.LBB44_113
	movq	%rdi, %rcx
	callq	runtime.print_string
.LBB44_113:
	movq	%rbx, %rcx
	callq	runtime.print_string
	movq	%r14, %rcx
	callq	runtime.print_string
	movq	8(%r13,%rbp,8), %rcx
	callq	runtime.print_type
	leaq	(%rsi,%rbp), %rax
	incq	%rax
	incq	%rbp
	addq	$16, %r15
	cmpq	$-1, %rax
	jne	.LBB44_111
.LBB44_114:
	movb	$125, %cl
.LBB44_115:
	addq	$200, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	runtime.print_byte
.LBB44_116:
	leaq	.Lggv$123(%rip), %rcx
	jmp	.LBB44_44
.LBB44_117:
	leaq	.Lggv$124(%rip), %rcx
	jmp	.LBB44_44
.LBB44_118:
	testb	%al, %al
	movl	$117, %eax
	movl	$105, %ecx
	cmovel	%eax, %ecx
.LBB44_119:
	callq	runtime.print_byte
.LBB44_120:
	movq	(%rsi), %rcx
	shlq	$3, %rcx
	addq	$200, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	runtime.print_u64
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI44_0:
	.long	.LBB44_67-.LJTI44_0
	.long	.LBB44_55-.LJTI44_0
	.long	.LBB44_74-.LJTI44_0
	.long	.LBB44_60-.LJTI44_0
	.long	.LBB44_72-.LJTI44_0
	.long	.LBB44_59-.LJTI44_0
	.long	.LBB44_54-.LJTI44_0
	.long	.LBB44_70-.LJTI44_0
	.long	.LBB44_68-.LJTI44_0
	.long	.LBB44_69-.LJTI44_0
	.long	.LBB44_19-.LJTI44_0
	.long	.LBB44_17-.LJTI44_0
	.long	.LBB44_9-.LJTI44_0
	.long	.LBB44_24-.LJTI44_0
	.long	.LBB44_6-.LJTI44_0
	.long	.LBB44_21-.LJTI44_0
	.long	.LBB44_18-.LJTI44_0
	.long	.LBB44_80-.LJTI44_0
	.long	.LBB44_25-.LJTI44_0
	.long	.LBB44_45-.LJTI44_0
	.long	.LBB44_61-.LJTI44_0
	.long	.LBB44_33-.LJTI44_0
	.long	.LBB44_90-.LJTI44_0
	.long	.LBB44_29-.LJTI44_0
	.long	.LBB44_4-.LJTI44_0
	.long	.LBB44_4-.LJTI44_0
	.long	.LBB44_5-.LJTI44_0
	.long	.LBB44_32-.LJTI44_0
	.long	.LBB44_75-.LJTI44_0
	.text
	.seh_endproc

	.def	reflect.is_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
reflect.is_rune:
	testq	%rcx, %rcx
	je	.LBB45_1
	.p2align	4, 0x90
.LBB45_4:
	movq	104(%rcx), %rax
	cmpq	$1, %rax
	jne	.LBB45_5
	movq	48(%rcx), %rcx
	jmp	.LBB45_4
.LBB45_5:
	cmpq	$3, %rax
	sete	%al
	retq
.LBB45_1:
	xorl	%eax, %eax
	retq

	.def	io.write_byte;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_byte:
.seh_proc io.write_byte
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$96, %rsp
	.seh_stackalloc 96
	.seh_endprologue
	movb	%dl, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB46_1
	movq	%r8, %rsi
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%r9, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testq	%rsi, %rsi
	je	.LBB46_4
	movq	72(%rsp), %rcx
	addq	%rcx, (%rsi)
	jmp	.LBB46_4
.LBB46_1:
	movl	$-1, %eax
.LBB46_4:
	addq	$96, %rsp
	popq	%rsi
	retq
	.seh_endproc

	.def	io.write_quoted_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_quoted_rune:
.seh_proc io.write_quoted_rune
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$96, %rsp
	.seh_stackalloc 96
	.seh_endprologue
	movq	%r8, %rsi
	movq	%rcx, %rdi
	movb	$39, 63(%rsp)
	leaq	63(%rsp), %r15
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB47_1
	movq	8(%rdi), %rcx
	movq	$0, 64(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	64(%rsp), %r8
	movq	%r8, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	%edx, %ebx
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movl	%ebx, %edx
	xorl	%r14d, %r14d
	testl	%eax, %eax
	sete	%r14b
	jmp	.LBB47_3
.LBB47_1:
	xorl	%r14d, %r14d
.LBB47_3:
	movq	$0, 72(%rsp)
	movq	%rsi, 32(%rsp)
	leaq	72(%rsp), %r9
	movq	%rdi, %rcx
	movb	$39, %r8b
	callq	io.write_escaped_rune
	movq	72(%rsp), %rbx
	movb	$39, 63(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rdi), %rax
	testq	%rax, %rax
	je	.LBB47_4
	movq	8(%rdi), %rcx
	movq	$0, 64(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	xorl	%ecx, %ecx
	testl	%eax, %eax
	sete	%cl
	jmp	.LBB47_6
.LBB47_4:
	xorl	%ecx, %ecx
.LBB47_6:
	addq	%r14, %rbx
	addq	%rcx, %rbx
	movq	%rbx, %rax
	addq	$96, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	io.write_string;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_string:
.seh_proc io.write_string
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movq	%r9, %rsi
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB48_1
	movq	%r8, %rdi
	movq	%rdx, %r8
	movq	128(%rsp), %rdx
	movq	8(%rcx), %rcx
	movq	$0, 64(%rsp)
	movq	%rdx, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rcx
	testq	%rdi, %rdi
	je	.LBB48_4
	addq	%rcx, (%rdi)
	jmp	.LBB48_4
.LBB48_1:
	movl	$-1, %eax
	xorl	%ecx, %ecx
.LBB48_4:
	movq	%rcx, (%rsi)
	addq	$72, %rsp
	popq	%rdi
	popq	%rsi
	retq
	.seh_endproc

	.def	strconv_decimal.shift_left;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv_decimal.shift_left:
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	movq	%rdx, %r9
	movq	%rcx, %r8
	leaq	(%rdx,%rdx,2), %rcx
	leaq	"strconv_decimal._shift_left_offsets-5539"(%rip), %rdx
	movq	(%rdx,%rcx,8), %r11
	movq	384(%r8), %rsi
	leaq	(,%r9,8), %rax
	testq	%rax, %rax
	je	.LBB49_7
	movq	16(%rdx,%rcx,8), %rax
	leaq	(%rdx,%rcx,8), %rcx
	addq	$8, %rcx
	xorl	%edx, %edx
	testq	%rsi, %rsi
	movl	$0, %r10d
	cmovgq	%rsi, %r10
	.p2align	4, 0x90
.LBB49_3:
	cmpq	%rdx, %r10
	je	.LBB49_6
	movzbl	(%r8,%rdx), %ebx
	movq	(%rcx), %rdi
	movzbl	(%rdi,%rdx), %edi
	cmpb	%dil, %bl
	jne	.LBB49_5
	incq	%rdx
	cmpq	%rdx, %rax
	jne	.LBB49_3
	jmp	.LBB49_7
.LBB49_5:
	jae	.LBB49_7
.LBB49_6:
	decq	%r11
.LBB49_7:
	movq	%rsi, %rax
	decq	%rax
	js	.LBB49_20
	leaq	-1(%r11), %rdi
	leaq	(%r8,%r11), %r14
	decq	%r14
	xorl	%edx, %edx
	movabsq	$-3689348814741910323, %rbx
	jmp	.LBB49_9
	.p2align	4, 0x90
.LBB49_10:
	addb	$48, %al
	movb	%al, (%r14,%rsi)
.LBB49_16:
	decq	%rsi
	testq	%rsi, %rsi
	jle	.LBB49_11
.LBB49_9:
	movzbl	-1(%r8,%rsi), %r10d
	addq	$-48, %r10
	movl	%r9d, %ecx
	shlq	%cl, %r10
	addq	%rdx, %r10
	movq	%r10, %rax
	mulq	%rbx
	shrq	$3, %rdx
	leaq	(%rdx,%rdx), %rax
	leaq	(%rax,%rax,4), %rcx
	movq	%r10, %rax
	subq	%rcx, %rax
	leaq	(%rdi,%rsi), %rcx
	cmpq	$383, %rcx
	jle	.LBB49_10
	testq	%rax, %rax
	je	.LBB49_16
	movb	$1, 401(%r8)
	jmp	.LBB49_16
.LBB49_11:
	cmpq	$10, %r10
	jae	.LBB49_12
.LBB49_20:
	addq	%r11, 392(%r8)
	movq	384(%r8), %rcx
	xorl	%edx, %edx
	testq	%rcx, %rcx
	cmovgq	%rcx, %rdx
	cmpq	$384, %rdx
	movl	$384, %eax
	cmovbq	%rdx, %rax
	movq	%rax, 384(%r8)
	testq	%rcx, %rcx
	jle	.LBB49_24
	decq	%rax
	.p2align	4, 0x90
.LBB49_22:
	cmpb	$48, (%r8,%rax)
	jne	.LBB49_25
	movq	%rax, 384(%r8)
	leaq	-1(%rax), %rcx
	incq	%rax
	cmpq	$1, %rax
	movq	%rcx, %rax
	ja	.LBB49_22
.LBB49_24:
	movq	$0, 392(%r8)
.LBB49_25:
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.p2align	4, 0x90
.LBB49_13:
	addb	$48, %al
	movb	%al, (%r8,%rdi)
.LBB49_19:
	decq	%rdi
	cmpq	$9, %rcx
	jbe	.LBB49_20
.LBB49_12:
	movq	%rdx, %rcx
	movq	%rdx, %rax
	mulq	%rbx
	shrq	$3, %rdx
	leaq	(%rdx,%rdx), %rax
	leaq	(%rax,%rax,4), %r9
	movq	%rcx, %rax
	subq	%r9, %rax
	cmpq	$383, %rdi
	jle	.LBB49_13
	testq	%rax, %rax
	je	.LBB49_19
	movb	$1, 401(%r8)
	jmp	.LBB49_19

	.def	io.write_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
io.write_rune:
.seh_proc io.write_rune
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$112, %rsp
	.seh_stackalloc 112
	.seh_endprologue
	movq	%r9, %rdi
	movq	%r8, %rsi
	movq	176(%rsp), %rax
	cmpl	$127, %edx
	jg	.LBB50_8
	movb	%dl, 67(%rsp)
	leaq	67(%rsp), %rdx
	movq	%rdx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	(%rcx), %r10
	testq	%r10, %r10
	je	.LBB50_2
	movq	8(%rcx), %rcx
	movq	$0, 88(%rsp)
	movq	%rax, 48(%rsp)
	leaq	88(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%r10
	xorl	%ecx, %ecx
	testl	%eax, %eax
	sete	%cl
	movq	%rcx, (%rdi)
	jne	.LBB50_7
	testq	%rsi, %rsi
	je	.LBB50_6
	incq	(%rsi)
	jmp	.LBB50_6
.LBB50_8:
	cmpl	$2047, %edx
	ja	.LBB50_10
	movl	%edx, %r9d
	shrl	$6, %r9d
	orb	$-64, %r9b
	movl	$2, %r10d
	xorl	%r8d, %r8d
	xorl	%r11d, %r11d
	jmp	.LBB50_13
.LBB50_10:
	movl	%edx, %r8d
	andl	$2095104, %r8d
	cmpl	$55296, %r8d
	movl	$65533, %r9d
	movl	%edx, %r8d
	cmovel	%r9d, %r8d
	cmpl	$1114112, %edx
	cmovael	%r9d, %r8d
	movl	%r8d, %r9d
	cmpl	$65535, %edx
	ja	.LBB50_12
	shrl	$12, %r9d
	orb	$-32, %r9b
	movl	%r8d, %edx
	shrl	$6, %edx
	andb	$63, %r8b
	orb	$-128, %r8b
	movl	$3, %r10d
	xorl	%r11d, %r11d
	jmp	.LBB50_13
.LBB50_12:
	shrl	$18, %r9d
	orb	$-16, %r9b
	movl	%r8d, %edx
	shrl	$12, %edx
	movl	%r8d, %ebx
	shrl	$6, %ebx
	andb	$63, %bl
	orb	$-128, %bl
	andb	$63, %r8b
	movl	%r8d, %r11d
	orb	$-128, %r11b
	movl	$4, %r10d
	movl	%ebx, %r8d
.LBB50_13:
	andb	$63, %dl
	orb	$-128, %dl
	movb	%r9b, 68(%rsp)
	movb	%dl, 69(%rsp)
	movb	%r8b, 70(%rsp)
	movb	%r11b, 71(%rsp)
	leaq	68(%rsp), %rdx
	movq	%rdx, 96(%rsp)
	movq	%r10, 104(%rsp)
	movq	(%rcx), %r10
	testq	%r10, %r10
	je	.LBB50_2
	movq	8(%rcx), %rcx
	movq	$0, 72(%rsp)
	movq	%rax, 48(%rsp)
	leaq	72(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%r10
	movq	72(%rsp), %rcx
	movq	%rcx, (%rdi)
	testl	%eax, %eax
	jne	.LBB50_7
	testq	%rsi, %rsi
	je	.LBB50_6
	addq	%rcx, (%rsi)
.LBB50_6:
	xorl	%eax, %eax
	jmp	.LBB50_7
.LBB50_2:
	movq	$0, (%rdi)
	movl	$-1, %eax
.LBB50_7:
	addq	$112, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_endproc

	.def	strconv_decimal.shift;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv_decimal.shift:
.seh_proc strconv_decimal.shift
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	cmpq	$0, 384(%rcx)
	je	.LBB51_11
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	testq	%rdx, %rdx
	jle	.LBB51_4
	cmpq	$61, %rdi
	jb	.LBB51_3
	.p2align	4, 0x90
.LBB51_7:
	movl	$60, %edx
	movq	%rsi, %rcx
	callq	strconv_decimal.shift_left
	leaq	-60(%rdi), %rdx
	cmpq	$120, %rdi
	movq	%rdx, %rdi
	ja	.LBB51_7
	jmp	.LBB51_8
.LBB51_4:
	js	.LBB51_5
.LBB51_11:
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB51_3:
	movq	%rdi, %rdx
.LBB51_8:
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	strconv_decimal.shift_left
.LBB51_5:
	cmpq	$-61, %rdi
	ja	.LBB51_6
	.p2align	4, 0x90
.LBB51_9:
	movl	$60, %edx
	movq	%rsi, %rcx
	callq	strconv_decimal.shift_right
	leaq	60(%rdi), %rdx
	cmpq	$-120, %rdi
	movq	%rdx, %rdi
	jb	.LBB51_9
	jmp	.LBB51_10
.LBB51_6:
	movq	%rdi, %rdx
.LBB51_10:
	negq	%rdx
	movq	%rsi, %rcx
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	jmp	strconv_decimal.shift_right
	.seh_endproc

	.def	strconv_decimal.round;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv_decimal.round:
.seh_proc strconv_decimal.round
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	testq	%rdx, %rdx
	js	.LBB52_20
	movq	%rdx, %r9
	movq	384(%rcx), %rdx
	cmpq	%r9, %rdx
	jle	.LBB52_20
	cmpq	$384, %r9
	jae	.LBB52_21
	movzbl	(%rcx,%r9), %r8d
	leaq	1(%r9), %rax
	cmpb	$53, %r8b
	jne	.LBB52_9
	cmpq	%rdx, %rax
	jne	.LBB52_9
	cmpb	$0, 401(%rcx)
	jne	.LBB52_11
	testq	%r9, %r9
	je	.LBB52_7
	movzbl	-1(%r9,%rcx), %edx
	andb	$1, %dl
	testb	%dl, %dl
	jne	.LBB52_11
.LBB52_15:
	movq	%r9, 384(%rcx)
	testq	%r9, %r9
	je	.LBB52_19
	decq	%r9
	.p2align	4, 0x90
.LBB52_17:
	cmpb	$48, (%rcx,%r9)
	jne	.LBB52_20
	movq	%r9, 384(%rcx)
	leaq	-1(%r9), %rax
	incq	%r9
	cmpq	$1, %r9
	movq	%rax, %r9
	ja	.LBB52_17
	jmp	.LBB52_19
.LBB52_9:
	cmpb	$53, %r8b
	setae	%dl
	testb	%dl, %dl
	je	.LBB52_15
	.p2align	4, 0x90
.LBB52_11:
	cmpq	$1, %rax
	je	.LBB52_14
	movzbl	-2(%rcx,%rax), %edx
	decq	%rax
	cmpb	$56, %dl
	ja	.LBB52_11
	incb	%dl
	movb	%dl, -1(%rcx,%rax)
	movq	%rax, 384(%rcx)
	jmp	.LBB52_20
.LBB52_14:
	movb	$49, (%rcx)
	movq	$1, 384(%rcx)
	incq	392(%rcx)
	jmp	.LBB52_20
.LBB52_7:
	movq	$0, 384(%rcx)
.LBB52_19:
	movq	$0, 392(%rcx)
.LBB52_20:
	addq	$40, %rsp
	retq
.LBB52_21:
	movq	$384, 32(%rsp)
	leaq	.Lggv$11b(%rip), %rcx
	movl	$446, %edx
	movl	$14, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	reflect.is_enum;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
reflect.is_enum:
	testq	%rcx, %rcx
	je	.LBB53_1
	.p2align	4, 0x90
.LBB53_4:
	movq	104(%rcx), %rax
	cmpq	$1, %rax
	jne	.LBB53_5
	movq	48(%rcx), %rcx
	jmp	.LBB53_4
.LBB53_5:
	cmpq	$21, %rax
	sete	%al
	retq
.LBB53_1:
	xorl	%eax, %eax
	retq

	.def	runtime.map_kvh_data_dynamic;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.map_kvh_data_dynamic:
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	movq	(%rcx), %rsi
	movl	%esi, %ecx
	andl	$63, %ecx
	movl	$1, %r11d
	shlq	%cl, %r11
	andq	$-64, %rsi
	movq	(%rdx), %rdi
	movq	16(%rdi), %rbx
	movq	24(%rdi), %r10
	cmpq	$2, %r10
	je	.LBB54_3
	cmpq	$1, %r10
	jne	.LBB54_6
	shlq	%cl, %rbx
	addq	%rsi, %rbx
	movq	%rbx, %r10
	jmp	.LBB54_8
.LBB54_3:
	movq	%r11, %r10
	shrq	%r10
	imulq	%rbx, %r10
	addq	%rsi, %r10
	testq	%rcx, %rcx
	jne	.LBB54_4
	movq	(%rdi), %rax
	jmp	.LBB54_7
.LBB54_6:
	movq	%r11, %rax
	movq	%rdx, %r14
	xorl	%edx, %edx
	divq	%r10
	movq	%rdx, %r10
	movq	%r14, %rdx
	imulq	%rbx, %rax
	imulq	(%rdi), %r10
	addq	%rsi, %r10
	jmp	.LBB54_7
.LBB54_4:
	xorl	%eax, %eax
.LBB54_7:
	addq	%rax, %r10
.LBB54_8:
	movq	96(%rsp), %rdi
	movq	88(%rsp), %rbx
	movq	8(%rdx), %r15
	movq	16(%r15), %r14
	movq	24(%r15), %r12
	cmpq	$2, %r12
	je	.LBB54_11
	cmpq	$1, %r12
	jne	.LBB54_15
	shlq	%cl, %r14
	addq	%r10, %r14
	jmp	.LBB54_16
.LBB54_11:
	shrq	%r11
	imulq	%r11, %r14
	testq	%rcx, %rcx
	jne	.LBB54_12
	movq	(%r15), %rax
	jmp	.LBB54_14
.LBB54_15:
	movq	%r11, %rax
	xorl	%edx, %edx
	divq	%r12
	imulq	(%r15), %rdx
	imulq	%r14, %rax
	addq	%r10, %rdx
	addq	%rax, %rdx
	movq	%rdx, %r14
	jmp	.LBB54_16
.LBB54_12:
	xorl	%eax, %eax
.LBB54_14:
	addq	%r10, %rax
	addq	%rax, %r14
.LBB54_16:
	movl	$8, %eax
	shlq	%cl, %rax
	addq	%r14, %rax
	movq	%rsi, (%r8)
	movq	%r10, (%r9)
	movq	%r14, (%rbx)
	movq	%rax, (%rdi)
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq

	.def	reflect.write_type_writer;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
reflect.write_type_writer:
.seh_proc reflect.write_type_writer
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$1256, %rsp
	.seh_stackalloc 1256
	.seh_endprologue
	movq	%r9, %r13
	movq	%r8, %rdi
	movq	%rcx, %rbx
	movq	1360(%rsp), %r12
	movq	$0, 64(%rsp)
	testq	%rdx, %rdx
	je	.LBB55_4
	movq	104(%rdx), %rcx
	decq	%rcx
	cmpq	$28, %rcx
	ja	.LBB55_212
	leaq	32(%rdx), %rax
	leaq	.LJTI55_0(%rip), %r8
	movslq	(%r8,%rcx,4), %rcx
	addq	%r8, %rcx
	jmpq	*%rcx
.LBB55_3:
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movups	32(%rax), %xmm2
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	80(%rsp), %rdx
	leaq	64(%rsp), %r8
	leaq	1240(%rsp), %r9
	jmp	.LBB55_194
.LBB55_4:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$249(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1248(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	jmp	.LBB55_196
.LBB55_5:
	movq	(%rax), %rax
	movq	%rax, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$134(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1032(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1024(%rsp), %r9
	jmp	.LBB55_90
.LBB55_7:
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$147(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	840(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	832(%rsp), %r9
	jmp	.LBB55_90
.LBB55_9:
	movq	48(%rax), %rcx
	movq	%rcx, 128(%rsp)
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movups	32(%rax), %xmm2
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	testb	%cl, %cl
	je	.LBB55_11
	movq	%r12, 32(%rsp)
	leaq	.Lggv$143(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	888(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
.LBB55_11:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$144(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	880(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	88(%rsp), %rdx
	movq	$0, 248(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	248(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$171(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	872(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	864(%rsp), %r9
	jmp	.LBB55_90
.LBB55_15:
	movq	(%rax), %rax
	movq	%rax, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$133(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1048(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1040(%rsp), %r9
	jmp	.LBB55_90
.LBB55_17:
	movq	%rdx, %r14
	movq	%r12, 32(%rsp)
	leaq	.Lggv$12a(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1152(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	(%r14), %rdx
	shlq	$3, %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1144(%rsp), %r9
	jmp	.LBB55_143
.LBB55_19:
	movq	16(%rax), %rcx
	movq	%rcx, 96(%rsp)
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$135(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1016(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rcx
	testq	%rcx, %rcx
	je	.LBB55_185
	leaq	32(%rcx), %rax
	movq	104(%rcx), %rdx
	xorl	%r15d, %r15d
	movl	$0, %r14d
	cmpq	$18, %rdx
	jne	.LBB55_23
	movq	32(%rcx), %r14
	movq	40(%rcx), %r15
.LBB55_23:
	cmpq	$18, %rdx
	sete	%cl
	movq	%rax, 48(%rsp)
	movabsq	$3602879701896396869, %rax
	movq	%rax, 40(%rsp)
	movabsq	$1369094286720630814, %rax
	movq	%rax, 32(%rsp)
	leaq	.Lggv$164(%rip), %rdx
	movl	$575, %r8d
	movl	$9, %r9d
	callq	runtime.type_assertion_check2
	movq	%r12, 32(%rsp)
	leaq	.Lggv$13c(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1000(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r13, %rsi
	movq	%rdi, 72(%rsp)
	movq	%r12, %rdi
	xorl	%r13d, %r13d
	testq	%r15, %r15
	cmovgq	%r15, %r13
	negq	%r13
	movq	$-1, %rbp
	leaq	64(%rsp), %r12
	jmp	.LBB55_26
.LBB55_25:
	movq	$0, 264(%rsp)
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r15, %rdx
	movq	%r12, %r8
	leaq	264(%rsp), %r9
	callq	reflect.write_type_writer
	incq	%rbp
	testl	%eax, %eax
	jne	.LBB55_127
.LBB55_26:
	movq	%r13, %rax
	addq	%rbp, %rax
	cmpq	$-1, %rax
	je	.LBB55_199
	movq	8(%r14,%rbp,8), %r15
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %rbp
	jae	.LBB55_25
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$244(%rip), %rdx
	movq	%r12, %r8
	leaq	992(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	je	.LBB55_25
	jmp	.LBB55_127
.LBB55_29:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$130(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1080(%rsp), %r9
	jmp	.LBB55_194
.LBB55_30:
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16c(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	360(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	88(%rsp), %rdx
	movq	$0, 168(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	168(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16d(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	352(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	344(%rsp), %r9
	jmp	.LBB55_90
.LBB55_34:
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16c(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	384(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	88(%rsp), %rdx
	movq	$0, 176(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	176(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16d(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	376(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	368(%rsp), %r9
	jmp	.LBB55_90
.LBB55_38:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$127(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1184(%rsp), %r9
	jmp	.LBB55_194
.LBB55_39:
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$146(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	856(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	848(%rsp), %r9
	jmp	.LBB55_90
.LBB55_41:
	movq	%rdx, %r14
	movzbl	(%rax), %eax
	movb	%al, 80(%rsp)
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$102, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	(%r14), %rdx
	shlq	$3, %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1176(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movzbl	80(%rsp), %eax
	cmpl	$2, %eax
	je	.LBB55_193
	cmpl	$1, %eax
	jne	.LBB55_212
	movq	%r12, 32(%rsp)
	leaq	.Lggv$128(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1168(%rsp), %r9
	jmp	.LBB55_194
.LBB55_46:
	movabsq	$504403158265495599, %rax
	cmpq	%rax, 24(%rdx)
	jne	.LBB55_141
	movq	%r12, 32(%rsp)
	leaq	.Lggv$12e(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1104(%rsp), %r9
	jmp	.LBB55_194
.LBB55_48:
	movzwl	32(%rdx), %eax
	movw	%ax, 80(%rsp)
	movq	24(%rdx), %rcx
	movabsq	$72057594037928016, %r8
	cmpq	%r8, %rcx
	je	.LBB55_152
	movabsq	$72057594037928080, %r8
	cmpq	%r8, %rcx
	je	.LBB55_151
	movabsq	$4683743612465315844, %r8
	cmpq	%r8, %rcx
	jne	.LBB55_153
	movq	%r12, 32(%rsp)
	leaq	.Lggv$122(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1232(%rsp), %r9
	jmp	.LBB55_194
.LBB55_52:
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	104(%rsp), %rsi
	movl	$1, %ebp
	cmpq	$1, %rsi
	je	.LBB55_55
	movq	%r12, 32(%rsp)
	leaq	.Lggv$13c(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	960(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	104(%rsp), %rbp
.LBB55_55:
	movq	%rsi, 160(%rsp)
	movq	%r13, 152(%rsp)
	movq	%rdi, 72(%rsp)
	movq	%r12, %rsi
	xorl	%r15d, %r15d
	testq	%rbp, %rbp
	cmovleq	%r15, %rbp
	movl	$8, %r14d
	leaq	64(%rsp), %r13
	jmp	.LBB55_57
.LBB55_56:
	movq	$0, 256(%rsp)
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %rdx
	movq	%r13, %r8
	leaq	256(%rsp), %r9
	callq	reflect.write_type_writer
	incq	%r15
	addq	$16, %r14
	testl	%eax, %eax
	jne	.LBB55_63
.LBB55_57:
	cmpq	%r15, %rbp
	je	.LBB55_183
	leaq	-1(%r15), %rax
	movq	96(%rsp), %rcx
	movups	-8(%rcx,%r14), %xmm0
	movups	%xmm0, 272(%rsp)
	movabsq	$9223372036854775807, %rcx
	cmpq	%rcx, %rax
	jae	.LBB55_60
	movq	%rsi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$244(%rip), %rdx
	movq	%r13, %r8
	leaq	952(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_63
.LBB55_60:
	movq	80(%rsp), %r12
	movq	88(%rsp), %rax
	movq	%rax, 32(%rsp)
	leaq	.Lggv$164(%rip), %rcx
	movl	$597, %edx
	movl	$20, %r8d
	movq	%r15, %r9
	callq	runtime.bounds_check_error
	movq	(%r12,%r15,8), %r12
	cmpq	$0, 280(%rsp)
	movq	%rsi, %rdi
	jle	.LBB55_56
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	272(%rsp), %rdx
	movq	%r13, %r8
	leaq	944(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_63
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$18b(%rip), %rdx
	movq	%r13, %r8
	leaq	936(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	je	.LBB55_56
.LBB55_63:
	movq	64(%rsp), %rcx
	movq	152(%rsp), %rdx
	movq	%rcx, (%rdx)
.LBB55_128:
	movq	72(%rsp), %rdi
	testq	%rdi, %rdi
	jne	.LBB55_197
	jmp	.LBB55_198
.LBB55_64:
	movq	32(%rax), %rcx
	movq	%rcx, 112(%rsp)
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$15b(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	600(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	$0, 216(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	216(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$163(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	592(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r13, %rsi
	movq	%r12, %r15
	movq	96(%rsp), %rax
	xorl	%r13d, %r13d
	testq	%rax, %rax
	cmovgq	%rax, %r13
	negq	%r13
	movq	$-1, %r14
	movl	$8, %ebp
	leaq	64(%rsp), %r12
	jmp	.LBB55_138
.LBB55_68:
	movq	%rdx, %r14
	movq	%r12, 32(%rsp)
	leaq	.Lggv$12b(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1136(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	(%r14), %rdx
	shlq	$3, %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1128(%rsp), %r9
	jmp	.LBB55_143
.LBB55_70:
	movq	16(%rax), %rcx
	movq	%rcx, 96(%rsp)
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$148(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	824(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	$0, 240(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	240(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$93, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	88(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	816(%rsp), %r9
	jmp	.LBB55_90
.LBB55_74:
	movq	16(%rax), %rcx
	movq	%rcx, 96(%rsp)
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$144(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	920(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	96(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	912(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$171(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	904(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	896(%rsp), %r9
	jmp	.LBB55_90
.LBB55_78:
	movzbl	(%rax), %eax
	movb	%al, 80(%rsp)
	testb	%al, %al
	je	.LBB55_144
	movq	%r12, 32(%rsp)
	leaq	.Lggv$12c(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1120(%rsp), %r9
	jmp	.LBB55_194
.LBB55_80:
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movups	32(%rax), %xmm2
	movups	48(%rax), %xmm3
	movaps	%xmm2, 112(%rsp)
	movq	64(%rax), %rax
	movq	%rax, 144(%rsp)
	movaps	%xmm3, 128(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movzbl	125(%rsp), %eax
	cmpl	$3, %eax
	je	.LBB55_160
	cmpl	$2, %eax
	je	.LBB55_158
	cmpl	$1, %eax
	jne	.LBB55_163
	movq	%r12, 32(%rsp)
	leaq	.Lggv$149(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	808(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movslq	128(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	800(%rsp), %r9
	movq	%rbx, %rcx
	xorl	%r8d, %r8d
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$93, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	136(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	792(%rsp), %r9
	jmp	.LBB55_162
.LBB55_87:
	movq	(%rax), %rax
	movq	%rax, 80(%rsp)
	testq	%rax, %rax
	je	.LBB55_145
	movq	%r12, 32(%rsp)
	leaq	.Lggv$132(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1064(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1056(%rsp), %r9
.LBB55_90:
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	jmp	.LBB55_195
.LBB55_91:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$12f(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1088(%rsp), %r9
	jmp	.LBB55_194
.LBB55_92:
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$15e(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	552(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %r15
	movq	%r15, %rcx
	callq	reflect.is_enum
	testb	%al, %al
	je	.LBB55_186
	movq	$0, 208(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	208(%rsp), %r9
	movq	%rbx, %rcx
	movq	%r15, %rdx
	callq	reflect.write_type_writer
.LBB55_95:
	testl	%eax, %eax
	jne	.LBB55_196
	cmpq	$0, 88(%rsp)
	je	.LBB55_99
	movq	%r12, 32(%rsp)
	leaq	.Lggv$161(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	496(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	88(%rsp), %rdx
	movq	$0, 200(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	200(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
.LBB55_99:
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$93, %dl
	movq	%r12, %r9
	callq	io.write_byte
	jmp	.LBB55_195
.LBB55_100:
	movq	%rdx, %r14
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movups	32(%rax), %xmm2
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$155(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	656(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	cmpb	$0, 121(%rsp)
	je	.LBB55_103
	movq	%r12, 32(%rsp)
	leaq	.Lggv$156(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	648(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
.LBB55_103:
	cmpb	$0, 122(%rsp)
	je	.LBB55_105
	movq	%r12, 32(%rsp)
	leaq	.Lggv$157(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	640(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
.LBB55_105:
	cmpb	$0, 120(%rsp)
	je	.LBB55_109
	movq	%r12, 32(%rsp)
	leaq	.Lggv$158(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	632(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	8(%r14), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	624(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16d(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	616(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
.LBB55_109:
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$123, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r13, %rsi
	movq	%r12, %rbp
	movq	88(%rsp), %rax
	xorl	%r13d, %r13d
	testq	%rax, %rax
	cmovgq	%rax, %r13
	negq	%r13
	movq	$-1, %r14
	leaq	64(%rsp), %r12
	jmp	.LBB55_147
.LBB55_111:
	movq	16(%rax), %rcx
	movq	%rcx, 96(%rsp)
	movups	(%rax), %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$169(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	408(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	96(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	400(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$93, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	392(%rsp), %r9
	jmp	.LBB55_90
.LBB55_115:
	movq	48(%rax), %rcx
	movq	%rcx, 128(%rsp)
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movups	32(%rax), %xmm2
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r12, 32(%rsp)
	leaq	.Lggv$162(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	488(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	$0, 192(%rsp)
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	192(%rsp), %r9
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$163(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	480(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r13, %rsi
	movq	%rdi, 72(%rsp)
	movq	%r12, %r14
	movq	88(%rsp), %r13
	movq	128(%rsp), %r15
	leaq	.Lggv$164(%rip), %rcx
	movl	$724, %edx
	movl	$28, %r8d
	movq	%r15, %r9
	callq	runtime.multi_pointer_slice_expr_error
	xorl	%ebp, %ebp
	testq	%r15, %r15
	cmovgq	%r15, %rbp
	negq	%rbp
	addq	$8, %r13
	movq	$-1, %r15
	leaq	64(%rsp), %r12
.LBB55_119:
	leaq	(%r15,%rbp), %rax
	cmpq	$-1, %rax
	je	.LBB55_208
	movups	-8(%r13), %xmm0
	movups	%xmm0, 464(%rsp)
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %r15
	jae	.LBB55_122
	movq	%r14, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$244(%rip), %rdx
	movq	%r12, %r8
	leaq	456(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_127
.LBB55_122:
	movq	%r14, %rdi
	movq	%r14, 32(%rsp)
	movq	%rbx, %rcx
	leaq	464(%rsp), %rdx
	movq	%r12, %r8
	leaq	448(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_127
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$18b(%rip), %rdx
	movq	%r12, %r8
	leaq	440(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_127
	movq	96(%rsp), %rax
	movq	8(%rax,%r15,8), %rdx
	movq	$0, 184(%rsp)
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %r8
	leaq	184(%rsp), %r9
	callq	reflect.write_type_writer
	testl	%eax, %eax
	jne	.LBB55_127
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$167(%rip), %rdx
	movq	%r12, %r8
	leaq	432(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_127
	movq	104(%rsp), %rax
	movq	8(%rax,%r15,8), %rdx
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %r8
	leaq	424(%rsp), %r9
	callq	io.write_u64
	addq	$16, %r13
	incq	%r15
	testl	%eax, %eax
	je	.LBB55_119
.LBB55_127:
	movq	64(%rsp), %rcx
	movq	%rcx, (%rsi)
	jmp	.LBB55_128
.LBB55_129:
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movups	32(%rax), %xmm2
	movaps	%xmm2, 112(%rsp)
	movaps	%xmm1, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	cmpb	$1, 120(%rsp)
	jne	.LBB55_131
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16e(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	336(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
.LBB55_131:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16f(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	328(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	104(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	320(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$244(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	312(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	112(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	304(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$171(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	296(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	80(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	288(%rsp), %r9
	jmp	.LBB55_90
.LBB55_137:
	movq	%r15, 32(%rsp)
	movq	%rbx, %rcx
	leaq	576(%rsp), %rdx
	movq	%r12, %r8
	leaq	560(%rsp), %r9
	callq	io.write_string
	addq	$16, %rbp
	incq	%r14
	testl	%eax, %eax
	jne	.LBB55_150
.LBB55_138:
	leaq	(%r14,%r13), %rax
	cmpq	$-1, %rax
	je	.LBB55_203
	movq	88(%rsp), %rax
	movups	-8(%rax,%rbp), %xmm0
	movups	%xmm0, 576(%rsp)
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %r14
	jae	.LBB55_137
	movq	%r15, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$244(%rip), %rdx
	movq	%r12, %r8
	leaq	568(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	je	.LBB55_137
	jmp	.LBB55_150
.LBB55_141:
	movq	%rdx, %r14
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$98, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	(%r14), %rdx
	shlq	$3, %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1096(%rsp), %r9
.LBB55_143:
	movq	%rbx, %rcx
	callq	io.write_i64
	jmp	.LBB55_195
.LBB55_144:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$12d(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1112(%rsp), %r9
	jmp	.LBB55_194
.LBB55_145:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$131(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1072(%rsp), %r9
	jmp	.LBB55_194
.LBB55_146:
	movq	$0, 224(%rsp)
	movq	%rbp, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r15, %rdx
	movq	%r12, %r8
	leaq	224(%rsp), %r9
	callq	reflect.write_type_writer
	incq	%r14
	testl	%eax, %eax
	jne	.LBB55_150
.LBB55_147:
	leaq	(%r14,%r13), %rax
	cmpq	$-1, %rax
	je	.LBB55_209
	movq	80(%rsp), %rax
	movq	8(%rax,%r14,8), %r15
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %r14
	jae	.LBB55_146
	movq	%rbp, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$244(%rip), %rdx
	movq	%r12, %r8
	leaq	608(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	je	.LBB55_146
.LBB55_150:
	movq	64(%rsp), %rcx
	movq	%rcx, (%rsi)
	testq	%rdi, %rdi
	jne	.LBB55_197
	jmp	.LBB55_198
.LBB55_151:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$123(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1224(%rsp), %r9
	jmp	.LBB55_194
.LBB55_152:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$124(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1216(%rsp), %r9
	jmp	.LBB55_194
.LBB55_153:
	movq	%rdx, %r14
	testb	%al, %al
	movl	$117, %eax
	movl	$105, %edx
	cmovel	%eax, %edx
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	(%r14), %rdx
	shlq	$3, %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	1208(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movzbl	81(%rsp), %eax
	cmpl	$2, %eax
	je	.LBB55_207
	cmpl	$1, %eax
	jne	.LBB55_212
	movq	%r12, 32(%rsp)
	leaq	.Lggv$128(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1200(%rsp), %r9
	jmp	.LBB55_194
.LBB55_158:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$14a(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	784(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	136(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	776(%rsp), %r9
	jmp	.LBB55_162
.LBB55_160:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$14b(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	768(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	136(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	760(%rsp), %r9
.LBB55_162:
	movq	%rbx, %rcx
	callq	reflect.write_type_writer
	jmp	.LBB55_196
.LBB55_163:
	movq	%rdx, %r15
	movq	%r12, 32(%rsp)
	leaq	.Lggv$14c(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	752(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movzbl	124(%rsp), %eax
	testb	$1, %al
	je	.LBB55_167
	movq	%r12, 32(%rsp)
	leaq	.Lggv$14d(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	744(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movzbl	124(%rsp), %eax
.LBB55_167:
	testb	$2, %al
	je	.LBB55_170
	movq	%r12, 32(%rsp)
	leaq	.Lggv$14e(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	736(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movzbl	124(%rsp), %eax
.LBB55_170:
	testb	$4, %al
	je	.LBB55_173
	movq	%r12, 32(%rsp)
	leaq	.Lggv$14f(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	728(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movzbl	124(%rsp), %eax
.LBB55_173:
	testb	$8, %al
	jne	.LBB55_204
.LBB55_174:
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$123, %dl
	movq	%r12, %r9
	callq	io.write_byte
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r13, 152(%rsp)
	movslq	120(%rsp), %r15
	movq	88(%rsp), %r14
	leaq	.Lggv$164(%rip), %rcx
	movl	$666, %edx
	movl	$28, %r8d
	movq	%r15, %r9
	callq	runtime.multi_pointer_slice_expr_error
	xorl	%r13d, %r13d
	testq	%r15, %r15
	cmovgq	%r15, %r13
	negq	%r13
	addq	$8, %r14
	movq	$-1, %rbp
	leaq	64(%rsp), %r12
	leaq	672(%rsp), %r15
.LBB55_176:
	movq	%r13, %rax
	addq	%rbp, %rax
	cmpq	$-1, %rax
	je	.LBB55_213
	movups	-8(%r14), %xmm0
	movups	%xmm0, 688(%rsp)
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %rbp
	jae	.LBB55_179
	movq	1360(%rsp), %rax
	movq	%rax, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$244(%rip), %rdx
	movq	%r12, %r8
	leaq	680(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_182
.LBB55_179:
	movq	1360(%rsp), %rsi
	movq	%rsi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	688(%rsp), %rdx
	movq	%r12, %r8
	movq	%r15, %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_182
	movq	%rsi, 32(%rsp)
	movq	%rbx, %rcx
	leaq	.Lggv$18b(%rip), %rdx
	movq	%r12, %r8
	leaq	664(%rsp), %r9
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_182
	movq	80(%rsp), %rax
	movq	8(%rax,%rbp,8), %rdx
	movq	$0, 232(%rsp)
	movq	%rsi, 32(%rsp)
	movq	%rbx, %rcx
	movq	%r12, %r8
	leaq	232(%rsp), %r9
	callq	reflect.write_type_writer
	addq	$16, %r14
	incq	%rbp
	testl	%eax, %eax
	je	.LBB55_176
.LBB55_182:
	movq	64(%rsp), %rcx
	movq	152(%rsp), %rdx
	movq	%rcx, (%rdx)
	testq	%rdi, %rdi
	jne	.LBB55_197
	jmp	.LBB55_198
.LBB55_183:
	cmpq	$1, 160(%rsp)
	movq	72(%rsp), %rdi
	movq	152(%rsp), %r13
	je	.LBB55_212
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$1df(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	928(%rsp), %r9
	jmp	.LBB55_194
.LBB55_185:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$136(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1008(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	jmp	.LBB55_200
.LBB55_186:
	movq	%r15, %rcx
	callq	reflect.is_rune
	movq	96(%rsp), %rdx
	testb	%al, %al
	je	.LBB55_190
	movq	%r12, 40(%rsp)
	leaq	544(%rsp), %rax
	movq	%rax, 32(%rsp)
	leaq	64(%rsp), %r9
	movq	%rbx, %rcx
	movb	$1, %r8b
	callq	io.write_encoded_rune
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$160(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	536(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movl	104(%rsp), %edx
	movq	%r12, 40(%rsp)
	leaq	528(%rsp), %rax
	movq	%rax, 32(%rsp)
	leaq	64(%rsp), %r9
	movq	%rbx, %rcx
	movb	$1, %r8b
	callq	io.write_encoded_rune
	jmp	.LBB55_95
.LBB55_190:
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	520(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$160(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	512(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	104(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	504(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	jmp	.LBB55_95
.LBB55_193:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$129(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1160(%rsp), %r9
.LBB55_194:
	movq	%rbx, %rcx
	callq	io.write_string
.LBB55_195:
	testl	%eax, %eax
	je	.LBB55_212
.LBB55_196:
	movq	64(%rsp), %rcx
	movq	%rcx, (%r13)
	testq	%rdi, %rdi
	je	.LBB55_198
.LBB55_197:
	addq	%rcx, (%rdi)
.LBB55_198:
	addq	$1256, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB55_199:
	movq	%rdi, %r12
	movq	%rdi, 32(%rsp)
	leaq	.Lggv$1df(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	984(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	movq	72(%rsp), %rdi
	movq	%rsi, %r13
	jne	.LBB55_196
.LBB55_200:
	cmpq	$0, 88(%rsp)
	je	.LBB55_212
	movq	%r12, 32(%rsp)
	leaq	.Lggv$13b(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	976(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	88(%rsp), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	968(%rsp), %r9
	jmp	.LBB55_90
.LBB55_203:
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$125, %dl
	movq	%r15, %r9
	jmp	.LBB55_210
.LBB55_204:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$158(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	720(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	movq	8(%r15), %rdx
	movq	%r12, 32(%rsp)
	leaq	64(%rsp), %r8
	leaq	712(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_i64
	testl	%eax, %eax
	jne	.LBB55_196
	movq	%r12, 32(%rsp)
	leaq	.Lggv$16d(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	704(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	jne	.LBB55_196
	jmp	.LBB55_174
.LBB55_207:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$129(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	1192(%rsp), %r9
	jmp	.LBB55_194
.LBB55_208:
	movq	%r14, 32(%rsp)
	leaq	.Lggv$1da(%rip), %rdx
	leaq	64(%rsp), %r8
	leaq	416(%rsp), %r9
	movq	%rbx, %rcx
	callq	io.write_string
	testl	%eax, %eax
	movq	72(%rsp), %rdi
	jmp	.LBB55_211
.LBB55_209:
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$125, %dl
	movq	%rbp, %r9
.LBB55_210:
	callq	io.write_byte
	testl	%eax, %eax
.LBB55_211:
	movq	%rsi, %r13
	jne	.LBB55_196
.LBB55_212:
	movq	64(%rsp), %rcx
	movq	%rcx, (%r13)
	xorl	%eax, %eax
	testq	%rdi, %rdi
	jne	.LBB55_197
	jmp	.LBB55_198
.LBB55_213:
	leaq	64(%rsp), %r8
	movq	%rbx, %rcx
	movb	$125, %dl
	movq	1360(%rsp), %r9
	callq	io.write_byte
	testl	%eax, %eax
	movq	152(%rsp), %r13
	jne	.LBB55_196
	jmp	.LBB55_212
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI55_0:
	.long	.LBB55_3-.LJTI55_0
	.long	.LBB55_48-.LJTI55_0
	.long	.LBB55_38-.LJTI55_0
	.long	.LBB55_41-.LJTI55_0
	.long	.LBB55_17-.LJTI55_0
	.long	.LBB55_68-.LJTI55_0
	.long	.LBB55_78-.LJTI55_0
	.long	.LBB55_46-.LJTI55_0
	.long	.LBB55_91-.LJTI55_0
	.long	.LBB55_29-.LJTI55_0
	.long	.LBB55_87-.LJTI55_0
	.long	.LBB55_15-.LJTI55_0
	.long	.LBB55_19-.LJTI55_0
	.long	.LBB55_74-.LJTI55_0
	.long	.LBB55_9-.LJTI55_0
	.long	.LBB55_39-.LJTI55_0
	.long	.LBB55_7-.LJTI55_0
	.long	.LBB55_52-.LJTI55_0
	.long	.LBB55_80-.LJTI55_0
	.long	.LBB55_100-.LJTI55_0
	.long	.LBB55_64-.LJTI55_0
	.long	.LBB55_70-.LJTI55_0
	.long	.LBB55_92-.LJTI55_0
	.long	.LBB55_111-.LJTI55_0
	.long	.LBB55_34-.LJTI55_0
	.long	.LBB55_30-.LJTI55_0
	.long	.LBB55_129-.LJTI55_0
	.long	.LBB55_5-.LJTI55_0
	.long	.LBB55_115-.LJTI55_0
	.text
	.seh_endproc

	.def	reflect.struct_tag_lookup;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
reflect.struct_tag_lookup:
.seh_proc reflect.struct_tag_lookup
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	8(%rcx), %r10
	testq	%r10, %r10
	je	.LBB56_29
	movq	(%rcx), %rcx
.LBB56_2:
	xorl	%r9d, %r9d
	testq	%r10, %r10
	jle	.LBB56_3
	.p2align	4, 0x90
.LBB56_5:
	cmpb	$32, (%rcx,%r9)
	jne	.LBB56_3
	incq	%r9
	cmpq	%r9, %r10
	jne	.LBB56_5
	movq	%r10, %r9
	jmp	.LBB56_8
	.p2align	4, 0x90
.LBB56_3:
	cmpq	%r10, %r9
	jg	.LBB56_4
.LBB56_8:
	subq	%r9, %r10
	testq	%r10, %r10
	jle	.LBB56_29
	addq	%r9, %rcx
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB56_10:
	movzbl	(%rcx,%r9), %eax
	cmpl	$34, %eax
	je	.LBB56_16
	cmpl	$58, %eax
	je	.LBB56_16
	cmpb	$32, %al
	jb	.LBB56_16
	addb	$-127, %al
	cmpb	$33, %al
	jb	.LBB56_16
	incq	%r9
	cmpq	%r9, %r10
	jne	.LBB56_10
	movq	%r10, %r9
	jmp	.LBB56_17
	.p2align	4, 0x90
.LBB56_16:
	testq	%r9, %r9
	je	.LBB56_29
.LBB56_17:
	leaq	1(%r9), %rax
	cmpq	%rax, %r10
	jle	.LBB56_29
	cmpq	%r10, %r9
	jae	.LBB56_39
	cmpb	$58, (%rcx,%r9)
	jne	.LBB56_29
	movq	%r10, %r11
	subq	%rax, %r11
	jbe	.LBB56_40
	cmpb	$34, (%rcx,%rax)
	jne	.LBB56_29
	cmpq	%r10, %r9
	jg	.LBB56_41
	testq	%rax, %rax
	js	.LBB56_42
	cmpq	$2, %r11
	jl	.LBB56_29
	addq	%rcx, %rax
	movl	$1, %r10d
	.p2align	4, 0x90
.LBB56_26:
	cmpq	%r11, %r10
	jae	.LBB56_43
	movzbl	(%rax,%r10), %ebx
	cmpb	$34, %bl
	je	.LBB56_30
	xorl	%esi, %esi
	cmpb	$92, %bl
	sete	%sil
	addq	%rsi, %r10
	incq	%r10
	cmpq	%r11, %r10
	jl	.LBB56_26
	jmp	.LBB56_29
	.p2align	4, 0x90
.LBB56_30:
	leaq	1(%r10), %rsi
	cmpq	%r9, 8(%rdx)
	jne	.LBB56_35
	movq	(%rdx), %rdi
	cmpq	%rcx, %rdi
	je	.LBB56_36
	xorl	%ebx, %ebx
	.p2align	4, 0x90
.LBB56_34:
	movzbl	(%rdi,%rbx), %ebp
	cmpb	(%rcx,%rbx), %bpl
	jne	.LBB56_35
	incq	%rbx
	cmpq	%rbx, %r9
	jne	.LBB56_34
	jmp	.LBB56_36
	.p2align	4, 0x90
.LBB56_35:
	leaq	(%rax,%r10), %rcx
	incq	%rcx
	subq	%rsi, %r11
	movq	%r11, %r10
	jne	.LBB56_2
.LBB56_29:
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r8)
	xorl	%eax, %eax
.LBB56_38:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	retq
.LBB56_36:
	movabsq	$-9223372036854775807, %rcx
	leaq	(%r10,%rcx), %rdx
	incq	%rcx
	cmpq	%rcx, %rdx
	jb	.LBB56_44
	incq	%rax
	decq	%r10
	movq	%rax, (%r8)
	movq	%r10, 8(%r8)
	movb	$1, %al
	jmp	.LBB56_38
.LBB56_43:
	movq	%r11, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$559, %edx
	movl	$23, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB56_39:
	movq	%r10, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$552, %edx
	movl	$8, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB56_40:
	movq	%r10, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$552, %edx
	movl	$23, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB56_42:
	movq	%r10, 40(%rsp)
	movq	%r10, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$556, %edx
	movl	$8, %r8d
	movq	%rax, %r9
	callq	runtime.slice_handle_error
.LBB56_41:
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$555, %edx
	movl	$19, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB56_4:
	movq	%r10, 40(%rsp)
	movq	%r10, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$529, %edx
	movl	$8, %r8d
	callq	runtime.slice_handle_error
.LBB56_44:
	movq	%rsi, 40(%rsp)
	movq	%r10, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$1, %r9d
	movl	$574, %edx
	movl	$14, %r8d
	callq	runtime.slice_handle_error
	int3
	.seh_endproc

	.def	runtime.type_info_base;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.type_info_base:
	testq	%rcx, %rcx
	je	.LBB57_1
	movq	%rcx, %rax
	cmpq	$1, 104(%rax)
	jne	.LBB57_5
	.p2align	4, 0x90
.LBB57_3:
	movq	48(%rax), %rax
	cmpq	$1, 104(%rax)
	je	.LBB57_3
.LBB57_5:
	retq
.LBB57_1:
	xorl	%eax, %eax
	retq

	.def	runtime.__type_info_of;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.__type_info_of:
	movabsq	$72057594037927935, %rax
	andq	%rcx, %rax
	xorl	%ecx, %ecx
	cmpq	$160, %rax
	cmovbq	%rax, %rcx
	leaq	.L__$type_info_data(%rip), %rax
	movq	(%rax,%rcx,8), %rax
	retq

	.def	runtime.default_logger_proc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.default_logger_proc:
	retq

	.def	runtime.default_context;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.default_context:
	movq	%rcx, %rax
	leaq	runtime.heap_allocator_proc(%rip), %rcx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	leaq	runtime.default_temp_allocator_proc(%rip), %rcx
	movq	%rcx, 16(%rax)
	movl	_tls_index(%rip), %ecx
	movq	%gs:88, %rdx
	movq	(%rdx,%rcx,8), %rcx
	leaq	runtime.global_default_temp_allocator_data@SECREL32(%rcx), %rcx
	movq	%rcx, 24(%rax)
	leaq	runtime.default_assertion_failure_proc(%rip), %rcx
	movq	%rcx, 32(%rax)
	leaq	runtime.default_logger_proc(%rip), %rcx
	movq	%rcx, 40(%rax)
	xorps	%xmm0, %xmm0
	movups	%xmm0, 48(%rax)
	movq	$0, 64(%rax)
	leaq	runtime.default_random_generator_proc(%rip), %rcx
	movq	%rcx, 72(%rax)
	movups	%xmm0, 80(%rax)
	movups	%xmm0, 96(%rax)
	retq

	.def	runtime.default_assertion_failure_proc;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
runtime.default_assertion_failure_proc:
.seh_proc runtime.default_assertion_failure_proc
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	movq	%r8, %rcx
	callq	runtime.print_caller_location
	leaq	.Lggv$18a(%rip), %rcx
	callq	runtime.print_string
	movq	%rdi, %rcx
	callq	runtime.print_string
	cmpq	$0, 8(%rsi)
	jle	.LBB61_2
	leaq	.Lggv$18b(%rip), %rcx
	callq	runtime.print_string
	movq	%rsi, %rcx
	callq	runtime.print_string
.LBB61_2:
	movb	$10, %cl
	callq	runtime.print_byte
	ud2
	.seh_endproc

	.def	__truncsfhf2;
	.scl	2;
	.type	32;
	.endef
	.globl	__truncsfhf2
	.p2align	4, 0x90
__truncsfhf2:
	pushq	%rax
	movd	%xmm0, %r9d
	movl	%r9d, %eax
	shrl	$16, %eax
	andl	$32768, %eax
	movl	%r9d, %r10d
	shrl	$23, %r10d
	movzbl	%r10b, %r8d
	movl	%r9d, %edx
	andl	$8388607, %edx
	cmpl	$112, %r8d
	ja	.LBB62_3
	cmpl	$102, %r8d
	jb	.LBB62_12
	orl	$8388608, %edx
	movb	$113, %cl
	subb	%r10b, %cl
	shrl	%cl, %edx
	movl	%edx, %ecx
	andl	$4096, %ecx
	leal	(%rdx,%rcx,2), %ecx
	shrl	$13, %ecx
	orl	%eax, %ecx
	movl	%ecx, %eax
	jmp	.LBB62_12
.LBB62_3:
	leal	-112(%r8), %ecx
	cmpl	$143, %ecx
	jne	.LBB62_6
	testl	%edx, %edx
	je	.LBB62_11
	movl	%edx, %ecx
	shrl	$13, %ecx
	xorl	%r8d, %r8d
	cmpl	$8192, %edx
	setb	%r8b
	orl	%eax, %ecx
	orl	%r8d, %ecx
	orl	$31744, %ecx
	movl	%ecx, %eax
	jmp	.LBB62_12
.LBB62_6:
	testl	$4096, %r9d
	je	.LBB62_8
	leal	8192(%rdx), %r9d
	addl	$-111, %r8d
	xorl	%r10d, %r10d
	cmpl	$8380416, %edx
	cmovbl	%r9d, %r10d
	cmovbl	%ecx, %r8d
	movl	%r10d, %edx
	movl	%r8d, %ecx
.LBB62_8:
	cmpl	$31, %ecx
	jb	.LBB62_10
	movabsq	$1000000000000, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
	movq	(%rsp), %rcx
	imulq	%rcx, %rcx
	movq	%rcx, (%rsp)
.LBB62_11:
	orl	$31744, %eax
	jmp	.LBB62_12
.LBB62_10:
	shll	$10, %ecx
	shrl	$13, %edx
	orl	%eax, %edx
	orl	%ecx, %edx
	movl	%edx, %eax
.LBB62_12:
	pinsrw	$0, %eax, %xmm0
	popq	%rax
	retq

	.def	reflect.as_i64;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
reflect.as_i64:
.seh_proc reflect.as_i64
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	movq	(%rcx), %r10
	xorl	%r8d, %r8d
	movl	$0, %eax
	testq	%r10, %r10
	je	.LBB63_67
	movq	8(%rcx), %rcx
	testq	%rcx, %rcx
	je	.LBB63_67
	movabsq	$72057594037927935, %rax
	andq	%rax, %rcx
	xorl	%eax, %eax
	cmpq	$160, %rcx
	cmovbq	%rcx, %rax
	leaq	.L__$type_info_data(%rip), %rcx
	leaq	(%rcx,%rax,8), %rax
	.p2align	4, 0x90
.LBB63_3:
	movq	(%rax), %rcx
	leaq	32(%rcx), %rax
	movq	104(%rcx), %r11
	cmpq	$29, %r11
	je	.LBB63_3
	cmpq	$21, %r11
	je	.LBB63_3
	cmpq	$1, %r11
	jne	.LBB63_7
	addq	$48, %rcx
	movq	%rcx, %rax
	jmp	.LBB63_3
.LBB63_7:
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	addq	$-2, %r11
	cmpq	$6, %r11
	ja	.LBB63_67
	movq	24(%rcx), %r9
	leaq	.LJTI63_0(%rip), %rcx
	movslq	(%rcx,%r11,4), %r11
	addq	%rcx, %r11
	jmpq	*%r11
.LBB63_9:
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movabsq	$-72057594037927938, %rcx
	addq	%r9, %rcx
	cmpq	$142, %rcx
	ja	.LBB63_37
	leaq	.LJTI63_1(%rip), %r9
	movslq	(%r9,%rcx,4), %rcx
	addq	%r9, %rcx
	jmpq	*%rcx
.LBB63_11:
	movzwl	(%r10), %r8d
	jmp	.LBB63_66
.LBB63_12:
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movabsq	$216172782113783931, %rcx
	cmpq	%rcx, %r9
	jg	.LBB63_33
	movabsq	$216172782113783825, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_36
	movabsq	$216172782113783829, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_44
	movabsq	$216172782113783833, %rcx
	cmpq	%rcx, %r9
	jne	.LBB63_67
	movl	(%r10), %eax
	bswapl	%eax
	movd	%eax, %xmm0
	jmp	.LBB63_32
.LBB63_17:
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movabsq	$504403158265495676, %rcx
	cmpq	%rcx, %r9
	jle	.LBB63_40
	movabsq	$504403158265495677, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_53
	movabsq	$504403158265495683, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_54
	movabsq	$504403158265495694, %rcx
	cmpq	%rcx, %r9
	jne	.LBB63_67
	xorl	%r8d, %r8d
	cmpw	$0, (%r10)
	setne	%r8b
	jmp	.LBB63_66
.LBB63_22:
	movabsq	$4755801206503243794, %rax
	cmpq	%rax, %r9
	jne	.LBB63_68
.LBB63_23:
	movslq	(%r10), %r8
	jmp	.LBB63_66
.LBB63_24:
	movabsq	$288230376151711881, %rax
	cmpq	%rax, %r9
	je	.LBB63_43
	movabsq	$288230376151711887, %rax
	cmpq	%rax, %r9
	jne	.LBB63_45
	movq	(%r10), %rax
	movabsq	$9223372032559808512, %rcx
	testq	%rcx, %rax
	jne	.LBB63_45
	jmp	.LBB63_31
.LBB63_27:
	cmpq	$20, %r9
	je	.LBB63_46
	cmpq	$12, %r9
	jne	.LBB63_45
	movabsq	$9223372032559808512, %rcx
	orq	$2147483647, %rcx
	andq	(%r10), %rcx
	movq	8(%r10), %rax
	movl	%eax, %r8d
	andl	$2147483647, %r8d
	orq	%rcx, %r8
	jne	.LBB63_45
	shrq	$32, %rax
.LBB63_31:
	movd	%eax, %xmm0
.LBB63_32:
	cvttss2si	%xmm0, %eax
	jmp	.LBB63_65
.LBB63_33:
	movabsq	$216172782113783932, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_55
	movabsq	$216172782113783938, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_44
	movabsq	$216172782113783940, %rcx
	cmpq	%rcx, %r9
	jne	.LBB63_67
.LBB63_36:
	cvttss2si	(%r10), %eax
.LBB63_65:
	movslq	%eax, %r8
	jmp	.LBB63_66
.LBB63_37:
	movabsq	$-4683743612465315969, %rcx
	addq	%r9, %rcx
	cmpq	$19, %rcx
	ja	.LBB63_50
	leaq	.LJTI63_3(%rip), %r9
	movslq	(%r9,%rcx,4), %rcx
	addq	%r9, %rcx
	jmpq	*%rcx
.LBB63_39:
	movq	8(%r10), %r8
	bswapq	%r8
	jmp	.LBB63_66
.LBB63_40:
	movabsq	$504403158265495562, %rcx
	cmpq	%rcx, %r9
	je	.LBB63_42
	movabsq	$504403158265495599, %rcx
	cmpq	%rcx, %r9
	jne	.LBB63_67
.LBB63_42:
	xorl	%r8d, %r8d
	cmpb	$0, (%r10)
	setne	%r8b
	jmp	.LBB63_66
.LBB63_43:
	movsd	8(%r10), %xmm0
	xorpd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jne	.LBB63_45
	jp	.LBB63_45
.LBB63_44:
	cvttsd2si	(%r10), %r8
	jmp	.LBB63_66
.LBB63_45:
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	jmp	.LBB63_67
.LBB63_46:
	movsd	(%r10), %xmm1
	xorl	%r8d, %r8d
	xorpd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm1
	movl	$0, %eax
	jne	.LBB63_67
	jp	.LBB63_67
	movsd	8(%r10), %xmm1
	ucomisd	%xmm0, %xmm1
	jne	.LBB63_67
	jp	.LBB63_67
	movsd	16(%r10), %xmm0
	xorpd	%xmm1, %xmm1
	ucomisd	%xmm1, %xmm0
	jne	.LBB63_67
	jp	.LBB63_67
	cvttsd2si	24(%r10), %r8
	jmp	.LBB63_66
.LBB63_50:
	movabsq	$-4683743612465315844, %rcx
	addq	%rcx, %r9
	cmpq	$22, %r9
	ja	.LBB63_67
	leaq	.LJTI63_2(%rip), %rcx
	movslq	(%rcx,%r9,4), %r9
	addq	%rcx, %r9
	jmpq	*%r9
.LBB63_52:
	movq	(%r10), %r8
	jmp	.LBB63_66
.LBB63_53:
	xorl	%r8d, %r8d
	cmpq	$0, (%r10)
	setne	%r8b
	jmp	.LBB63_66
.LBB63_54:
	xorl	%r8d, %r8d
	cmpl	$0, (%r10)
	setne	%r8b
	jmp	.LBB63_66
.LBB63_55:
	movq	(%r10), %rax
	bswapq	%rax
	movq	%rax, %xmm0
	cvttsd2si	%xmm0, %r8
	jmp	.LBB63_66
.LBB63_56:
	movl	(%r10), %r8d
	jmp	.LBB63_66
.LBB63_57:
	movq	(%r10), %r8
	bswapq	%r8
	jmp	.LBB63_66
.LBB63_58:
	movswq	(%r10), %r8
	jmp	.LBB63_66
.LBB63_59:
	movl	(%r10), %r8d
	bswapl	%r8d
	jmp	.LBB63_66
.LBB63_60:
	movzwl	(%r10), %eax
	rolw	$8, %ax
	movzwl	%ax, %r8d
	jmp	.LBB63_66
.LBB63_61:
	movzbl	(%r10), %r8d
	jmp	.LBB63_66
.LBB63_62:
	movsbq	(%r10), %r8
	jmp	.LBB63_66
.LBB63_63:
	movzwl	(%r10), %eax
	rolw	$8, %ax
	movswq	%ax, %r8
.LBB63_66:
	movb	$1, %al
.LBB63_67:
	movq	%r8, (%rdx)
	addq	$56, %rsp
	retq
.LBB63_64:
	movl	(%r10), %eax
	bswapl	%eax
	jmp	.LBB63_65
.LBB63_68:
	movq	%r10, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$1048, %edx
	movl	$8, %r8d
	callq	"runtime.type_assertion_check2.handle_error-1"
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI63_0:
	.long	.LBB63_9-.LJTI63_0
	.long	.LBB63_22-.LJTI63_0
	.long	.LBB63_12-.LJTI63_0
	.long	.LBB63_24-.LJTI63_0
	.long	.LBB63_27-.LJTI63_0
	.long	.LBB63_67-.LJTI63_0
	.long	.LBB63_17-.LJTI63_0
.LJTI63_1:
	.long	.LBB63_61-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_11-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_56-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_52-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_52-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_60-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_11-.LJTI63_1
	.long	.LBB63_52-.LJTI63_1
	.long	.LBB63_52-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_52-.LJTI63_1
	.long	.LBB63_57-.LJTI63_1
	.long	.LBB63_56-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_59-.LJTI63_1
	.long	.LBB63_39-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_67-.LJTI63_1
	.long	.LBB63_52-.LJTI63_1
.LJTI63_2:
	.long	.LBB63_52-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_58-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_52-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_23-.LJTI63_2
	.long	.LBB63_52-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_67-.LJTI63_2
	.long	.LBB63_23-.LJTI63_2
.LJTI63_3:
	.long	.LBB63_52-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_39-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_57-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_62-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_67-.LJTI63_3
	.long	.LBB63_64-.LJTI63_3
	.long	.LBB63_52-.LJTI63_3
	.long	.LBB63_58-.LJTI63_3
	.long	.LBB63_63-.LJTI63_3
	.text
	.seh_endproc

	.def	__truncdfhf2;
	.scl	2;
	.type	32;
	.endef
	.globl	__truncdfhf2
	.p2align	4, 0x90
__truncdfhf2:
	cvtsd2ss	%xmm0, %xmm0
	jmp	__truncsfhf2

	.def	__gnu_h2f_ieee;
	.scl	2;
	.type	32;
	.endef
	.globl	__real@77800000
	.section	.rdata,"dr",discard,__real@77800000
	.p2align	2, 0x0
__real@77800000:
	.long	0x77800000
	.globl	__real@47800000
	.section	.rdata,"dr",discard,__real@47800000
	.p2align	2, 0x0
__real@47800000:
	.long	0x47800000
	.text
	.globl	__gnu_h2f_ieee
	.p2align	4, 0x90
__gnu_h2f_ieee:
	pextrw	$0, %xmm0, %eax
	movl	%eax, %ecx
	andl	$32767, %ecx
	shll	$13, %ecx
	movd	%ecx, %xmm0
	mulss	__real@77800000(%rip), %xmm0
	movd	%xmm0, %ecx
	movl	%ecx, %edx
	orl	$2139095040, %edx
	ucomiss	__real@47800000(%rip), %xmm0
	cmovbl	%ecx, %edx
	andl	$32768, %eax
	shll	$16, %eax
	orl	%edx, %eax
	movd	%eax, %xmm0
	retq

	.def	__gnu_f2h_ieee;
	.scl	2;
	.type	32;
	.endef
	.globl	__gnu_f2h_ieee
	.p2align	4, 0x90
__gnu_f2h_ieee:
	jmp	__truncsfhf2

	.def	__extendhfsf2;
	.scl	2;
	.type	32;
	.endef
	.globl	__extendhfsf2
	.p2align	4, 0x90
__extendhfsf2:
	pextrw	$0, %xmm0, %eax
	movl	%eax, %ecx
	andl	$32767, %ecx
	shll	$13, %ecx
	movd	%ecx, %xmm0
	mulss	__real@77800000(%rip), %xmm0
	movd	%xmm0, %ecx
	movl	%ecx, %edx
	orl	$2139095040, %edx
	ucomiss	__real@47800000(%rip), %xmm0
	cmovbl	%ecx, %edx
	andl	$32768, %eax
	shll	$16, %eax
	orl	%edx, %eax
	movd	%eax, %xmm0
	retq

	.def	__floattidf;
	.scl	2;
	.type	32;
	.endef
	.globl	__floattidf
	.p2align	4, 0x90
__floattidf:
	pushq	%r15
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	movq	(%rcx), %r10
	movq	8(%rcx), %r8
	movq	%r10, %rax
	orq	%r8, %rax
	je	.LBB68_1
	movq	%r8, %rdx
	sarq	$63, %rdx
	xorq	%rdx, %r8
	xorq	%rdx, %r10
	subq	%rdx, %r10
	sbbq	%rdx, %r8
	bsrq	%r8, %rcx
	xorq	$63, %rcx
	bsrq	%r10, %rax
	movl	$127, %r9d
	cmoveq	%r9, %rax
	xorq	$63, %rax
	addq	$64, %rax
	testq	%r8, %r8
	cmovneq	%rcx, %rax
	movq	%r10, %rcx
	shrq	$53, %rcx
	orq	%r8, %rcx
	je	.LBB68_11
	cmpb	$73, %al
	je	.LBB68_8
	movzbl	%al, %ecx
	cmpl	$74, %ecx
	jne	.LBB68_7
	shldq	$1, %r10, %r8
	addq	%r10, %r10
	jmp	.LBB68_8
.LBB68_1:
	pxor	%xmm0, %xmm0
	jmp	.LBB68_2
.LBB68_11:
	movl	%eax, %ecx
	addb	$53, %cl
	shlq	%cl, %r10
	xorl	%r8d, %r8d
	testb	$64, %cl
	cmoveq	%r10, %r8
	jmp	.LBB68_12
.LBB68_7:
	xorl	%edi, %edi
	movl	$73, %ecx
	subq	%rax, %rcx
	movl	$0, %ebx
	sbbq	%rbx, %rbx
	movq	%r10, %r11
	shrdq	%cl, %r8, %r11
	movq	%r8, %rsi
	shrq	%cl, %rsi
	testb	$64, %cl
	cmovneq	%rsi, %r11
	cmovneq	%rdi, %rsi
	cmpq	$128, %rcx
	sbbq	$0, %rbx
	cmovaeq	%rdi, %rsi
	cmovaeq	%rdi, %r11
	movq	%r10, %rbx
	movl	$511, %r14d
	movq	$-1, %r15
	movl	%eax, %ecx
	shrdq	%cl, %r14, %r15
	shrq	%cl, %r14
	shrq	$55, %rbx
	testb	$64, %al
	cmovneq	%r14, %r15
	cmovneq	%rdi, %r14
	orq	%r8, %rbx
	cmoveq	%rdi, %r15
	cmovel	%edi, %r14d
	andq	%r10, %r15
	andl	%r14d, %r8d
	xorl	%r10d, %r10d
	orq	%r15, %r8
	setne	%r10b
	orq	%r11, %r10
	movq	%rsi, %r8
.LBB68_8:
	movl	%r10d, %ecx
	shrl	$2, %ecx
	andl	$1, %ecx
	orq	%r10, %rcx
	addq	$1, %rcx
	adcq	$0, %r8
	btq	$55, %rcx
	jb	.LBB68_10
	shldq	$62, %rcx, %r8
	jmp	.LBB68_12
.LBB68_10:
	shldq	$61, %rcx, %r8
	movl	$128, %r9d
.LBB68_12:
	subl	%eax, %r9d
	andl	$-2147483648, %edx
	shll	$20, %r9d
	addl	$1072693248, %r9d
	orl	%edx, %r9d
	shlq	$32, %r9
	movabsq	$4503599627370495, %rax
	andq	%r8, %rax
	orq	%r9, %rax
	movq	%rax, %xmm0
.LBB68_2:
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq

	.def	__floattidf_unsigned;
	.scl	2;
	.type	32;
	.endef
	.globl	__floattidf_unsigned
	.p2align	4, 0x90
__floattidf_unsigned:
	pushq	%r14
	pushq	%rsi
	pushq	%rdi
	pushq	%rbx
	movq	(%rcx), %r9
	movq	8(%rcx), %rdx
	movq	%r9, %rax
	orq	%rdx, %rax
	je	.LBB69_1
	bsrq	%rdx, %rcx
	xorq	$63, %rcx
	bsrq	%r9, %rax
	xorq	$63, %rax
	addq	$64, %rax
	testq	%rdx, %rdx
	cmovneq	%rcx, %rax
	movl	%eax, %r8d
	xorl	$127, %r8d
	movq	%r9, %rcx
	shrq	$53, %rcx
	orq	%rdx, %rcx
	je	.LBB69_11
	movl	%eax, %ecx
	andb	$127, %cl
	cmpb	$73, %cl
	je	.LBB69_8
	movl	%eax, %ecx
	andl	$127, %ecx
	cmpl	$74, %ecx
	jne	.LBB69_7
	shldq	$1, %r9, %rdx
	addq	%r9, %r9
	jmp	.LBB69_8
.LBB69_1:
	pxor	%xmm0, %xmm0
	jmp	.LBB69_2
.LBB69_11:
	addb	$-75, %al
	movl	%eax, %ecx
	shlq	%cl, %r9
	xorl	%edx, %edx
	testb	$64, %al
	cmoveq	%r9, %rdx
	jmp	.LBB69_12
.LBB69_7:
	xorl	%esi, %esi
	movl	$73, %ecx
	subq	%rax, %rcx
	movl	$0, %edi
	sbbq	%rdi, %rdi
	movq	%r9, %r10
	shrdq	%cl, %rdx, %r10
	movq	%rdx, %r11
	shrq	%cl, %r11
	testb	$64, %cl
	cmovneq	%r11, %r10
	cmovneq	%rsi, %r11
	cmpq	$128, %rcx
	sbbq	$0, %rdi
	cmovaeq	%rsi, %r11
	cmovaeq	%rsi, %r10
	movq	%r9, %rdi
	movl	$511, %ebx
	movq	$-1, %r14
	movl	%eax, %ecx
	shrdq	%cl, %rbx, %r14
	shrq	%cl, %rbx
	shrq	$55, %rdi
	testb	$64, %al
	cmovneq	%rbx, %r14
	cmovneq	%rsi, %rbx
	orq	%rdx, %rdi
	cmoveq	%rsi, %r14
	cmovel	%esi, %ebx
	andq	%r9, %r14
	andl	%ebx, %edx
	xorl	%r9d, %r9d
	orq	%r14, %rdx
	setne	%r9b
	orq	%r10, %r9
	movq	%r11, %rdx
.LBB69_8:
	movl	%r9d, %ecx
	shrl	$2, %ecx
	andl	$1, %ecx
	orq	%r9, %rcx
	addq	$1, %rcx
	adcq	$0, %rdx
	btq	$55, %rcx
	jb	.LBB69_10
	shldq	$62, %rcx, %rdx
	jmp	.LBB69_12
.LBB69_10:
	shldq	$61, %rcx, %rdx
	movl	$128, %r8d
	subl	%eax, %r8d
.LBB69_12:
	shll	$20, %r8d
	movq	%rdx, %rax
	shrq	$32, %rax
	andl	$1048575, %eax
	addl	%r8d, %eax
	addl	$1072693248, %eax
	shlq	$32, %rax
	movl	%edx, %ecx
	orq	%rax, %rcx
	movq	%rcx, %xmm0
.LBB69_2:
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq

	.def	fmt.fmt_bad_verb;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_bad_verb:
.seh_proc fmt.fmt_bad_verb
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$120, %rsp
	.seh_stackalloc 120
	.seh_endprologue
	movq	%r8, %rdi
	movq	%rcx, %rsi
	movzbl	8(%rcx), %ebp
	movb	$1, 8(%rcx)
	leaq	40(%rcx), %rbx
	leaq	112(%rcx), %r14
	movq	40(%rcx), %rax
	testq	%rax, %rax
	je	.LBB70_2
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %r8
	movq	%r8, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1b1(%rip), %r8
	movl	%edx, %r15d
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movl	%r15d, %edx
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB70_2:
	movq	%rdi, 32(%rsp)
	leaq	112(%rsp), %r9
	movq	%rbx, %rcx
	movq	%r14, %r8
	callq	io.write_rune
	movb	$40, 71(%rsp)
	leaq	71(%rsp), %r15
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB70_4
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB70_4:
	movq	56(%rsi), %rcx
	movq	64(%rsi), %rax
	movq	%rcx, 96(%rsp)
	movq	%rax, 104(%rsp)
	testq	%rcx, %rcx
	je	.LBB70_9
	testq	%rax, %rax
	je	.LBB70_9
	movabsq	$72057594037927935, %rcx
	andq	%rcx, %rax
	xorl	%ecx, %ecx
	cmpq	$160, %rax
	cmovbq	%rax, %rcx
	leaq	.L__$type_info_data(%rip), %rax
	movq	(%rax,%rcx,8), %rdx
	movq	%rdi, 32(%rsp)
	leaq	80(%rsp), %r9
	movq	%rbx, %rcx
	movq	%r14, %r8
	callq	reflect.write_type_writer
	movb	$61, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB70_8
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB70_8:
	leaq	96(%rsp), %rdx
	movq	%rsi, %rcx
	movl	$118, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_value
	jmp	.LBB70_11
.LBB70_9:
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB70_11
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$24d(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB70_11:
	movb	$41, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB70_13
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB70_13:
	movb	%bpl, 8(%rsi)
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	fmt.fmt_bool;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_bool:
.seh_proc fmt.fmt_bool
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	leal	-116(%r8), %eax
	cmpl	$3, %eax
	ja	.LBB71_3
	cmpl	$1, %eax
	je	.LBB71_3
	leaq	.Lcsbs$14e(%rip), %rax
	leaq	.Lcsbs$14f(%rip), %r8
	testb	%dl, %dl
	cmovneq	%rax, %r8
	movzbl	%dl, %eax
	xorq	$5, %rax
	movq	%r8, 40(%rsp)
	movq	%rax, 48(%rsp)
	leaq	40(%rsp), %rdx
	movl	$115, %r8d
	callq	fmt.fmt_string
	nop
	addq	$56, %rsp
	retq
.LBB71_3:
	movl	%r8d, %edx
	movq	%r9, %r8
	addq	$56, %rsp
	jmp	fmt.fmt_bad_verb
	.seh_endproc

	.def	__umodti3;
	.scl	2;
	.type	32;
	.endef
	.globl	__umodti3
	.p2align	4, 0x90
__umodti3:
	subq	$88, %rsp
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	(%rdx), %r8
	movq	8(%rdx), %rdx
	movq	%rax, 48(%rsp)
	movq	%rcx, 56(%rsp)
	movq	%r8, 32(%rsp)
	movq	%rdx, 40(%rsp)
	leaq	48(%rsp), %rcx
	leaq	32(%rsp), %rdx
	leaq	64(%rsp), %r8
	callq	runtime.udivmod128
	movaps	64(%rsp), %xmm0
	addq	$88, %rsp
	retq

	.def	__udivmodti4;
	.scl	2;
	.type	32;
	.endef
	.globl	__udivmodti4
	.p2align	4, 0x90
__udivmodti4:
	subq	$72, %rsp
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	(%rdx), %r9
	movq	8(%rdx), %rdx
	movq	%rax, 48(%rsp)
	movq	%rcx, 56(%rsp)
	movq	%r9, 32(%rsp)
	movq	%rdx, 40(%rsp)
	leaq	48(%rsp), %rcx
	leaq	32(%rsp), %rdx
	callq	runtime.udivmod128
	addq	$72, %rsp
	retq

	.def	__udivti3;
	.scl	2;
	.type	32;
	.endef
	.globl	__udivti3
	.p2align	4, 0x90
__udivti3:
	subq	$72, %rsp
	movaps	(%rcx), %xmm0
	movaps	(%rdx), %xmm1
	movaps	%xmm0, 48(%rsp)
	movaps	%xmm1, 32(%rsp)
	leaq	48(%rsp), %rcx
	leaq	32(%rsp), %rdx
	xorl	%r8d, %r8d
	callq	runtime.udivmod128
	addq	$72, %rsp
	retq

	.def	fmt._fmt_int;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt._fmt_int:
.seh_proc fmt._fmt_int
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$424, %rsp
	.seh_stackalloc 424
	.seh_endprologue
	movl	%r9d, %ebp
	movq	%r8, %rbx
	movq	%rdx, %r14
	movq	%rcx, %rdi
	movq	544(%rsp), %rsi
	movq	528(%rsp), %r15
	testb	%r9b, %r9b
	je	.LBB75_3
	leaq	-8(%r15), %rax
	shldq	$61, %rax, %rax
	cmpq	$7, %rax
	ja	.LBB75_33
	movl	$139, %ecx
	btq	%rax, %rcx
	jae	.LBB75_33
.LBB75_3:
	cmpb	$0, 5(%rdi)
	jne	.LBB75_5
	cmpb	$0, 6(%rdi)
	je	.LBB75_6
.LBB75_5:
	movq	16(%rdi), %rax
	movq	24(%rdi), %rcx
	addq	%rcx, %rax
	addq	$3, %rax
	cmpq	$257, %rax
	jge	.LBB75_34
.LBB75_6:
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 400(%rsp)
	movaps	%xmm0, 384(%rsp)
	movaps	%xmm0, 368(%rsp)
	movaps	%xmm0, 352(%rsp)
	movaps	%xmm0, 336(%rsp)
	movaps	%xmm0, 320(%rsp)
	movaps	%xmm0, 304(%rsp)
	movaps	%xmm0, 288(%rsp)
	movaps	%xmm0, 272(%rsp)
	movaps	%xmm0, 256(%rsp)
	movaps	%xmm0, 240(%rsp)
	movaps	%xmm0, 224(%rsp)
	movaps	%xmm0, 208(%rsp)
	movaps	%xmm0, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movaps	%xmm0, 160(%rsp)
	xorl	%eax, %eax
	cmpb	$0, 4(%rdi)
	movb	$1, %cl
	je	.LBB75_19
	testb	%bpl, %bpl
	jne	.LBB75_19
	leaq	-2(%rbx), %rdx
	shldq	$63, %rdx, %rdx
	xorl	%eax, %eax
	cmpq	$7, %rdx
	ja	.LBB75_19
	leaq	.LJTI75_0(%rip), %r8
	movslq	(%r8,%rdx,4), %rdx
	addq	%r8, %rdx
	jmpq	*%rdx
.LBB75_12:
	movb	$48, 87(%rsp)
	leaq	87(%rsp), %r12
	movq	%r12, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB75_18
	movq	48(%rdi), %rcx
	movq	$0, 88(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	88(%rsp), %r13
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	$111, 87(%rsp)
	jmp	.LBB75_16
.LBB75_10:
	movb	$48, 87(%rsp)
	leaq	87(%rsp), %r12
	movq	%r12, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB75_18
	movq	48(%rdi), %rcx
	movq	$0, 88(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	88(%rsp), %r13
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	$98, 87(%rsp)
	jmp	.LBB75_16
.LBB75_14:
	movb	$48, 87(%rsp)
	leaq	87(%rsp), %r12
	movq	%r12, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB75_18
	movq	48(%rdi), %rcx
	movq	$0, 88(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	88(%rsp), %r13
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	$120, 87(%rsp)
.LBB75_16:
	movq	%r12, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB75_18
	movq	48(%rdi), %rcx
	movq	$0, 88(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rdi)
.LBB75_18:
	movl	$2, %eax
	xorl	%ecx, %ecx
.LBB75_19:
	cmpb	$0, 6(%rdi)
	je	.LBB75_28
	movq	24(%rdi), %rdx
	orq	%r14, %rdx
	jne	.LBB75_28
	movzbl	3(%rdi), %ebp
	movb	$0, 3(%rdi)
	movq	16(%rdi), %r14
	testq	%r14, %r14
	jle	.LBB75_26
	cmpb	$0, 2(%rdi)
	sete	%r15b
	shlb	$4, %r15b
	orb	$32, %r15b
	leaq	87(%rsp), %r12
	leaq	88(%rsp), %r13
	leaq	96(%rsp), %rbx
	jmp	.LBB75_23
	.p2align	4, 0x90
.LBB75_25:
	decq	%r14
	je	.LBB75_26
.LBB75_23:
	movb	%r15b, 87(%rsp)
	movq	%r12, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB75_25
	movq	48(%rdi), %rcx
	movq	$0, 88(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rdi)
	jmp	.LBB75_25
.LBB75_28:
	leaq	-2(%rbx), %rdx
	shldq	$63, %rdx, %rdx
	cmpq	$7, %rdx
	ja	.LBB75_35
	movl	$185, %r8d
	btq	%rdx, %r8
	jae	.LBB75_35
	movq	536(%rsp), %rdx
	xorl	%r8d, %r8d
	cmpb	$0, 4(%rdi)
	je	.LBB75_32
	cmpb	$0, 3(%rdi)
	movzbl	%cl, %ecx
	cmovel	%ecx, %r8d
.LBB75_32:
	leal	2(%r8), %ecx
	cmpb	$0, 1(%rdi)
	movzbl	%r8b, %r8d
	movzbl	%cl, %ecx
	cmovel	%r8d, %ecx
	leaq	(%rsp,%rax), %r8
	addq	$160, %r8
	movl	$256, %r9d
	subq	%rax, %r9
	movq	%r8, 128(%rsp)
	movq	%r9, 136(%rsp)
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 112(%rsp)
	movq	%rsi, 64(%rsp)
	movb	%cl, 56(%rsp)
	movq	%rdx, 48(%rsp)
	movq	%r15, 40(%rsp)
	movb	%bpl, 32(%rsp)
	leaq	112(%rsp), %rcx
	leaq	128(%rsp), %rdx
	movq	%r14, %r8
	movq	%rbx, %r9
	callq	strconv.append_bits
	movaps	112(%rsp), %xmm0
	movups	%xmm0, 144(%rsp)
	movzbl	3(%rdi), %ebx
	movb	$0, 3(%rdi)
	leaq	144(%rsp), %rdx
	movq	%rdi, %rcx
	movq	%rsi, %r8
	callq	fmt._pad
	movb	%bl, 3(%rdi)
	jmp	.LBB75_27
.LBB75_26:
	movb	%bpl, 3(%rdi)
.LBB75_27:
	addq	$424, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB75_35:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$1bb(%rip), %rdx
	leaq	.Lggv$1b5(%rip), %r8
	movq	%rsi, %r9
	callq	*%r10
.LBB75_33:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$30(%rip), %rdx
	leaq	.Lggv$2f(%rip), %r8
	movq	%rsi, %r9
	callq	*%r10
.LBB75_34:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$1b9(%rip), %rdx
	leaq	.Lggv$1b3(%rip), %r8
	movq	%rsi, %r9
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI75_0:
	.long	.LBB75_10-.LJTI75_0
	.long	.LBB75_19-.LJTI75_0
	.long	.LBB75_19-.LJTI75_0
	.long	.LBB75_12-.LJTI75_0
	.long	.LBB75_19-.LJTI75_0
	.long	.LBB75_12-.LJTI75_0
	.long	.LBB75_19-.LJTI75_0
	.long	.LBB75_14-.LJTI75_0
	.text
	.seh_endproc

	.def	fmt._fmt_int_128;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt._fmt_int_128:
.seh_proc fmt._fmt_int_128
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$568, %rsp
	.seh_stackalloc 568
	.seh_endprologue
	movl	%r9d, %r12d
	movq	%r8, %rbx
	movq	%rdx, %r14
	movq	%rcx, %rdi
	movq	680(%rsp), %r13
	cmpb	$0, 5(%rcx)
	jne	.LBB76_2
	cmpb	$0, 6(%rdi)
	je	.LBB76_3
.LBB76_2:
	movq	16(%rdi), %rax
	movq	24(%rdi), %rcx
	addq	%rcx, %rax
	addq	$3, %rax
	cmpq	$257, %rax
	jge	.LBB76_77
.LBB76_3:
	pxor	%xmm0, %xmm0
	movdqa	%xmm0, 544(%rsp)
	movdqa	%xmm0, 528(%rsp)
	movdqa	%xmm0, 512(%rsp)
	movdqa	%xmm0, 496(%rsp)
	movdqa	%xmm0, 480(%rsp)
	movdqa	%xmm0, 464(%rsp)
	movdqa	%xmm0, 448(%rsp)
	movdqa	%xmm0, 432(%rsp)
	movdqa	%xmm0, 416(%rsp)
	movdqa	%xmm0, 400(%rsp)
	movdqa	%xmm0, 384(%rsp)
	movdqa	%xmm0, 368(%rsp)
	movdqa	%xmm0, 352(%rsp)
	movdqa	%xmm0, 336(%rsp)
	movdqa	%xmm0, 320(%rsp)
	movdqa	%xmm0, 304(%rsp)
	xorl	%r8d, %r8d
	cmpb	$0, 4(%rdi)
	movb	$1, %al
	je	.LBB76_16
	testb	%r12b, %r12b
	jne	.LBB76_16
	leaq	-2(%rbx), %rcx
	shldq	$63, %rcx, %rcx
	xorl	%r8d, %r8d
	cmpq	$7, %rcx
	ja	.LBB76_16
	leaq	.LJTI76_0(%rip), %rdx
	movslq	(%rdx,%rcx,4), %rcx
	addq	%rdx, %rcx
	jmpq	*%rcx
.LBB76_9:
	movb	$48, 71(%rsp)
	leaq	71(%rsp), %rsi
	movq	%rsi, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB76_15
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	leaq	72(%rsp), %r15
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	$111, 71(%rsp)
	jmp	.LBB76_13
.LBB76_7:
	movb	$48, 71(%rsp)
	leaq	71(%rsp), %rsi
	movq	%rsi, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB76_15
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	leaq	72(%rsp), %r15
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	$98, 71(%rsp)
	jmp	.LBB76_13
.LBB76_11:
	movb	$48, 71(%rsp)
	leaq	71(%rsp), %rsi
	movq	%rsi, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB76_15
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	leaq	72(%rsp), %r15
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	$120, 71(%rsp)
.LBB76_13:
	movq	%rsi, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB76_15
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
.LBB76_15:
	movl	$2, %r8d
	xorl	%eax, %eax
.LBB76_16:
	cmpb	$0, 6(%rdi)
	je	.LBB76_26
	cmpq	$0, 24(%rdi)
	jne	.LBB76_26
	movq	(%r14), %rcx
	orq	8(%r14), %rcx
	je	.LBB76_19
.LBB76_26:
	leaq	-2(%rbx), %rdx
	shldq	$63, %rdx, %rdx
	cmpq	$7, %rdx
	ja	.LBB76_78
	movl	$185, %ecx
	btq	%rdx, %rcx
	jae	.LBB76_78
	movzbl	4(%rdi), %r9d
	xorl	%ecx, %ecx
	movb	%r9b, 87(%rsp)
	testb	%r9b, %r9b
	je	.LBB76_30
	cmpb	$0, 3(%rdi)
	movzbl	%al, %eax
	cmovel	%eax, %ecx
.LBB76_30:
	leal	2(%rcx), %eax
	cmpb	$0, 1(%rdi)
	movzbl	%cl, %ecx
	movzbl	%al, %esi
	cmovel	%ecx, %esi
	pxor	%xmm0, %xmm0
	movdqu	%xmm0, 220(%rsp)
	movdqa	%xmm0, 208(%rsp)
	movdqa	%xmm0, 192(%rsp)
	movdqa	%xmm0, 176(%rsp)
	movdqa	%xmm0, 160(%rsp)
	movdqa	%xmm0, 144(%rsp)
	movdqa	%xmm0, 128(%rsp)
	movdqa	%xmm0, 112(%rsp)
	movdqa	%xmm0, 96(%rsp)
	movq	(%r14), %r15
	movq	8(%r14), %rax
	testb	%r12b, %r12b
	movq	%rdx, 88(%rsp)
	je	.LBB76_31
	movq	%rax, %rdx
	shrq	$63, %rdx
	movq	%rax, %rcx
	sarq	$63, %rcx
	xorq	%rcx, %rax
	xorq	%rcx, %r15
	subq	%rcx, %r15
	sbbq	%rcx, %rax
	jmp	.LBB76_33
.LBB76_31:
	xorl	%edx, %edx
.LBB76_33:
	movq	672(%rsp), %rbp
	cmpq	%rbx, %r15
	movq	%rax, %rcx
	sbbq	$0, %rcx
	jae	.LBB76_35
	leaq	235(%rsp), %rax
	movq	8(%rbp), %rcx
	movl	$140, %r9d
	movl	$139, %r14d
	jmp	.LBB76_41
.LBB76_35:
	movq	%rdx, 240(%rsp)
	movq	%r8, 248(%rsp)
	movl	$139, %r14d
	leaq	272(%rsp), %r12
	leaq	256(%rsp), %r13
	.p2align	4, 0x90
.LBB76_36:
	movq	%r15, 272(%rsp)
	movq	%rbx, 256(%rsp)
	movq	%rax, 280(%rsp)
	movq	$0, 264(%rsp)
	movq	%r12, %rcx
	movq	%r13, %rdx
	callq	__udivti3
	cmpq	$140, %r14
	jae	.LBB76_79
	movq	%xmm0, %rdx
	movl	%edx, %eax
	imull	%ebx, %eax
	subl	%eax, %r15d
	movq	8(%rbp), %rcx
	cmpq	%rcx, %r15
	jae	.LBB76_80
	pextrq	$1, %xmm0, %rax
	movq	(%rbp), %r8
	movzbl	(%r8,%r15), %r8d
	movb	%r8b, 96(%rsp,%r14)
	decq	%r14
	cmpq	%rbx, %rdx
	movq	%rax, %r8
	sbbq	$0, %r8
	movq	%rdx, %r15
	jae	.LBB76_36
	cmpq	$140, %r14
	jae	.LBB76_81
	leaq	(%rsp,%r14), %rax
	addq	$96, %rax
	leaq	1(%r14), %r9
	movq	%rdx, %r15
	movq	680(%rsp), %r13
	movq	248(%rsp), %r8
	movq	240(%rsp), %rdx
.LBB76_41:
	cmpq	%r15, %rcx
	jbe	.LBB76_82
	movq	(%rbp), %rcx
	movzbl	(%rcx,%r15), %ecx
	movb	%cl, (%rax)
	testb	$1, %sil
	jne	.LBB76_44
	movq	88(%rsp), %r12
	jmp	.LBB76_57
.LBB76_44:
	movq	88(%rsp), %r12
	cmpq	$7, %r12
	ja	.LBB76_57
	leaq	.LJTI76_1(%rip), %rax
	movslq	(%rax,%r12,4), %rcx
	addq	%rax, %rcx
	jmpq	*%rcx
.LBB76_46:
	addq	$-2, %r9
	movb	$98, %al
	cmpq	$140, %r9
	jb	.LBB76_55
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$188, %edx
	movl	$20, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_19:
	movzbl	3(%rdi), %esi
	movb	$0, 3(%rdi)
	movq	16(%rdi), %r14
	testq	%r14, %r14
	jle	.LBB76_24
	cmpb	$0, 2(%rdi)
	sete	%bpl
	shlb	$4, %bpl
	orb	$32, %bpl
	leaq	71(%rsp), %r15
	leaq	72(%rsp), %r12
	leaq	96(%rsp), %rbx
	jmp	.LBB76_21
	.p2align	4, 0x90
.LBB76_23:
	decq	%r14
	je	.LBB76_24
.LBB76_21:
	movb	%bpl, 71(%rsp)
	movq	%r15, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB76_23
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
	jmp	.LBB76_23
.LBB76_24:
	movb	%sil, 3(%rdi)
	jmp	.LBB76_25
.LBB76_50:
	addq	$-2, %r9
	movb	$100, %al
	cmpq	$140, %r9
	jb	.LBB76_55
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$190, %edx
	movl	$20, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_48:
	addq	$-2, %r9
	movb	$111, %al
	cmpq	$140, %r9
	jb	.LBB76_55
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$189, %edx
	movl	$20, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_52:
	addq	$-2, %r9
	movb	$122, %al
	cmpq	$140, %r9
	jb	.LBB76_55
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$191, %edx
	movl	$20, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_54:
	addq	$-2, %r9
	movb	$120, %al
	cmpq	$140, %r9
	jae	.LBB76_83
.LBB76_55:
	movb	%al, 96(%rsp,%r9)
	movq	%r9, %r14
	decq	%r14
	cmpq	$140, %r14
	jae	.LBB76_84
	movb	$48, 96(%rsp,%r14)
.LBB76_57:
	testb	%dl, %dl
	je	.LBB76_58
	decq	%r14
	movb	$45, %al
	cmpq	$140, %r14
	jb	.LBB76_64
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$202, %edx
	jmp	.LBB76_63
.LBB76_58:
	testb	$2, %sil
	je	.LBB76_65
	decq	%r14
	movb	$43, %al
	cmpq	$140, %r14
	jae	.LBB76_60
.LBB76_64:
	movb	%al, 96(%rsp,%r14)
.LBB76_65:
	movl	$256, %r15d
	leaq	(%rsp,%r8), %rbx
	addq	$304, %rbx
	subq	%r8, %r15
	movl	$140, %esi
	subq	%r14, %rsi
	cmpq	%rsi, %r15
	movq	%rsi, %r8
	cmovlq	%r15, %r8
	testq	%r8, %r8
	jle	.LBB76_67
	leaq	(%rsp,%r14), %rdx
	addq	$96, %rdx
	movq	%rbx, %rcx
	callq	memcpy
.LBB76_67:
	cmpq	%r15, %rsi
	jg	.LBB76_85
	movq	%rbx, 288(%rsp)
	movq	%rsi, 296(%rsp)
	cmpb	$0, 87(%rsp)
	je	.LBB76_76
	cmpb	$0, 3(%rdi)
	je	.LBB76_76
	cmpq	$0, 32(%rdi)
	jne	.LBB76_76
	cmpq	$7, %r12
	ja	.LBB76_76
	movl	$169, %eax
	btl	%r12d, %eax
	jae	.LBB76_76
	movb	$48, 71(%rsp)
	leaq	71(%rsp), %rsi
	movq	%rsi, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB76_76
	leal	(,%r12,8), %ecx
	movabsq	$8674630395463098978, %r14
	shrq	%cl, %r14
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	leaq	72(%rsp), %rbx
	movq	%rbx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	40(%rdi), %rax
	movb	%r14b, 71(%rsp)
	movq	%rsi, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB76_76
	movq	48(%rdi), %rcx
	movq	$0, 72(%rsp)
	movq	%r13, 48(%rsp)
	movq	%rbx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rdi)
.LBB76_76:
	movzbl	3(%rdi), %ebx
	movb	$0, 3(%rdi)
	leaq	288(%rsp), %rdx
	movq	%rdi, %rcx
	movq	%r13, %r8
	callq	fmt._pad
	movb	%bl, 3(%rdi)
.LBB76_25:
	addq	$568, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB76_80:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$181, %edx
	movl	$17, %r8d
	movq	%r15, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_79:
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$181, %edx
	movl	$5, %r8d
	movq	%r14, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_82:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$183, %edx
	movl	$22, %r8d
	movq	%r15, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_85:
	movq	%r15, 40(%rsp)
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$209, %edx
	movl	$19, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB76_81:
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$183, %edx
	movl	$10, %r8d
	movq	%r14, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_84:
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$196, %edx
	movl	$12, %r8d
	movq	%r14, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_60:
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$204, %edx
.LBB76_63:
	movl	$11, %r8d
	movq	%r14, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_83:
	movq	$140, 32(%rsp)
	leaq	.Lggv$a8(%rip), %rcx
	movl	$192, %edx
	movl	$20, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB76_78:
	movq	32(%r13), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$1bb(%rip), %rdx
	leaq	.Lggv$1ba(%rip), %r8
	movq	%r13, %r9
	callq	*%r10
.LBB76_77:
	movq	32(%r13), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$1b9(%rip), %rdx
	leaq	.Lggv$1b8(%rip), %r8
	movq	%r13, %r9
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI76_0:
	.long	.LBB76_7-.LJTI76_0
	.long	.LBB76_16-.LJTI76_0
	.long	.LBB76_16-.LJTI76_0
	.long	.LBB76_9-.LJTI76_0
	.long	.LBB76_16-.LJTI76_0
	.long	.LBB76_9-.LJTI76_0
	.long	.LBB76_16-.LJTI76_0
	.long	.LBB76_11-.LJTI76_0
.LJTI76_1:
	.long	.LBB76_46-.LJTI76_1
	.long	.LBB76_57-.LJTI76_1
	.long	.LBB76_57-.LJTI76_1
	.long	.LBB76_48-.LJTI76_1
	.long	.LBB76_50-.LJTI76_1
	.long	.LBB76_52-.LJTI76_1
	.long	.LBB76_57-.LJTI76_1
	.long	.LBB76_54-.LJTI76_1
	.text
	.seh_endproc

	.def	reflect.relative_pointer_to_absolute_raw;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
reflect.relative_pointer_to_absolute_raw:
	xorl	%eax, %eax
	movabsq	$4683743612465315848, %r8
	cmpq	%r8, %rdx
	jg	.LBB77_4
	movabsq	$-72057594037928059, %r8
	addq	%rdx, %r8
	cmpq	$16, %r8
	ja	.LBB77_2
	leaq	.LJTI77_1(%rip), %rdx
	movslq	(%rdx,%r8,4), %r8
	addq	%rdx, %r8
	jmpq	*%r8
.LBB77_15:
	movzwl	(%rcx), %edx
	movl	%edx, %eax
	rolw	$8, %ax
	movzwl	%ax, %r8d
	jmp	.LBB77_16
.LBB77_4:
	movabsq	$-4683743612465315978, %r8
	addq	%rdx, %r8
	cmpq	$10, %r8
	ja	.LBB77_5
	leaq	.LJTI77_3(%rip), %rdx
	movslq	(%rdx,%r8,4), %r8
	addq	%rdx, %r8
	jmpq	*%r8
.LBB77_21:
	movq	(%rcx), %rdx
	movq	%rdx, %rax
	bswapq	%rax
	addq	%rcx, %rax
	testq	%rdx, %rdx
	cmoveq	%rdx, %rax
.LBB77_22:
	retq
.LBB77_2:
	movabsq	$-72057594037927938, %r8
	addq	%r8, %rdx
	cmpq	$29, %rdx
	ja	.LBB77_22
	leaq	.LJTI77_0(%rip), %r8
	movslq	(%r8,%rdx,4), %rdx
	addq	%r8, %rdx
	jmpq	*%rdx
.LBB77_7:
	movzbl	(%rcx), %eax
	jmp	.LBB77_8
.LBB77_5:
	movabsq	$-4683743612465315849, %r8
	addq	%r8, %rdx
	cmpq	$17, %rdx
	ja	.LBB77_22
	leaq	.LJTI77_2(%rip), %r8
	movslq	(%r8,%rdx,4), %rdx
	addq	%r8, %rdx
	jmpq	*%rdx
.LBB77_13:
	movslq	(%rcx), %rax
	jmp	.LBB77_8
.LBB77_14:
	movq	(%rcx), %rax
	jmp	.LBB77_8
.LBB77_11:
	movl	(%rcx), %eax
	jmp	.LBB77_8
.LBB77_10:
	movzwl	(%rcx), %eax
	jmp	.LBB77_8
.LBB77_12:
	movswq	(%rcx), %rax
	jmp	.LBB77_8
.LBB77_17:
	movl	(%rcx), %edx
	movl	%edx, %r8d
	bswapl	%r8d
	jmp	.LBB77_18
.LBB77_19:
	movzwl	(%rcx), %edx
	movl	%edx, %eax
	rolw	$8, %ax
	movswq	%ax, %r8
.LBB77_16:
	addq	%rcx, %r8
	xorl	%eax, %eax
	testw	%dx, %dx
	cmovneq	%r8, %rax
	retq
.LBB77_20:
	movl	(%rcx), %edx
	movl	%edx, %eax
	bswapl	%eax
	movslq	%eax, %r8
.LBB77_18:
	addq	%rcx, %r8
	xorl	%eax, %eax
	testl	%edx, %edx
	cmovneq	%r8, %rax
	retq
.LBB77_9:
	movsbq	(%rcx), %rax
.LBB77_8:
	addq	%rax, %rcx
	testq	%rax, %rax
	cmoveq	%rax, %rcx
	movq	%rcx, %rax
	retq
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI77_0:
	.long	.LBB77_7-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_10-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_11-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_22-.LJTI77_0
	.long	.LBB77_14-.LJTI77_0
.LJTI77_1:
	.long	.LBB77_15-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_10-.LJTI77_1
	.long	.LBB77_14-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_21-.LJTI77_1
	.long	.LBB77_11-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_22-.LJTI77_1
	.long	.LBB77_17-.LJTI77_1
.LJTI77_2:
	.long	.LBB77_12-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_13-.LJTI77_2
	.long	.LBB77_14-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_22-.LJTI77_2
	.long	.LBB77_13-.LJTI77_2
.LJTI77_3:
	.long	.LBB77_21-.LJTI77_3
	.long	.LBB77_22-.LJTI77_3
	.long	.LBB77_22-.LJTI77_3
	.long	.LBB77_9-.LJTI77_3
	.long	.LBB77_22-.LJTI77_3
	.long	.LBB77_22-.LJTI77_3
	.long	.LBB77_22-.LJTI77_3
	.long	.LBB77_20-.LJTI77_3
	.long	.LBB77_14-.LJTI77_3
	.long	.LBB77_12-.LJTI77_3
	.long	.LBB77_19-.LJTI77_3

	.def	fmt._fmt_memory;
	.scl	3;
	.type	32;
	.endef
	.globl	__real@3ff0000000000000
	.section	.rdata,"dr",discard,__real@3ff0000000000000
	.p2align	3, 0x0
__real@3ff0000000000000:
	.quad	0x3ff0000000000000
	.globl	__xmm@00000000000000004530000043300000
	.section	.rdata,"dr",discard,__xmm@00000000000000004530000043300000
	.p2align	4, 0x0
__xmm@00000000000000004530000043300000:
	.long	1127219200
	.long	1160773632
	.long	0
	.long	0
	.globl	__xmm@45300000000000004330000000000000
	.section	.rdata,"dr",discard,__xmm@45300000000000004330000000000000
	.p2align	4, 0x0
__xmm@45300000000000004330000000000000:
	.quad	0x4330000000000000
	.quad	0x4530000000000000
	.globl	__xmm@80000000000000008000000000000000
	.section	.rdata,"dr",discard,__xmm@80000000000000008000000000000000
	.p2align	4, 0x0
__xmm@80000000000000008000000000000000:
	.quad	0x8000000000000000
	.quad	0x8000000000000000
	.text
	.p2align	4, 0x90
fmt._fmt_memory:
.seh_proc fmt._fmt_memory
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$376, %rsp
	.seh_stackalloc 376
	.seh_endprologue
	movq	%rcx, %rdi
	movq	488(%rsp), %r14
	testb	%r8b, %r8b
	je	.LBB78_1
	addq	$-8, %r9
	shldq	$61, %r9, %r9
	cmpq	$7, %r9
	ja	.LBB78_6
	leaq	.LJTI78_0(%rip), %rax
	movslq	(%rax,%r9,4), %rcx
	addq	%rax, %rcx
	jmpq	*%rcx
.LBB78_14:
	movsbq	%dl, %rcx
	shrb	$7, %dl
	movl	%edx, %eax
	movq	%rcx, %rdx
	negq	%rdx
	cmovsq	%rcx, %rdx
	movq	24(%rdi), %rcx
	jmp	.LBB78_15
.LBB78_1:
	xorl	%eax, %eax
.LBB78_8:
	cmpb	$0, 6(%rdi)
	jne	.LBB78_10
	movl	$2, %ecx
	cmpq	$1023, %rdx
	ja	.LBB78_11
.LBB78_10:
	movq	24(%rdi), %rcx
	cmpq	$1024, %rdx
	jb	.LBB78_15
.LBB78_11:
	movl	$1, %r8d
	xorl	%ebx, %ebx
	movl	$3, %r9d
	movl	$2, %r10d
	movl	$1, %r15d
	movq	%rdx, %rsi
	movq	%rdx, %r11
	.p2align	4, 0x90
.LBB78_12:
	shlq	$10, %r8
	addq	$4, %rbx
	cmpq	$1, %r15
	cmoveq	%r9, %r15
	cmoveq	%r10, %rbx
	shrq	$10, %r11
	cmpq	$1048575, %rsi
	movq	%r11, %rsi
	ja	.LBB78_12
	cvtsi2sd	%r8, %xmm0
	jmp	.LBB78_16
.LBB78_15:
	movsd	__real@3ff0000000000000(%rip), %xmm0
	movl	$1, %r15d
	xorl	%ebx, %ebx
.LBB78_16:
	xorl	%r12d, %r12d
	xorl	%ebp, %ebp
	cmpb	$0, 4(%rdi)
	sete	%sil
	movq	%rdx, %xmm1
	punpckldq	__xmm@00000000000000004530000043300000(%rip), %xmm1
	setne	%r13b
	subpd	__xmm@45300000000000004330000000000000(%rip), %xmm1
	movapd	%xmm1, %xmm2
	unpckhpd	%xmm1, %xmm2
	addsd	%xmm1, %xmm2
	divsd	%xmm0, %xmm2
	testb	%al, %al
	je	.LBB78_18
	xorpd	__xmm@80000000000000008000000000000000(%rip), %xmm2
.LBB78_18:
	xorpd	%xmm0, %xmm0
	movapd	%xmm0, 352(%rsp)
	movapd	%xmm0, 336(%rsp)
	movapd	%xmm0, 320(%rsp)
	movapd	%xmm0, 304(%rsp)
	movapd	%xmm0, 288(%rsp)
	movapd	%xmm0, 272(%rsp)
	movapd	%xmm0, 256(%rsp)
	movapd	%xmm0, 240(%rsp)
	movapd	%xmm0, 224(%rsp)
	movapd	%xmm0, 208(%rsp)
	movapd	%xmm0, 192(%rsp)
	movapd	%xmm0, 176(%rsp)
	movapd	%xmm0, 160(%rsp)
	movapd	%xmm0, 144(%rsp)
	movapd	%xmm0, 128(%rsp)
	movapd	%xmm0, 112(%rsp)
	leaq	112(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$256, 104(%rsp)
	movapd	%xmm0, 80(%rsp)
	movq	%r14, 48(%rsp)
	movq	%rcx, 32(%rsp)
	movq	$64, 40(%rsp)
	leaq	80(%rsp), %rcx
	leaq	96(%rsp), %rdx
	movb	$102, %r9b
	callq	strconv.append_float
	movq	88(%rsp), %r14
	cmpq	$257, %r14
	jae	.LBB78_33
	movb	%r13b, %bpl
	movb	%sil, %r12b
	addq	%rbp, %r15
	addq	%r12, %rbx
	movq	480(%rsp), %rax
	leaq	(%rbx,%r15), %rcx
	movq	8(%rax), %rdx
	testq	%rbx, %rbx
	js	.LBB78_34
	cmpq	%rdx, %rbx
	jg	.LBB78_34
	cmpq	%rcx, %rbx
	jg	.LBB78_34
	cmpq	%rdx, %rcx
	jg	.LBB78_34
	movl	$256, %r8d
	subq	%r14, %r8
	cmpq	%r15, %r8
	cmovgeq	%r15, %r8
	testq	%r8, %r8
	jle	.LBB78_25
	leaq	(%rsp,%r14), %rcx
	addq	$112, %rcx
	addq	(%rax), %rbx
	movq	%rbx, %rdx
	callq	memmove
.LBB78_25:
	addq	%r15, %r14
	cmpq	$257, %r14
	jae	.LBB78_35
	leaq	112(%rsp), %rax
	movq	%rax, 64(%rsp)
	movq	%r14, 72(%rsp)
	cmpb	$0, 1(%rdi)
	jne	.LBB78_32
	testq	%r14, %r14
	je	.LBB78_36
	cmpb	$43, 112(%rsp)
	jne	.LBB78_32
	cmpq	$1, %r14
	je	.LBB78_37
	cmpb	$73, 113(%rsp)
	je	.LBB78_32
	leaq	113(%rsp), %rax
	decq	%r14
	movq	%rax, 64(%rsp)
	movq	%r14, 72(%rsp)
.LBB78_32:
	leaq	64(%rsp), %rdx
	movq	%rdi, %rcx
	movq	488(%rsp), %r8
	callq	fmt._pad
	nop
	addq	$376, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB78_5:
	movq	%rdx, %rax
	shrq	$63, %rax
	movq	%rdx, %rcx
	negq	%rcx
	cmovnsq	%rcx, %rdx
	jmp	.LBB78_8
.LBB78_7:
	movzwl	%dx, %eax
	shrl	$15, %eax
	movswq	%dx, %rcx
	movq	%rcx, %rdx
	negq	%rdx
	cmovsq	%rcx, %rdx
	jmp	.LBB78_8
.LBB78_4:
	movl	%edx, %eax
	shrl	$31, %eax
	movl	%edx, %ecx
	negl	%ecx
	cmovnsl	%ecx, %edx
	jmp	.LBB78_8
.LBB78_33:
	movq	$256, 40(%rsp)
	movq	$256, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1241, %edx
	movl	$10, %r8d
	movq	%r14, %r9
	callq	runtime.slice_handle_error
.LBB78_34:
	movq	%rdx, 40(%rsp)
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1241, %edx
	movl	$28, %r8d
	movq	%rbx, %r9
	callq	runtime.slice_handle_error
.LBB78_35:
	movq	%r14, 32(%rsp)
	movq	$256, 40(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1242, %edx
	movl	$18, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB78_36:
	movq	$0, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1246, %edx
	movl	$10, %r8d
	xorl	%r9d, %r9d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB78_37:
	movq	$1, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1, %r9d
	movl	$1246, %edx
	movl	$27, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB78_6:
	movq	32(%r14), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$30(%rip), %rdx
	leaq	.Lggv$2f(%rip), %r8
	movq	%r14, %r9
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI78_0:
	.long	.LBB78_14-.LJTI78_0
	.long	.LBB78_7-.LJTI78_0
	.long	.LBB78_6-.LJTI78_0
	.long	.LBB78_4-.LJTI78_0
	.long	.LBB78_6-.LJTI78_0
	.long	.LBB78_6-.LJTI78_0
	.long	.LBB78_6-.LJTI78_0
	.long	.LBB78_5-.LJTI78_0
	.text
	.seh_endproc

	.def	fmt.fmt_rune;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_rune:
.seh_proc fmt.fmt_rune
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	leal	-99(%r8), %eax
	cmpl	$20, %eax
	ja	.LBB79_4
	movl	$557057, %r10d
	btl	%eax, %r10d
	jae	.LBB79_2
	leaq	40(%rcx), %rax
	addq	$112, %rcx
	movq	%r9, 32(%rsp)
	leaq	56(%rsp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	callq	io.write_rune
	jmp	.LBB79_5
.LBB79_2:
	movl	$1064960, %r10d
	btl	%eax, %r10d
	jae	.LBB79_4
	leaq	40(%rcx), %rax
	movq	%rcx, %rsi
	movq	%rax, %rcx
	movq	%r9, %r8
	callq	io.write_quoted_rune
	addq	%rax, 112(%rsi)
	jmp	.LBB79_5
.LBB79_4:
	movslq	%edx, %rdx
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$32, %r9d
	xorl	%r8d, %r8d
	callq	fmt.fmt_int
.LBB79_5:
	nop
	addq	$64, %rsp
	popq	%rsi
	retq
	.seh_endproc

	.def	fmt.fmt_int;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_int:
.seh_proc fmt.fmt_int
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movq	%r9, %rsi
	movl	%r8d, %r9d
	movq	152(%rsp), %r8
	movl	144(%rsp), %eax
	leal	-77(%rax), %r10d
	cmpl	$45, %r10d
	ja	.LBB80_24
	leaq	.LJTI80_0(%rip), %r11
	movslq	(%r11,%r10,4), %r10
	addq	%r11, %r10
	jmpq	*%r10
.LBB80_4:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	movl	$10, %r8d
	callq	fmt._fmt_int
	jmp	.LBB80_26
.LBB80_10:
	cmpl	$114, %eax
	je	.LBB80_13
	cmpl	$113, %eax
	je	.LBB80_25
	cmpl	$99, %eax
	jne	.LBB80_14
.LBB80_13:
	leaq	40(%rcx), %rax
	addq	$112, %rcx
	movq	%r8, 32(%rsp)
	leaq	64(%rsp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	callq	io.write_rune
	jmp	.LBB80_26
.LBB80_5:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	movl	$12, %r8d
	callq	fmt._fmt_int
	jmp	.LBB80_26
.LBB80_23:
	movq	%r8, 40(%rsp)
	leaq	fmt.__MEMORY_UPPER(%rip), %rax
	jmp	.LBB80_22
.LBB80_2:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	movl	$2, %r8d
	callq	fmt._fmt_int
	jmp	.LBB80_26
.LBB80_9:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	jmp	.LBB80_7
.LBB80_15:
	cmpl	$1114112, %edx
	jb	.LBB80_18
	movl	$85, %edx
	jmp	.LBB80_17
.LBB80_6:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %rax
.LBB80_7:
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	movl	$16, %r8d
	callq	fmt._fmt_int
	jmp	.LBB80_26
.LBB80_21:
	movq	%r8, 40(%rsp)
	leaq	fmt.__MEMORY_LOWER(%rip), %rax
.LBB80_22:
	movq	%rax, 32(%rsp)
	movl	%r9d, %r8d
	movq	%rsi, %r9
	callq	fmt._fmt_memory
	jmp	.LBB80_26
.LBB80_3:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	movl	$8, %r8d
	callq	fmt._fmt_int
	jmp	.LBB80_26
.LBB80_24:
	movl	%eax, %edx
.LBB80_17:
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	fmt.fmt_bad_verb
.LBB80_18:
	movq	40(%rcx), %r10
	testq	%r10, %r10
	je	.LBB80_20
	movq	48(%rcx), %rax
	movq	$0, 64(%rsp)
	movq	%r8, 48(%rsp)
	leaq	64(%rsp), %r9
	movq	%r9, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1c6(%rip), %r9
	movq	%rdx, %rdi
	movl	$4, %edx
	movq	%rcx, %rbx
	movq	%rax, %rcx
	movq	%r8, %r14
	movq	%r9, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%r14, %r8
	movq	%rdi, %rdx
	movq	%rbx, %rcx
	movq	64(%rsp), %rax
	addq	%rax, 112(%rbx)
.LBB80_20:
	movq	%r8, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	%rsi, 32(%rsp)
	movl	$16, %r8d
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	jmp	.LBB80_26
.LBB80_25:
	leaq	40(%rcx), %rax
	movq	%rcx, %rsi
	movq	%rax, %rcx
	callq	io.write_quoted_rune
	addq	%rax, 112(%rsi)
	jmp	.LBB80_26
.LBB80_14:
	movslq	%edx, %rdx
	movq	%r8, 40(%rsp)
	movl	%eax, 32(%rsp)
	movl	$32, %r9d
	xorl	%r8d, %r8d
	callq	fmt.fmt_int
.LBB80_26:
	nop
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI80_0:
	.long	.LBB80_23-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_15-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_9-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_2-.LJTI80_0
	.long	.LBB80_10-.LJTI80_0
	.long	.LBB80_4-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_4-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_21-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_3-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_10-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_4-.LJTI80_0
	.long	.LBB80_4-.LJTI80_0
	.long	.LBB80_6-.LJTI80_0
	.long	.LBB80_24-.LJTI80_0
	.long	.LBB80_5-.LJTI80_0
	.text
	.seh_endproc

	.def	strconv.append_float;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strconv.append_float:
.seh_proc strconv.append_float
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$1368, %rsp
	.seh_stackalloc 1368
	.seh_endprologue
	movl	%r9d, %ebx
	movq	%rdx, %rdi
	movq	%rcx, %rsi
	movq	1480(%rsp), %rax
	cmpq	$64, %rax
	je	.LBB81_4
	cmpq	$32, %rax
	jne	.LBB81_2
	cvtsd2ss	%xmm2, %xmm0
	movd	%xmm0, %r8d
	leaq	strconv._f32_info(%rip), %r13
	jmp	.LBB81_7
.LBB81_4:
	movq	%xmm2, %r8
	leaq	strconv._f64_info(%rip), %r13
	jmp	.LBB81_7
.LBB81_2:
	cmpq	$16, %rax
	jne	.LBB81_5
	movdqa	%xmm2, %xmm0
	callq	__truncdfhf2
	pextrw	$0, %xmm0, %eax
	movzwl	%ax, %r8d
	leaq	strconv._f16_info(%rip), %r13
.LBB81_7:
	movq	(%r13), %rax
	movq	8(%r13), %rdx
	leaq	(%rax,%rdx), %rcx
	cmpq	$64, %rcx
	setb	%r9b
	movq	%r8, %r10
	shrq	%cl, %r10
	testq	%r10, %r10
	setne	%bpl
	movq	%r8, %r15
	movl	%eax, %ecx
	shrq	%cl, %r15
	andb	%r9b, %bpl
	movq	$-1, %r9
	movq	$-1, %r10
	movl	%edx, %ecx
	shlq	%cl, %r10
	cmpq	$64, %rdx
	notq	%r10
	cmovaeq	%r9, %r10
	movl	$1, %r12d
	movl	%eax, %ecx
	shlq	%cl, %r12
	xorl	%ecx, %ecx
	cmpq	$64, %rax
	cmovaeq	%rcx, %r15
	cmovaeq	%rcx, %r12
	andq	%r10, %r15
	leaq	-1(%r12), %rax
	andq	%r8, %rax
	cmpq	%r10, %r15
	jne	.LBB81_8
	xorl	%edx, %edx
	cmpq	$1, %rax
	movl	$0, %ebx
	adcq	$3, %rbx
	movq	8(%rdi), %rcx
	cmpq	%rbx, %rcx
	cmovlq	%rcx, %rbx
	testq	%rbx, %rbx
	cmovleq	%rdx, %rbx
	testq	%rcx, %rcx
	jle	.LBB81_13
	leaq	.Lcsbs$e7(%rip), %rcx
	leaq	.Lcsbs$e8(%rip), %r8
	testb	%bpl, %bpl
	cmovneq	%rcx, %r8
	testq	%rax, %rax
	leaq	.Lcsbs$e6(%rip), %rdx
	cmoveq	%r8, %rdx
	movq	(%rdi), %rcx
	movq	%rbx, %r8
	callq	memcpy
	movq	8(%rdi), %rcx
.LBB81_13:
	cmpq	%rcx, %rbx
	jle	.LBB81_59
	movq	%rcx, 40(%rsp)
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$78, %edx
	movl	$13, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB81_8:
	movq	%rdi, 72(%rsp)
	testq	%r15, %r15
	cmoveq	%r15, %r12
	orq	%rax, %r12
	cmpq	$1, %r15
	adcq	$0, %r15
	addq	16(%r13), %r15
	leaq	136(%rsp), %r14
	movl	$408, %r8d
	movq	%r14, %rcx
	xorl	%edx, %edx
	callq	memset
	movq	%r14, %rcx
	movq	%r12, %rdx
	callq	strconv_decimal.assign
	movq	%r15, %rdx
	subq	(%r13), %rdx
	movq	%r14, %rcx
	callq	strconv_decimal.shift
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	$0, 112(%rsp)
	cmpq	$0, 1472(%rsp)
	movb	%bl, 71(%rsp)
	js	.LBB81_9
	movzbl	%bl, %eax
	addl	$-69, %eax
	movabsq	$4294967297, %rcx
	btq	%rax, %rcx
	movq	1472(%rsp), %r12
	jb	.LBB81_63
	movabsq	$8589934594, %rcx
	btq	%rax, %rcx
	jae	.LBB81_55
	movq	528(%rsp), %rdx
	addq	%r12, %rdx
	movq	%r12, %rbx
	jmp	.LBB81_56
.LBB81_9:
	movq	%rsi, 128(%rsp)
	testq	%r12, %r12
	je	.LBB81_10
	movq	16(%r13), %rsi
	incq	%rsi
	cmpq	%r15, %rsi
	jge	.LBB81_17
	movq	520(%rsp), %rbx
	movq	528(%rsp), %rax
	subq	%rbx, %rax
	imulq	$332, %rax, %rax
	movq	%r15, %rcx
	subq	(%r13), %rcx
	imulq	$100, %rcx, %rcx
	cmpq	%rcx, %rax
	jge	.LBB81_49
.LBB81_17:
	leaq	544(%rsp), %r14
	movl	$408, %r8d
	movq	%r14, %rcx
	xorl	%edx, %edx
	callq	memset
	leaq	-1(,%r12,2), %rdi
	movq	%r14, %rcx
	movq	%rdi, %rdx
	callq	strconv_decimal.assign
	movq	(%r13), %rbx
	movq	%rbx, %r13
	notq	%r13
	addq	%r15, %r13
	movq	%r14, %rcx
	movq	%r13, %rdx
	callq	strconv_decimal.shift
	movl	$1, %eax
	movl	%ebx, %ecx
	shlq	%cl, %rax
	cmpq	$64, %rbx
	movl	$0, %ecx
	cmovbq	%rax, %rcx
	cmpq	%r12, %rcx
	setae	%al
	cmpq	%r15, %rsi
	setne	%sil
	andb	%al, %sil
	leaq	-1(%r12), %r15
	testb	%sil, %sil
	cmovneq	%rdi, %r15
	leaq	960(%rsp), %rbx
	movl	$408, %r8d
	movq	%rbx, %rcx
	xorl	%edx, %edx
	callq	memset
	leaq	1(,%r15,2), %rdx
	movq	%rbx, %rcx
	callq	strconv_decimal.assign
	movzbl	%sil, %eax
	subq	%rax, %r13
	movq	%rbx, %rcx
	movq	%r13, %rdx
	callq	strconv_decimal.shift
	movq	520(%rsp), %rbx
	testq	%rbx, %rbx
	jle	.LBB81_49
	movq	1344(%rsp), %rax
	movq	928(%rsp), %rcx
	xorl	%r9d, %r9d
	jmp	.LBB81_19
.LBB81_27:
	testb	%r8b, %r8b
	jne	.LBB81_28
.LBB81_47:
	movq	%rsi, %r9
	cmpq	%rbx, %rsi
	je	.LBB81_49
.LBB81_19:
	cmpq	%rax, %r9
	jge	.LBB81_22
	cmpq	$384, %r9
	jae	.LBB81_60
	movzbl	960(%rsp,%r9), %r11d
	jmp	.LBB81_23
	.p2align	4, 0x90
.LBB81_22:
	movb	$48, %r11b
	cmpq	$384, %r9
	jae	.LBB81_61
.LBB81_23:
	movb	$48, %dl
	cmpq	%rcx, %r9
	jge	.LBB81_25
	movzbl	544(%rsp,%r9), %edx
.LBB81_25:
	movzbl	136(%rsp,%r9), %r10d
	cmpb	%r10b, %r11b
	jne	.LBB81_33
	movl	%r12d, %r8d
	andl	$1, %r8d
	leaq	1(%r9), %rsi
	movq	%rsi, %r15
	xorq	%rax, %r15
	orq	%r8, %r15
	sete	%r8b
	cmpb	%dl, %r11b
	je	.LBB81_27
	jmp	.LBB81_34
	.p2align	4, 0x90
.LBB81_33:
	movb	$1, %r8b
	cmpb	%dl, %r10b
	je	.LBB81_28
.LBB81_34:
	movb	$1, %r11b
	testb	$1, %r12b
	je	.LBB81_37
	incb	%r10b
	cmpb	%dl, %r10b
	jb	.LBB81_37
	leaq	1(%r9), %rdx
	cmpq	%rcx, %rdx
	setl	%r11b
.LBB81_37:
	movl	%r8d, %edx
	andb	%r11b, %dl
	cmpb	$1, %dl
	je	.LBB81_38
	testb	%r8b, %r8b
	jne	.LBB81_28
	leaq	1(%r9), %rsi
	testb	%r11b, %r11b
	je	.LBB81_47
	cmpq	%rsi, %rbx
	jbe	.LBB81_49
	addq	$2, %r9
	movq	%r9, %rbx
.LBB81_43:
	cmpq	$1, %rbx
	je	.LBB81_46
	movzbl	134(%rsp,%rbx), %eax
	decq	%rbx
	cmpb	$56, %al
	ja	.LBB81_43
	incb	%al
	movb	%al, 135(%rsp,%rbx)
	movq	%rbx, 520(%rsp)
	jmp	.LBB81_49
.LBB81_63:
	leaq	1(%r12), %rdx
	movq	%r12, %rbx
	jmp	.LBB81_56
.LBB81_55:
	cmpq	$1, %r12
	movq	%r12, %rdx
	adcq	$0, %rdx
	movq	%rdx, %rbx
.LBB81_56:
	leaq	136(%rsp), %r14
	movq	%r14, %rcx
	callq	strconv_decimal.round
	movq	%r14, 80(%rsp)
	movq	$384, 88(%rsp)
	movups	520(%rsp), %xmm0
	movaps	%xmm0, 96(%rsp)
	movq	$0, 112(%rsp)
.LBB81_57:
	movq	72(%rsp), %rdx
.LBB81_58:
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 544(%rsp)
	movzbl	71(%rsp), %eax
	movb	%al, 48(%rsp)
	movq	%rbx, 40(%rsp)
	leaq	80(%rsp), %rax
	movq	%rax, 32(%rsp)
	shrq	$63, %r12
	leaq	544(%rsp), %rdi
	movq	%rdi, %rcx
	movl	%r12d, %r8d
	movl	%ebp, %r9d
	callq	strconv.format_digits
	movq	552(%rsp), %rbx
.LBB81_59:
	movq	(%rdi), %rax
	movq	%rax, (%rsi)
	movq	%rbx, 8(%rsi)
	movq	%rsi, %rax
	addq	$1368, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB81_10:
	movq	$0, 520(%rsp)
	xorl	%ebx, %ebx
.LBB81_49:
	movq	528(%rsp), %rax
	leaq	136(%rsp), %rcx
	movq	%rcx, 80(%rsp)
	movq	$384, 88(%rsp)
	movq	%rbx, 96(%rsp)
	movq	%rax, 104(%rsp)
	movq	$0, 112(%rsp)
	movzbl	71(%rsp), %ecx
	addl	$-69, %ecx
	movabsq	$4294967297, %rdx
	btq	%rcx, %rdx
	movq	128(%rsp), %rsi
	movq	1472(%rsp), %r12
	jb	.LBB81_62
	movabsq	$8589934594, %rdx
	btq	%rcx, %rdx
	movq	72(%rsp), %rdx
	jae	.LBB81_58
	subq	%rax, %rbx
	xorl	%eax, %eax
	testq	%rbx, %rbx
	cmovleq	%rax, %rbx
	jmp	.LBB81_58
.LBB81_62:
	decq	%rbx
	jmp	.LBB81_57
.LBB81_28:
	leaq	1(%r9), %rax
	cmpq	%rax, %rbx
	jbe	.LBB81_49
	movq	%rax, 520(%rsp)
.LBB81_30:
	cmpb	$48, 136(%rsp,%r9)
	jne	.LBB81_48
	movq	%r9, 520(%rsp)
	leaq	-1(%r9), %rbx
	incq	%r9
	cmpq	$1, %r9
	movq	%rbx, %r9
	ja	.LBB81_30
	movq	$0, 528(%rsp)
	incq	%rbx
	jmp	.LBB81_49
.LBB81_38:
	incq	%r9
	leaq	136(%rsp), %rcx
	movq	%r9, %rdx
	callq	strconv_decimal.round
	movq	520(%rsp), %rbx
	jmp	.LBB81_49
.LBB81_48:
	incq	%r9
	movq	%r9, %rbx
	jmp	.LBB81_49
.LBB81_46:
	movb	$49, 136(%rsp)
	movq	$1, 520(%rsp)
	incq	528(%rsp)
	movl	$1, %ebx
	jmp	.LBB81_49
.LBB81_61:
	movq	$384, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$307, %edx
	movl	$17, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB81_60:
	movq	$384, 32(%rsp)
	leaq	.Lggv$257(%rip), %rcx
	movl	$305, %edx
	movl	$21, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB81_5:
	movq	1488(%rsp), %r9
	movq	32(%r9), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$3c(%rip), %rdx
	leaq	.Lggv$3b(%rip), %r8
	callq	*%r10
	int3
	.seh_endproc

	.def	fmt.fmt_int_128;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_int_128:
.seh_proc fmt.fmt_int_128
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	movl	%r8d, %eax
	movq	128(%rsp), %r8
	leal	-85(%r9), %r10d
	cmpl	$37, %r10d
	ja	.LBB82_18
	leaq	.LJTI82_0(%rip), %r11
	movslq	(%r11,%r10,4), %r10
	addq	%r11, %r10
	jmpq	*%r10
.LBB82_2:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$10, %r8d
	jmp	.LBB82_15
.LBB82_3:
	movl	(%rdx), %edx
	cmpl	$114, %r9d
	je	.LBB82_6
	cmpl	$113, %r9d
	je	.LBB82_20
	cmpl	$99, %r9d
	jne	.LBB82_21
.LBB82_6:
	leaq	40(%rcx), %rax
	addq	$112, %rcx
	movq	%r8, 32(%rsp)
	leaq	56(%rsp), %r9
	movq	%rcx, %r8
	movq	%rax, %rcx
	callq	io.write_rune
	jmp	.LBB82_17
.LBB82_7:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %r8
	jmp	.LBB82_14
.LBB82_8:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$12, %r8d
	jmp	.LBB82_15
.LBB82_9:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$8, %r8d
	jmp	.LBB82_15
.LBB82_10:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_LOWER(%rip), %r8
	movq	%r8, 32(%rsp)
	movl	$2, %r8d
	jmp	.LBB82_15
.LBB82_11:
	cmpl	$1114112, (%rdx)
	jb	.LBB82_22
	movl	$85, %edx
	jmp	.LBB82_19
.LBB82_13:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %r8
.LBB82_14:
	movq	%r8, 32(%rsp)
	movl	$16, %r8d
.LBB82_15:
	movl	%eax, %r9d
.LBB82_16:
	callq	fmt._fmt_int_128
.LBB82_17:
	nop
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB82_18:
	movl	%r9d, %edx
.LBB82_19:
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	fmt.fmt_bad_verb
.LBB82_20:
	leaq	40(%rcx), %rax
	movq	%rcx, %rsi
	movq	%rax, %rcx
	callq	io.write_quoted_rune
	addq	%rax, 112(%rsi)
	jmp	.LBB82_17
.LBB82_21:
	movslq	%edx, %rdx
	movq	%r8, 40(%rsp)
	movl	%r9d, 32(%rsp)
	movl	$32, %r9d
	xorl	%r8d, %r8d
	callq	fmt.fmt_int
	jmp	.LBB82_17
.LBB82_22:
	movq	40(%rcx), %r10
	testq	%r10, %r10
	je	.LBB82_24
	movq	48(%rcx), %rax
	movq	$0, 56(%rsp)
	movq	%r8, 48(%rsp)
	leaq	56(%rsp), %r9
	movq	%r9, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1c6(%rip), %r9
	movq	%rdx, %rsi
	movl	$4, %edx
	movq	%rcx, %rdi
	movq	%rax, %rcx
	movq	%r8, %rbx
	movq	%r9, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%rbx, %r8
	movq	%rsi, %rdx
	movq	%rdi, %rcx
	movq	56(%rsp), %rax
	addq	%rax, 112(%rdi)
.LBB82_24:
	movq	%r8, 40(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 32(%rsp)
	movl	$16, %r8d
	xorl	%r9d, %r9d
	jmp	.LBB82_16
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI82_0:
	.long	.LBB82_11-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_13-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_10-.LJTI82_0
	.long	.LBB82_3-.LJTI82_0
	.long	.LBB82_2-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_2-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_9-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_3-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_2-.LJTI82_0
	.long	.LBB82_2-.LJTI82_0
	.long	.LBB82_7-.LJTI82_0
	.long	.LBB82_18-.LJTI82_0
	.long	.LBB82_8-.LJTI82_0
	.text
	.seh_endproc

	.def	fmt._pad;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt._pad:
.seh_proc fmt._pad
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$120, %rsp
	.seh_stackalloc 120
	.seh_endprologue
	movq	%r8, %rdi
	movq	%rdx, %r8
	movq	%rcx, %rsi
	cmpb	$0, 5(%rcx)
	je	.LBB83_1
	movq	16(%rsi), %r15
	movq	8(%r8), %rcx
	testq	%rcx, %rcx
	movq	%r8, 96(%rsp)
	jle	.LBB83_6
	movq	(%r8), %r8
	xorl	%edx, %edx
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %r11
	leaq	utf8.accept_ranges(%rip), %r14
	xorl	%r9d, %r9d
	.p2align	4, 0x90
.LBB83_8:
	cmpq	%rcx, %r9
	jae	.LBB83_57
	movzbl	(%r8,%r9), %r13d
	testb	%r13b, %r13b
	jns	.LBB83_10
	movzbl	(%r13,%r11), %eax
	cmpq	$241, %rax
	je	.LBB83_10
	movl	%eax, %ebp
	andl	$7, %ebp
	leaq	(%r9,%rbp), %r10
	cmpq	%rcx, %r10
	jle	.LBB83_23
	.p2align	4, 0x90
.LBB83_10:
	incq	%r9
	movq	%r9, %r10
.LBB83_11:
	incq	%rdx
	movq	%r10, %r9
	cmpq	%rcx, %r10
	jl	.LBB83_8
	jmp	.LBB83_12
.LBB83_23:
	shrb	$4, %al
	movzbl	%al, %eax
	leaq	-194(%r13), %r12
	cmpq	$51, %r12
	jae	.LBB83_58
	leaq	1(%r9), %r10
	cmpq	%rcx, %r10
	jae	.LBB83_59
	movzbl	(%r8,%r10), %ebx
	movl	$1, %r10d
	cmpb	(%r14,%rax,2), %bl
	jb	.LBB83_36
	cmpb	%bl, 1(%r14,%rax,2)
	jb	.LBB83_36
	movl	$2, %r10d
	cmpq	$30, %r12
	jb	.LBB83_36
	leaq	2(%r9), %rax
	cmpq	%rcx, %rax
	jae	.LBB83_29
	cmpb	$-65, (%r8,%rax)
	movl	$1, %r10d
	jg	.LBB83_36
	andl	$-16, %r13d
	movl	$3, %r10d
	cmpl	$224, %r13d
	je	.LBB83_36
	leaq	3(%r9), %rax
	cmpq	%rcx, %rax
	jae	.LBB83_34
	cmpb	$-64, (%r8,%rax)
	movl	$1, %eax
	cmovgeq	%rax, %rbp
	movq	%rbp, %r10
.LBB83_36:
	addq	%r9, %r10
	jmp	.LBB83_11
.LBB83_1:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_20
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
.LBB83_3:
	movl	$4, %edx
	jmp	.LBB83_4
.LBB83_6:
	xorl	%edx, %edx
.LBB83_12:
	subq	%rdx, %r15
	cmpb	$0, (%rsi)
	je	.LBB83_37
	movq	40(%rsi), %rax
	testq	%rax, %rax
	movq	96(%rsp), %r8
	je	.LBB83_15
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB83_15:
	testq	%r15, %r15
	jle	.LBB83_20
	cmpb	$0, 2(%rsi)
	sete	%bpl
	shlb	$4, %bpl
	orb	$32, %bpl
	leaq	71(%rsp), %r14
	leaq	88(%rsp), %r12
	leaq	72(%rsp), %rbx
	jmp	.LBB83_17
	.p2align	4, 0x90
.LBB83_19:
	decq	%r15
	je	.LBB83_20
.LBB83_17:
	movb	%bpl, 71(%rsp)
	movq	%r14, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_19
	movq	48(%rsi), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB83_19
.LBB83_37:
	movzbl	2(%rsi), %eax
	testq	%rcx, %rcx
	movq	96(%rsp), %rbx
	je	.LBB83_50
	testb	%al, %al
	jne	.LBB83_50
	movq	(%rbx), %rcx
	cmpb	$45, (%rcx)
	jne	.LBB83_50
	movb	$45, 71(%rsp)
	leaq	71(%rsp), %r12
	movq	%r12, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_42
	movq	48(%rsi), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	88(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB83_42:
	testq	%r15, %r15
	jle	.LBB83_47
	cmpb	$0, 2(%rsi)
	sete	%bpl
	shlb	$4, %bpl
	orb	$32, %bpl
	leaq	88(%rsp), %r13
	leaq	72(%rsp), %r14
	jmp	.LBB83_44
	.p2align	4, 0x90
.LBB83_46:
	decq	%r15
	je	.LBB83_47
.LBB83_44:
	movb	%bpl, 71(%rsp)
	movq	%r12, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_46
	movq	48(%rsi), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r14, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB83_46
.LBB83_50:
	testq	%r15, %r15
	jle	.LBB83_55
	testb	%al, %al
	sete	%bpl
	shlb	$4, %bpl
	orb	$32, %bpl
	leaq	71(%rsp), %r12
	leaq	88(%rsp), %r13
	leaq	72(%rsp), %r14
	jmp	.LBB83_52
	.p2align	4, 0x90
.LBB83_54:
	decq	%r15
	je	.LBB83_55
.LBB83_52:
	movb	%bpl, 71(%rsp)
	movq	%r12, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_54
	movq	48(%rsi), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r14, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB83_54
.LBB83_55:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_20
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
.LBB83_4:
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB83_20:
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB83_47:
	movq	8(%rbx), %rax
	testq	%rax, %rax
	jle	.LBB83_60
	movq	(%rbx), %rcx
	incq	%rcx
	decq	%rax
	movq	%rcx, 104(%rsp)
	movq	%rax, 112(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB83_20
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	104(%rsp), %r8
	jmp	.LBB83_3
.LBB83_57:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$329, %edx
	movl	$11, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB83_58:
	movq	$5, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$344, %edx
	movl	$23, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB83_59:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$345, %edx
	movl	$13, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB83_29:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$349, %edx
.LBB83_30:
	movl	$20, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB83_34:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$353, %edx
	jmp	.LBB83_30
.LBB83_60:
	movq	%rax, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1, %r9d
	movl	$1364, %edx
	movl	$31, %r8d
	callq	runtime.slice_handle_error
	int3
	.seh_endproc

	.def	fmt._fmt_float_as;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt._fmt_float_as:
.seh_proc fmt._fmt_float_as
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$536, %rsp
	.seh_stackalloc 536
	movaps	%xmm6, 512(%rsp)
	.seh_savexmm %xmm6, 512
	.seh_endprologue
	movl	%r9d, %ebx
	movq	%r8, %r14
	movaps	%xmm1, %xmm6
	movq	%rcx, %rdi
	movq	632(%rsp), %rsi
	cmpb	$0, 6(%rcx)
	je	.LBB84_1
	movq	24(%rdi), %r12
	jmp	.LBB84_3
.LBB84_1:
	movq	624(%rsp), %r12
.LBB84_3:
	leaq	126(%rsp), %r15
	movl	$386, %r8d
	movq	%r15, %rcx
	xorl	%edx, %edx
	callq	memset
	movq	%r15, 104(%rsp)
	movq	$386, 112(%rsp)
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 80(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	%r12, 32(%rsp)
	leaq	80(%rsp), %rcx
	leaq	104(%rsp), %rdx
	movaps	%xmm6, %xmm2
	movl	%ebx, %r9d
	callq	strconv.append_float
	movq	80(%rsp), %rcx
	movq	88(%rsp), %rax
	movq	%rcx, 64(%rsp)
	movq	%rax, 72(%rsp)
	cmpb	$0, 1(%rdi)
	jne	.LBB84_10
	testq	%rax, %rax
	je	.LBB84_11
	cmpb	$43, (%rcx)
	jne	.LBB84_10
	cmpq	$1, %rax
	je	.LBB84_12
	cmpb	$73, 1(%rcx)
	je	.LBB84_10
	testq	%rax, %rax
	jle	.LBB84_13
	incq	%rcx
	decq	%rax
	movq	%rcx, 64(%rsp)
	movq	%rax, 72(%rsp)
.LBB84_10:
	leaq	64(%rsp), %rdx
	movq	%rdi, %rcx
	movq	%rsi, %r8
	callq	fmt._pad
	movaps	512(%rsp), %xmm6
	addq	$536, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB84_11:
	movq	$0, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1394, %edx
	movl	$10, %r8d
	xorl	%r9d, %r9d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB84_12:
	movq	$1, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1, %r9d
	movl	$1394, %edx
	movl	$27, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB84_13:
	movq	%rax, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1, %r9d
	movl	$1395, %edx
	movl	$13, %r8d
	callq	runtime.slice_handle_error
	int3
	.seh_endproc

	.def	fmt.fmt_float;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_float:
.seh_proc fmt.fmt_float
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$208, %rsp
	.seh_stackalloc 208
	.seh_endprologue
	movl	%r9d, %edi
	movq	288(%rsp), %rsi
	leal	-69(%rdi), %eax
	cmpl	$50, %eax
	ja	.LBB85_17
	leaq	.LJTI85_0(%rip), %rdx
	movslq	(%rdx,%rax,4), %rax
	addq	%rdx, %rax
	jmpq	*%rax
.LBB85_2:
	movq	%rsi, 40(%rsp)
	movq	$-1, 32(%rsp)
	movb	$103, %r9b
	jmp	.LBB85_3
.LBB85_5:
	movq	%rsi, 40(%rsp)
	movq	$3, 32(%rsp)
	movb	$102, %r9b
	jmp	.LBB85_3
.LBB85_6:
	movq	%rsi, 40(%rsp)
	movq	$6, 32(%rsp)
	movb	$101, %r9b
.LBB85_3:
	callq	fmt._fmt_float_as
.LBB85_4:
	nop
	addq	$208, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB85_7:
	movq	112(%rcx), %rax
	movq	%rax, 192(%rsp)
	movups	96(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	movups	80(%rcx), %xmm0
	movaps	%xmm0, 160(%rsp)
	movups	64(%rcx), %xmm0
	movaps	%xmm0, 144(%rsp)
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm2
	movups	32(%rcx), %xmm3
	movups	48(%rcx), %xmm4
	movaps	%xmm4, 128(%rsp)
	movaps	%xmm3, 112(%rsp)
	movaps	%xmm2, 96(%rsp)
	movaps	%xmm0, 80(%rsp)
	movq	%r8, 16(%rcx)
	movw	$1, 3(%rcx)
	movb	$0, 1(%rcx)
	cmpq	$64, %r8
	je	.LBB85_11
	cmpq	$32, %r8
	jne	.LBB85_9
	xorps	%xmm0, %xmm0
	cvtsd2ss	%xmm1, %xmm0
	movd	%xmm0, %ebx
	jmp	.LBB85_14
.LBB85_17:
	movl	%edi, %edx
	movq	%rsi, %r8
	addq	$208, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bad_verb
.LBB85_11:
	movq	%xmm1, %rbx
	jmp	.LBB85_14
.LBB85_9:
	cmpq	$16, %r8
	jne	.LBB85_12
	movq	%rcx, %r14
	movq	%r8, %r15
	movdqa	%xmm1, %xmm0
	callq	__truncdfhf2
	pextrw	$0, %xmm0, %eax
	movzwl	%ax, %ebx
	movq	%r14, %rcx
	movq	%r15, %r8
.LBB85_14:
	movq	40(%rcx), %r10
	testq	%r10, %r10
	je	.LBB85_16
	movq	48(%rcx), %rax
	movq	$0, 56(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1d4(%rip), %r9
	movl	$4, %edx
	movq	%rcx, %r14
	movq	%rax, %rcx
	movq	%r8, %r15
	movq	%r9, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%r15, %r8
	movq	%r14, %rcx
	movq	56(%rsp), %rax
	addq	%rax, 112(%r14)
.LBB85_16:
	cmpl	$104, %edi
	leaq	fmt.__DIGITS_LOWER(%rip), %rax
	leaq	fmt.__DIGITS_LOWER+8(%rip), %rdx
	leaq	fmt.__DIGITS_UPPER(%rip), %r9
	leaq	fmt.__DIGITS_UPPER+8(%rip), %r10
	cmoveq	%rdx, %r10
	cmoveq	%rax, %r9
	movq	(%r10), %rax
	movq	(%r9), %rdx
	movq	%rdx, 64(%rsp)
	movq	%rax, 72(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	64(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	%r8, 32(%rsp)
	movl	$16, %r8d
	movq	%rcx, %rsi
	movq	%rbx, %rdx
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	movq	192(%rsp), %rax
	movq	%rax, 112(%rsi)
	movaps	176(%rsp), %xmm0
	movups	%xmm0, 96(%rsi)
	movaps	160(%rsp), %xmm0
	movups	%xmm0, 80(%rsi)
	movaps	144(%rsp), %xmm0
	movups	%xmm0, 64(%rsi)
	movaps	80(%rsp), %xmm0
	movaps	96(%rsp), %xmm1
	movaps	112(%rsp), %xmm2
	movaps	128(%rsp), %xmm3
	movups	%xmm3, 48(%rsi)
	movups	%xmm2, 32(%rsi)
	movups	%xmm1, 16(%rsi)
	movups	%xmm0, (%rsi)
	jmp	.LBB85_4
.LBB85_12:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$1d3(%rip), %rdx
	leaq	.Lggv$1d2(%rip), %r8
	movq	%rsi, %r9
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI85_0:
	.long	.LBB85_6-.LJTI85_0
	.long	.LBB85_5-.LJTI85_0
	.long	.LBB85_2-.LJTI85_0
	.long	.LBB85_7-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_6-.LJTI85_0
	.long	.LBB85_5-.LJTI85_0
	.long	.LBB85_2-.LJTI85_0
	.long	.LBB85_7-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_17-.LJTI85_0
	.long	.LBB85_2-.LJTI85_0
	.long	.LBB85_2-.LJTI85_0
	.text
	.seh_endproc

	.def	fmt.fmt_string;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_string:
.seh_proc fmt.fmt_string
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$136, %rsp
	.seh_stackalloc 136
	.seh_endprologue
	movq	%r9, %rdi
	movl	%r8d, %ebx
	movq	%rcx, %rsi
	movq	(%rdx), %rbp
	movq	8(%rdx), %rax
	movq	%rbp, 104(%rsp)
	movq	%rax, 112(%rsp)
	cmpq	$1, 96(%rcx)
	jne	.LBB86_1
	movq	88(%rsi), %rcx
	xorl	%r13d, %r13d
	testq	%rcx, %rcx
	cmovgq	%rcx, %r13
	cmpq	%rax, %r13
	cmovgeq	%rax, %r13
	testq	%rax, %rax
	js	.LBB86_74
	movq	%r13, 112(%rsp)
	cmpb	$0, 8(%rsi)
	jne	.LBB86_7
	jmp	.LBB86_5
.LBB86_1:
	movq	%rax, %r13
	cmpb	$0, 8(%rsi)
	jne	.LBB86_7
.LBB86_5:
	cmpq	$0, 80(%rsi)
	jle	.LBB86_7
	cmpl	$118, %ebx
	je	.LBB86_36
.LBB86_7:
	leal	-88(%rbx), %eax
	cmpl	$32, %eax
	ja	.LBB86_79
	movl	$1207959552, %ecx
	btq	%rax, %rcx
	jb	.LBB86_23
	movl	$2181038080, %ecx
	btq	%rax, %rcx
	jb	.LBB86_36
	movabsq	$4294967297, %rcx
	btq	%rax, %rcx
	jae	.LBB86_79
	movzbl	2(%rsi), %r12d
	movb	$0, 2(%rsi)
	testq	%r13, %r13
	jle	.LBB86_72
	movups	fmt.__DIGITS_UPPER(%rip), %xmm0
	movups	%xmm0, 120(%rsp)
	cmpl	$120, %ebx
	jne	.LBB86_14
	movups	fmt.__DIGITS_LOWER(%rip), %xmm0
	movups	%xmm0, 120(%rsp)
.LBB86_14:
	movzbl	(%rbp), %edx
	movq	%rdi, 48(%rsp)
	leaq	120(%rsp), %r15
	movq	%r15, 40(%rsp)
	movq	$8, 32(%rsp)
	movl	$16, %r8d
	movq	%rsi, %rcx
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	cmpq	$1, %r13
	je	.LBB86_72
	movl	$1, %r14d
	.p2align	4, 0x90
.LBB86_16:
	testb	%r12b, %r12b
	je	.LBB86_19
	movb	$32, 96(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB86_19
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	80(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB86_19:
	movups	fmt.__DIGITS_UPPER(%rip), %xmm0
	movups	%xmm0, 120(%rsp)
	cmpl	$120, %ebx
	jne	.LBB86_21
	movups	fmt.__DIGITS_LOWER(%rip), %xmm0
	movups	%xmm0, 120(%rsp)
.LBB86_21:
	cmpq	%r13, %r14
	jae	.LBB86_22
	movzbl	(%rbp,%r14), %edx
	movq	%rdi, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$8, 32(%rsp)
	movl	$16, %r8d
	movq	%rsi, %rcx
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	incq	%r14
	cmpq	%r13, %r14
	jl	.LBB86_16
.LBB86_72:
	movb	%r12b, 2(%rsi)
	jmp	.LBB86_73
.LBB86_36:
	movb	$34, 96(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB86_37
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %r14
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %r15
	testl	%eax, %eax
	je	.LBB86_39
.LBB86_70:
	addq	%r15, 112(%rsi)
	jmp	.LBB86_73
.LBB86_23:
	cmpb	$0, 5(%rsi)
	je	.LBB86_34
	movq	16(%rsi), %rax
	cmpq	%r13, %rax
	jle	.LBB86_34
	cmpb	$0, (%rsi)
	je	.LBB86_28
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB86_28
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	104(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%r10
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	16(%rsi), %rax
	movq	112(%rsp), %r13
.LBB86_28:
	movq	%rax, %rcx
	subq	%r13, %rcx
	testq	%rcx, %rcx
	jle	.LBB86_33
	xorl	%r14d, %r14d
	leaq	96(%rsp), %r15
	leaq	72(%rsp), %r12
	leaq	80(%rsp), %rbx
	jmp	.LBB86_30
	.p2align	4, 0x90
.LBB86_32:
	incq	%r14
	movq	%rax, %rcx
	subq	%r13, %rcx
	cmpq	%rcx, %r14
	jge	.LBB86_33
.LBB86_30:
	movb	$32, 96(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB86_32
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	16(%rsi), %rax
	movq	112(%rsp), %r13
	jmp	.LBB86_32
.LBB86_37:
	xorl	%r15d, %r15d
	addq	%r15, 112(%rsi)
	jmp	.LBB86_73
.LBB86_79:
	movq	%rsi, %rcx
	movl	%ebx, %edx
	movq	%rdi, %r8
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bad_verb
.LBB86_39:
	leaq	40(%rsi), %rbx
	testq	%r13, %r13
	jle	.LBB86_68
	.p2align	4, 0x90
.LBB86_40:
	movzbl	(%rbp), %edx
	movl	$1, %r12d
	testb	%dl, %dl
	js	.LBB86_41
.LBB86_55:
	movq	$0, 96(%rsp)
	movq	%rdi, 32(%rsp)
	movq	%rbx, %rcx
	movb	$34, %r8b
	leaq	96(%rsp), %r9
	callq	io.write_escaped_rune
	addq	96(%rsp), %r15
	testl	%eax, %eax
	je	.LBB86_66
	jmp	.LBB86_70
	.p2align	4, 0x90
.LBB86_41:
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rax
	movzbl	(%rdx,%rax), %eax
	leaq	-245(%rdx), %rcx
	cmpq	$-51, %rcx
	jae	.LBB86_42
	andl	$1, %eax
	movl	%eax, %ecx
	negl	%ecx
	decl	%eax
	andl	%edx, %eax
	andl	$65533, %ecx
	orl	%eax, %ecx
	movl	%ecx, %edx
	cmpl	$65533, %ecx
	jne	.LBB86_55
	jmp	.LBB86_57
.LBB86_42:
	movl	%eax, %ecx
	andl	$7, %ecx
	cmpq	%rcx, %r13
	jae	.LBB86_43
.LBB86_57:
	movb	$92, 71(%rsp)
	leaq	71(%rsp), %r12
	movq	%r12, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB86_70
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	80(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	addq	72(%rsp), %r15
	testl	%eax, %eax
	jne	.LBB86_70
	movb	$120, 71(%rsp)
	movq	%r12, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB86_70
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	80(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	addq	72(%rsp), %r15
	testl	%eax, %eax
	jne	.LBB86_70
	movzbl	(%rbp), %eax
	shrl	$4, %eax
	leaq	.Lcsbs$2(%rip), %rcx
	movzbl	(%rax,%rcx), %eax
	movb	%al, 71(%rsp)
	movq	%r12, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB86_70
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	80(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	addq	72(%rsp), %r15
	testl	%eax, %eax
	jne	.LBB86_70
	movzbl	(%rbp), %eax
	andl	$15, %eax
	leaq	.Lcsbs$2(%rip), %rcx
	movzbl	(%rax,%rcx), %eax
	movb	%al, 71(%rsp)
	movq	%r12, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB86_70
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	80(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	addq	72(%rsp), %r15
	movl	$1, %r12d
	testl	%eax, %eax
	jne	.LBB86_70
.LBB86_66:
	cmpq	%r12, %r13
	jb	.LBB86_78
	addq	%r12, %rbp
	subq	%r12, %r13
	jg	.LBB86_40
	jmp	.LBB86_68
.LBB86_43:
	cmpq	$1, %r13
	je	.LBB86_75
	shrl	$4, %eax
	movzbl	1(%rbp), %ecx
	leaq	utf8.accept_ranges(%rip), %r8
	cmpb	(%r8,%rax,2), %cl
	jb	.LBB86_57
	leaq	utf8.accept_ranges(%rip), %r8
	cmpb	%cl, 1(%r8,%rax,2)
	jb	.LBB86_57
	leaq	-194(%rdx), %r8
	movzbl	%cl, %eax
	cmpq	$29, %r8
	ja	.LBB86_48
	andl	$31, %edx
	shll	$6, %edx
	andl	$63, %eax
	orl	%edx, %eax
	movl	$2, %r12d
	movl	%eax, %edx
	jmp	.LBB86_55
.LBB86_48:
	cmpq	$2, %r13
	jbe	.LBB86_76
	movzbl	2(%rbp), %ecx
	cmpb	$-65, %cl
	jg	.LBB86_57
	movl	%edx, %r8d
	andl	$-16, %r8d
	cmpl	$224, %r8d
	jne	.LBB86_52
	andl	$15, %edx
	shll	$12, %edx
	andl	$63, %eax
	shll	$6, %eax
	orl	%edx, %eax
	andl	$63, %ecx
	orl	%eax, %ecx
	movl	$3, %r12d
	movl	%ecx, %edx
	jmp	.LBB86_55
.LBB86_52:
	cmpq	$3, %r13
	je	.LBB86_77
	movzbl	3(%rbp), %r8d
	cmpb	$-65, %r8b
	jg	.LBB86_57
	andl	$7, %edx
	shll	$18, %edx
	andl	$63, %eax
	shll	$12, %eax
	orl	%edx, %eax
	andl	$63, %ecx
	shll	$6, %ecx
	orl	%eax, %ecx
	andl	$63, %r8d
	orl	%ecx, %r8d
	movl	$4, %r12d
	movl	%r8d, %edx
	jmp	.LBB86_55
.LBB86_33:
	cmpb	$0, (%rsi)
	jne	.LBB86_73
.LBB86_34:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB86_73
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	104(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB86_73:
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB86_68:
	movb	$34, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB86_70
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	addq	72(%rsp), %r15
	jmp	.LBB86_70
.LBB86_22:
	movq	%r13, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1497, %edx
	movl	$23, %r8d
	movq	%r14, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB86_78:
	movq	%r13, 40(%rsp)
	movq	%r13, 32(%rsp)
	leaq	.Lggv$113(%rip), %rcx
	movl	$242, %edx
	movl	$43, %r8d
	movq	%r12, %r9
	callq	runtime.slice_handle_error
.LBB86_74:
	movq	%rax, 40(%rsp)
	movq	%r13, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1453, %edx
	movl	$8, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB86_75:
	movq	$1, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$1, %r9d
	movl	$122, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB86_76:
	movq	%r13, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$2, %r9d
	movl	$129, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB86_77:
	movq	$3, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$3, %r9d
	movl	$136, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	fmt.fmt_cstring;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_cstring:
.seh_proc fmt.fmt_cstring
	subq	$56, %rsp
	.seh_stackalloc 56
	.seh_endprologue
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 32(%rsp)
	testq	%rdx, %rdx
	je	.LBB87_1
	movq	%rdx, %rax
	.p2align	4, 0x90
.LBB87_3:
	cmpb	$0, (%rax)
	je	.LBB87_6
	incq	%rax
	jne	.LBB87_3
	xorl	%eax, %eax
.LBB87_6:
	subq	%rdx, %rax
	movq	%rdx, 32(%rsp)
	movq	%rax, 40(%rsp)
	jmp	.LBB87_7
.LBB87_1:
	movaps	%xmm0, 32(%rsp)
.LBB87_7:
	leaq	32(%rsp), %rdx
	callq	fmt.fmt_string
	nop
	addq	$56, %rsp
	retq
	.seh_endproc

	.def	fmt.fmt_pointer;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_pointer:
.seh_proc fmt.fmt_pointer
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	leal	-88(%r8), %eax
	cmpl	$34, %eax
	ja	.LBB88_11
	leaq	.LJTI88_0(%rip), %r10
	movslq	(%r10,%rax,4), %rax
	addq	%r10, %rax
	jmpq	*%rax
.LBB88_2:
	cmpb	$0, 4(%rcx)
	jne	.LBB88_5
	movq	40(%rcx), %r10
	testq	%r10, %r10
	je	.LBB88_5
	movq	48(%rcx), %rax
	movq	$0, 56(%rsp)
	movq	%r9, 48(%rsp)
	leaq	56(%rsp), %r8
	movq	%r8, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1d7(%rip), %r8
	movq	%rdx, %rsi
	movl	$4, %edx
	movq	%rcx, %rdi
	movq	%rax, %rcx
	movq	%r9, %rbx
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%rbx, %r9
	movq	%rdi, %rcx
	movq	%rsi, %rdx
	movq	56(%rsp), %rax
	addq	%rax, 112(%rdi)
.LBB88_5:
	movq	%r9, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$16, %r8d
	jmp	.LBB88_6
.LBB88_9:
	movq	%r9, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$10, %r8d
	jmp	.LBB88_6
.LBB88_7:
	movq	%r9, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$2, %r8d
	jmp	.LBB88_6
.LBB88_11:
	movl	%r8d, %edx
	movq	%r9, %r8
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	fmt.fmt_bad_verb
.LBB88_10:
	movq	%r9, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$12, %r8d
	jmp	.LBB88_6
.LBB88_8:
	movq	%r9, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$8, %r8d
.LBB88_6:
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	nop
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI88_0:
	.long	.LBB88_5-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_7-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_9-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_9-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_8-.LJTI88_0
	.long	.LBB88_2-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_2-.LJTI88_0
	.long	.LBB88_2-.LJTI88_0
	.long	.LBB88_5-.LJTI88_0
	.long	.LBB88_11-.LJTI88_0
	.long	.LBB88_10-.LJTI88_0
	.text
	.seh_endproc

	.def	fmt.fmt_soa_pointer;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_soa_pointer:
.seh_proc fmt.fmt_soa_pointer
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movq	%r8, %rdi
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	movq	40(%rcx), %rax
	testq	%rax, %rax
	je	.LBB89_2
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1d8(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB89_2:
	movq	(%rbx), %rdx
	movq	%rdi, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %r14
	movq	%r14, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$16, %r8d
	movq	%rsi, %rcx
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB89_4
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1d9(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB89_4:
	movq	8(%rbx), %rdx
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$10, %r8d
	movq	%rsi, %rcx
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB89_6
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1da(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB89_6:
	addq	$72, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_endproc

	.def	fmt.enum_value_to_string;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.enum_value_to_string:
.seh_proc fmt.enum_value_to_string
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	movq	8(%rcx), %rax
	testq	%rax, %rax
	je	.LBB90_1
	movabsq	$72057594037927935, %r8
	andq	%r8, %rax
	xorl	%r8d, %r8d
	cmpq	$160, %rax
	cmovbq	%rax, %r8
	leaq	.L__$type_info_data(%rip), %rax
	movq	(%rax,%r8,8), %rax
	.p2align	4, 0x90
.LBB90_4:
	movq	104(%rax), %r8
	cmpq	$1, %r8
	jne	.LBB90_5
	movq	48(%rax), %rax
	jmp	.LBB90_4
.LBB90_5:
	cmpq	$21, %r8
	jne	.LBB90_1
	movq	64(%rax), %r15
	testq	%r15, %r15
	je	.LBB90_1
	movq	%rdx, %r14
	movq	40(%rax), %rdi
	movq	48(%rax), %rsi
	movq	56(%rax), %rbx
	movq	$0, 40(%rsp)
	leaq	40(%rsp), %rdx
	callq	reflect.as_i64
	testb	%al, %al
	je	.LBB90_8
	xorl	%eax, %eax
	testq	%r15, %r15
	cmovgq	%r15, %rax
	movq	40(%rsp), %rcx
	addq	$-8, %rdi
	negq	%rax
	movq	$-1, %r8
	movq	%r14, %rdx
	.p2align	4, 0x90
.LBB90_10:
	leaq	(%rax,%r8), %r9
	cmpq	$-1, %r9
	je	.LBB90_1
	leaq	1(%r8), %r9
	addq	$16, %rdi
	cmpq	%rcx, 8(%rbx,%r8,8)
	movq	%r9, %r8
	jne	.LBB90_10
	cmpq	%rsi, %r9
	jae	.LBB90_15
	movq	-8(%rdi), %rcx
	movq	(%rdi), %r8
	movb	$1, %al
	jmp	.LBB90_14
.LBB90_1:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
.LBB90_14:
	movq	%rcx, (%rdx)
	movq	%r8, 8(%rdx)
	addq	$48, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB90_8:
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%eax, %eax
	movq	%r14, %rdx
	jmp	.LBB90_14
.LBB90_15:
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$1ac(%rip), %rcx
	movl	$662, %edx
	movl	$19, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	fmt.fmt_enum;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_enum:
.seh_proc fmt.fmt_enum
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$176, %rsp
	.seh_stackalloc 176
	.seh_endprologue
	movl	%r8d, %ebx
	movq	8(%rdx), %r8
	testq	%r8, %r8
	je	.LBB91_2
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.LBB91_2
	movabsq	$72057594037927935, %r10
	andq	%r10, %r8
	xorl	%r10d, %r10d
	cmpq	$160, %r8
	cmovbq	%r8, %r10
	leaq	.L__$type_info_data(%rip), %r8
	movq	(%r8,%r10,8), %r10
	cmpq	$21, 104(%r10)
	jne	.LBB91_34
	leal	-100(%rbx), %r8d
	cmpl	$19, %r8d
	ja	.LBB91_34
	movq	32(%r10), %r14
	movl	$37, %r10d
	btl	%r8d, %r10d
	jb	.LBB91_12
	movl	$303104, %eax
	btl	%r8d, %eax
	movq	%rcx, %rdi
	movq	%r9, %rsi
	jae	.LBB91_8
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 80(%rsp)
	leaq	80(%rsp), %rax
	movq	%rdx, %r15
	movq	%rdx, %rcx
	movq	%rax, %rdx
	callq	fmt.enum_value_to_string
	movaps	80(%rsp), %xmm0
	movups	%xmm0, 160(%rsp)
	testb	%al, %al
	je	.LBB91_18
	leaq	160(%rsp), %rdx
	movq	%rdi, %rcx
	movl	%ebx, %r8d
	movq	%rsi, %r9
	callq	fmt.fmt_string
	jmp	.LBB91_27
.LBB91_2:
	movq	40(%rcx), %r10
	testq	%r10, %r10
	je	.LBB91_27
	movq	48(%rcx), %rax
	movq	$0, 56(%rsp)
	movq	%r9, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$24d(%rip), %r8
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rcx
	xorl	%r9d, %r9d
	callq	*%r10
	movq	56(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB91_27:
	addq	$176, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
.LBB91_12:
	movq	%rax, 128(%rsp)
	cmpq	$1, 104(%r14)
	jne	.LBB91_15
	.p2align	4, 0x90
.LBB91_13:
	movq	48(%r14), %r14
	cmpq	$1, 104(%r14)
	je	.LBB91_13
.LBB91_15:
	movq	24(%r14), %rax
	movq	%rax, 136(%rsp)
	leaq	128(%rsp), %rdx
	movl	%ebx, %r8d
	callq	fmt.fmt_arg
	jmp	.LBB91_27
.LBB91_8:
	cmpl	$19, %r8d
	jne	.LBB91_34
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	64(%rsp), %rax
	movq	%rdx, %r15
	movq	%rdx, %rcx
	movq	%rax, %rdx
	callq	fmt.enum_value_to_string
	movq	%rdi, %rcx
	movaps	64(%rsp), %xmm0
	movups	%xmm0, 144(%rsp)
	leaq	40(%rdi), %rbx
	testb	%al, %al
	je	.LBB91_28
	leaq	112(%rcx), %r8
	movq	%rbx, %rcx
	movb	$46, %dl
	movq	%rsi, %r9
	callq	io.write_byte
	movq	(%rbx), %rax
	testq	%rax, %rax
	je	.LBB91_27
	movq	48(%rdi), %rcx
	movq	$0, 56(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	144(%rsp), %r8
	jmp	.LBB91_26
.LBB91_34:
	movl	%ebx, %edx
	movq	%r9, %r8
	addq	$176, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bad_verb
.LBB91_18:
	movq	40(%rdi), %rax
	testq	%rax, %rax
	movq	%rsi, %r9
	je	.LBB91_20
	movq	48(%rdi), %rcx
	movq	$0, 56(%rsp)
	movq	%r9, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1de(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	%rsi, %r9
	movq	%rdi, %rax
	movq	56(%rsp), %rcx
	addq	%rcx, 112(%rdi)
.LBB91_20:
	movq	(%r15), %rax
	movq	%rax, 112(%rsp)
	cmpq	$1, 104(%r14)
	jne	.LBB91_23
	.p2align	4, 0x90
.LBB91_21:
	movq	48(%r14), %r14
	cmpq	$1, 104(%r14)
	je	.LBB91_21
.LBB91_23:
	movq	24(%r14), %rax
	movq	%rax, 120(%rsp)
	leaq	112(%rsp), %rdx
	jmp	.LBB91_24
.LBB91_28:
	movq	(%rbx), %rax
	testq	%rax, %rax
	movq	%rsi, %r9
	je	.LBB91_30
	movq	48(%rcx), %rcx
	movq	$0, 56(%rsp)
	movq	%r9, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1de(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	%rsi, %r9
	movq	%rdi, %rax
	movq	56(%rsp), %rcx
	addq	%rcx, 112(%rdi)
.LBB91_30:
	movq	(%r15), %rax
	movq	%rax, 96(%rsp)
	cmpq	$1, 104(%r14)
	jne	.LBB91_33
.LBB91_31:
	movq	48(%r14), %r14
	cmpq	$1, 104(%r14)
	je	.LBB91_31
.LBB91_33:
	movq	24(%r14), %rax
	movq	%rax, 104(%rsp)
	leaq	96(%rsp), %rdx
.LBB91_24:
	movq	%rdi, %rcx
	movl	$105, %r8d
	callq	fmt.fmt_arg
	movq	40(%rdi), %rax
	testq	%rax, %rax
	je	.LBB91_27
	movq	48(%rdi), %rcx
	movq	$0, 56(%rsp)
	movq	%rsi, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1df(%rip), %r8
.LBB91_26:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	56(%rsp), %rax
	addq	%rax, 112(%rdi)
	jmp	.LBB91_27
	.seh_endproc

	.def	fmt.stored_enum_value_to_string;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.stored_enum_value_to_string:
.seh_proc fmt.stored_enum_value_to_string
	pushq	%rsi
	.seh_pushreg %rsi
	subq	$48, %rsp
	.seh_stackalloc 48
	.seh_endprologue
	testq	%rcx, %rcx
	jne	.LBB92_3
	movq	104, %rax
	xorl	%ecx, %ecx
	jmp	.LBB92_4
	.p2align	4, 0x90
.LBB92_2:
	movq	48(%rcx), %rcx
.LBB92_3:
	movq	104(%rcx), %rax
	cmpq	$1, %rax
	je	.LBB92_2
.LBB92_4:
	cmpq	$21, %rax
	jne	.LBB92_5
	addq	%rdx, %r8
	movq	32(%rcx), %rsi
	movq	40(%rcx), %r10
	movq	48(%rcx), %rdx
	movq	56(%rcx), %r11
	movq	64(%rcx), %rax
	testq	%rsi, %rsi
	jne	.LBB92_15
	jmp	.LBB92_8
	.p2align	4, 0x90
.LBB92_14:
	movq	48(%rsi), %rsi
.LBB92_15:
	movq	104(%rsi), %rcx
	cmpq	$1, %rcx
	je	.LBB92_14
	cmpq	$7, %rcx
	jne	.LBB92_8
	xorl	%ecx, %ecx
	testq	%rax, %rax
	cmovgq	%rax, %rcx
	negq	%rcx
	addq	$-8, %r10
	movq	$-1, %rsi
	.p2align	4, 0x90
.LBB92_18:
	leaq	(%rcx,%rsi), %rax
	cmpq	$-1, %rax
	je	.LBB92_5
	leaq	1(%rsi), %rax
	addq	$16, %r10
	cmpq	%r8, 8(%r11,%rsi,8)
	movq	%rax, %rsi
	jne	.LBB92_18
	cmpq	%rdx, %rax
	jb	.LBB92_25
	movq	%rdx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1647, %edx
	jmp	.LBB92_22
.LBB92_8:
	testq	%rax, %rax
	je	.LBB92_23
	xorl	%ecx, %ecx
	testq	%rax, %rax
	cmovgq	%rax, %rcx
	negq	%rcx
	addq	$-8, %r10
	movq	$-1, %rsi
	.p2align	4, 0x90
.LBB92_10:
	leaq	(%rcx,%rsi), %rax
	cmpq	$-1, %rax
	je	.LBB92_5
	leaq	1(%rsi), %rax
	addq	$16, %r10
	cmpq	%r8, 8(%r11,%rsi,8)
	movq	%rax, %rsi
	jne	.LBB92_10
	cmpq	%rdx, %rax
	jae	.LBB92_13
.LBB92_25:
	movups	-8(%r10), %xmm0
	jmp	.LBB92_24
.LBB92_5:
	xorps	%xmm0, %xmm0
	movups	%xmm0, (%r9)
	xorl	%eax, %eax
	jmp	.LBB92_6
.LBB92_23:
	xorps	%xmm0, %xmm0
.LBB92_24:
	movups	%xmm0, (%r9)
	movb	$1, %al
.LBB92_6:
	addq	$48, %rsp
	popq	%rsi
	retq
.LBB92_13:
	movq	%rdx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1655, %edx
.LBB92_22:
	movl	$21, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	fmt.fmt_bit_set;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_bit_set:
.seh_proc fmt.fmt_bit_set
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$488, %rsp
	.seh_stackalloc 488
	movaps	%xmm6, 464(%rsp)
	.seh_savexmm %xmm6, 464
	.seh_endprologue
	movl	%r9d, %r14d
	movq	%rdx, %rax
	movq	%rcx, %rbp
	movq	592(%rsp), %rbx
	movabsq	$72057594037927935, %rcx
	movq	8(%rdx), %rdx
	andq	%rcx, %rdx
	xorl	%r9d, %r9d
	cmpq	$160, %rdx
	cmovbq	%rdx, %r9
	leaq	.L__$type_info_data(%rip), %rdx
	movq	(%rdx,%r9,8), %rdx
	leaq	32(%rdx), %r9
	movq	104(%rdx), %r10
	cmpq	$23, %r10
	je	.LBB93_3
	cmpq	$1, %r10
	jne	.LBB93_79
	movups	(%r9), %xmm0
	movups	16(%r9), %xmm1
	movups	32(%r9), %xmm2
	movaps	%xmm2, 384(%rsp)
	movaps	%xmm1, 368(%rsp)
	movaps	%xmm0, 352(%rsp)
	movq	(%rax), %rax
	movq	%rax, 432(%rsp)
	movq	368(%rsp), %rax
	movq	24(%rax), %rax
	movq	%rax, 440(%rsp)
	movq	%rbx, 32(%rsp)
	leaq	432(%rsp), %rdx
	leaq	352(%rsp), %r8
	movq	%rbp, %rcx
	movl	%r14d, %r9d
	callq	fmt.fmt_bit_set
	jmp	.LBB93_79
.LBB93_3:
	movups	(%r9), %xmm0
	movups	16(%r9), %xmm1
	movaps	%xmm1, 368(%rsp)
	movaps	%xmm0, 352(%rsp)
	movq	(%rdx), %r13
	movq	360(%rsp), %r9
	testq	%r9, %r9
	jne	.LBB93_6
	jmp	.LBB93_9
	.p2align	4, 0x90
.LBB93_5:
	movq	48(%r9), %r9
.LBB93_6:
	movq	104(%r9), %r10
	cmpq	$1, %r10
	je	.LBB93_5
	cmpq	$2, %r10
	jne	.LBB93_9
	cmpb	$2, 33(%r9)
	sete	%r10b
	jmp	.LBB93_10
.LBB93_9:
	xorl	%r10d, %r10d
.LBB93_10:
	shlq	$3, %r13
	xorl	%r9d, %r9d
	leal	-88(%r14), %r11d
	cmpl	$34, %r11d
	ja	.LBB93_13
	movabsq	$21483361281, %rsi
	btq	%r11, %rsi
	jae	.LBB93_13
	movb	$1, %r9b
	cmpb	$0, 5(%rbp)
	je	.LBB93_16
.LBB93_13:
	cmpq	$32, %r13
	ja	.LBB93_17
.LBB93_14:
	leaq	.LJTI93_0(%rip), %r11
	movslq	(%r11,%r13,4), %rsi
	addq	%r11, %rsi
	jmpq	*%rsi
.LBB93_15:
	xorl	%eax, %eax
	jmp	.LBB93_35
.LBB93_16:
	movb	$1, 5(%rbp)
	movq	%r13, 16(%rbp)
	cmpq	$32, %r13
	jbe	.LBB93_14
.LBB93_17:
	cmpq	$64, %r13
	jne	.LBB93_20
	movq	(%rax), %rax
	movq	(%rax), %rax
	testb	%r10b, %r10b
	movq	%rax, %r10
	bswapq	%r10
	cmoveq	%rax, %r10
	movq	%r10, %rax
	movq	%r10, 80(%rsp)
	movq	%r10, 344(%rsp)
	testb	%r9b, %r9b
	je	.LBB93_36
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 240(%rsp)
	leaq	344(%rsp), %rax
	movq	%rax, 240(%rsp)
	addq	$32, %rcx
	movq	%rcx, 248(%rsp)
	leaq	240(%rsp), %rdx
	jmp	.LBB93_31
.LBB93_20:
	cmpq	$128, %r13
	jne	.LBB93_81
	movq	(%rax), %rax
	movq	(%rax), %r11
	movq	8(%rax), %rsi
	testb	%r10b, %r10b
	je	.LBB93_23
	movq	%r11, %rax
	bswapq	%rax
	bswapq	%rsi
	movq	%rsi, %r11
	movq	%rax, %rsi
.LBB93_23:
	movq	%r11, %rax
	movq	%r11, 80(%rsp)
	movq	%r11, 416(%rsp)
	movq	%rsi, 424(%rsp)
	testb	%r9b, %r9b
	je	.LBB93_37
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 224(%rsp)
	leaq	416(%rsp), %rax
	movq	%rax, 224(%rsp)
	addq	$129, %rcx
	movq	%rcx, 232(%rsp)
	leaq	224(%rsp), %rdx
	jmp	.LBB93_31
.LBB93_25:
	movq	(%rax), %rax
	movl	(%rax), %r11d
	testb	%r10b, %r10b
	movl	%r11d, %eax
	bswapl	%eax
	cmovel	%r11d, %eax
	movl	%eax, 196(%rsp)
	testb	%r9b, %r9b
	je	.LBB93_32
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 256(%rsp)
	leaq	196(%rsp), %rax
	movq	%rax, 256(%rsp)
	addq	$25, %rcx
	movq	%rcx, 264(%rsp)
	leaq	256(%rsp), %rdx
	jmp	.LBB93_31
.LBB93_27:
	movq	(%rax), %rax
	movzbl	(%rax), %eax
	movb	%al, 79(%rsp)
	testb	%r9b, %r9b
	je	.LBB93_33
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 288(%rsp)
	leaq	79(%rsp), %rax
	movq	%rax, 288(%rsp)
	addq	$3, %rcx
	movq	%rcx, 296(%rsp)
	leaq	288(%rsp), %rdx
	jmp	.LBB93_31
.LBB93_29:
	movq	(%rax), %rax
	movzwl	(%rax), %r11d
	movl	%r11d, %eax
	rolw	$8, %ax
	testb	%r10b, %r10b
	cmovel	%r11d, %eax
	movw	%ax, 94(%rsp)
	testb	%r9b, %r9b
	je	.LBB93_34
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 272(%rsp)
	leaq	94(%rsp), %rax
	movq	%rax, 272(%rsp)
	addq	$12, %rcx
	movq	%rcx, 280(%rsp)
	leaq	272(%rsp), %rdx
.LBB93_31:
	movq	%rbp, %rcx
	movl	%r14d, %r8d
	movq	%rbx, %r9
	callq	fmt.fmt_arg
	jmp	.LBB93_79
.LBB93_32:
	movl	%eax, %eax
	jmp	.LBB93_35
.LBB93_33:
	movzbl	%al, %eax
	jmp	.LBB93_35
.LBB93_34:
	movzwl	%ax, %eax
.LBB93_35:
	movq	%rax, 80(%rsp)
.LBB93_36:
	xorl	%esi, %esi
.LBB93_37:
	movq	352(%rsp), %rdi
	testq	%rdi, %rdi
	je	.LBB93_40
	.p2align	4, 0x90
	cmpq	$1, 104(%rdi)
	jne	.LBB93_41
.LBB93_39:
	movq	48(%rdi), %rdi
	cmpq	$1, 104(%rdi)
	je	.LBB93_39
	jmp	.LBB93_41
.LBB93_40:
	xorl	%edi, %edi
.LBB93_41:
	movq	%rsi, 184(%rsp)
	cmpl	$119, %r14d
	je	.LBB93_46
	leaq	40(%rbp), %rcx
	cmpq	$0, 8(%r8)
	je	.LBB93_45
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB93_46
	movq	48(%rbp), %rcx
	movq	$0, 96(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rbp)
	jmp	.LBB93_46
.LBB93_45:
	leaq	112(%rbp), %r8
	movq	$0, 336(%rsp)
	movq	%rbx, 32(%rsp)
	leaq	336(%rsp), %r9
	callq	reflect.write_type_writer
.LBB93_46:
	movb	$123, 144(%rsp)
	leaq	144(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rbp), %rax
	testq	%rax, %rax
	je	.LBB93_48
	movq	48(%rbp), %rcx
	movq	$0, 128(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	128(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 112(%rbp)
.LBB93_48:
	movq	%r14, 312(%rsp)
	movq	104(%rdi), %rax
	xorl	%r15d, %r15d
	movl	$0, %esi
	movl	$0, %ecx
	movq	%rcx, 168(%rsp)
	movl	$0, %ecx
	movq	%rcx, 176(%rsp)
	movq	%rax, 320(%rsp)
	cmpq	$21, %rax
	jne	.LBB93_50
	movq	40(%rdi), %rax
	movq	%rax, 176(%rsp)
	movq	48(%rdi), %rax
	movq	%rax, 168(%rsp)
	movq	56(%rdi), %rsi
	movq	64(%rdi), %r15
.LBB93_50:
	testq	%r13, %r13
	movq	80(%rsp), %r8
	movq	184(%rsp), %r9
	je	.LBB93_77
	xorl	%eax, %eax
	testq	%r15, %r15
	cmovleq	%rax, %r15
	negq	%r15
	addq	$-16, 176(%rsp)
	movq	%r13, %rax
	sarq	$63, %rax
	movq	%rax, 328(%rsp)
	xorps	%xmm6, %xmm6
	xorl	%r14d, %r14d
	xorl	%r12d, %r12d
	xorl	%edi, %edi
	movq	%r13, 208(%rsp)
	movq	%rbp, 200(%rsp)
	jmp	.LBB93_55
	.p2align	4, 0x90
.LBB93_52:
	incq	%r14
	movq	80(%rsp), %r8
.LBB93_53:
	movq	184(%rsp), %r9
.LBB93_54:
	addq	$1, %r12
	adcq	$0, %rdi
	cmpq	%r13, %r12
	movq	%rdi, %rax
	sbbq	328(%rsp), %rax
	jae	.LBB93_77
.LBB93_55:
	xorl	%eax, %eax
	movl	%r12d, %ecx
	movl	$1, %edx
	shldq	%cl, %rdx, %rax
	shlq	%cl, %rdx
	testb	$64, %r12b
	cmovneq	%rdx, %rax
	movl	$0, %r10d
	cmovneq	%r10, %rdx
	cmpq	$128, %r12
	movq	%rdi, %rcx
	sbbq	$0, %rcx
	cmovaeq	%r10, %rdx
	cmovaeq	%r10, %rax
	andq	%r9, %rax
	andq	%r8, %rdx
	orq	%rax, %rdx
	je	.LBB93_54
	testq	%r14, %r14
	jle	.LBB93_59
	movq	40(%rbp), %rax
	testq	%rax, %rax
	je	.LBB93_59
	movq	48(%rbp), %rcx
	movq	$0, 96(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %r8
	movq	96(%rsp), %rax
	addq	%rax, 112(%rbp)
.LBB93_59:
	cmpq	$21, 320(%rsp)
	jne	.LBB93_75
	movaps	%xmm6, 400(%rsp)
	movq	352(%rsp), %rax
	cmpq	$1, 104(%rax)
	jne	.LBB93_62
	movups	32(%rax), %xmm0
	movaps	%xmm0, 400(%rsp)
.LBB93_62:
	movq	$-1, %rax
	movq	176(%rsp), %r13
	.p2align	4, 0x90
.LBB93_63:
	leaq	(%r15,%rax), %rcx
	cmpq	$-1, %rcx
	je	.LBB93_74
	leaq	1(%rax), %rbx
	addq	$16, %r13
	cmpq	%r12, 8(%rsi,%rax,8)
	movq	%rbx, %rax
	jne	.LBB93_63
	cmpl	$119, 312(%rsp)
	jne	.LBB93_70
	movq	40(%rbp), %rax
	testq	%rax, %rax
	je	.LBB93_69
	movq	48(%rbp), %rcx
	movq	$0, 96(%rsp)
	movq	592(%rsp), %rdx
	movq	%rdx, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	400(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	movq	200(%rsp), %rcx
	addq	%rax, 112(%rcx)
	movq	40(%rcx), %rax
	movb	$46, 144(%rsp)
	leaq	144(%rsp), %rcx
	movq	%rcx, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB93_69
	movq	48(%rbp), %rcx
	movq	$0, 128(%rsp)
	movq	592(%rsp), %rdx
	movq	%rdx, 48(%rsp)
	leaq	128(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	96(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	movq	200(%rsp), %rcx
	addq	%rax, 112(%rcx)
.LBB93_69:
	movq	80(%rsp), %r8
.LBB93_70:
	cmpq	168(%rsp), %rbx
	jae	.LBB93_80
	movq	40(%rbp), %rax
	testq	%rax, %rax
	movq	592(%rsp), %rbx
	je	.LBB93_73
	movq	48(%rbp), %rcx
	movq	$0, 96(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r13, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %r8
	movq	96(%rsp), %rax
	addq	%rax, 112(%rbp)
.LBB93_73:
	incq	%r14
	movq	208(%rsp), %r13
	jmp	.LBB93_53
.LBB93_74:
	movq	592(%rsp), %rbx
	movq	208(%rsp), %r13
.LBB93_75:
	movq	%r12, %r8
	addq	368(%rsp), %r8
	movaps	%xmm6, 96(%rsp)
	movaps	%xmm6, 112(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 128(%rsp)
	movq	$32, 136(%rsp)
	movaps	%xmm6, 144(%rsp)
	movq	%rbx, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	movl	$10, %r9d
	leaq	144(%rsp), %rcx
	leaq	128(%rsp), %rdx
	callq	strconv.append_bits
	movaps	144(%rsp), %xmm0
	movups	%xmm0, 448(%rsp)
	movq	40(%rbp), %rax
	testq	%rax, %rax
	je	.LBB93_52
	movq	48(%rbp), %rcx
	movq	$0, 216(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	216(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	448(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	216(%rsp), %rax
	addq	%rax, 112(%rbp)
	jmp	.LBB93_52
.LBB93_77:
	movb	$125, 144(%rsp)
	leaq	144(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rbp), %rax
	testq	%rax, %rax
	je	.LBB93_79
	movq	48(%rbp), %rcx
	movq	$0, 128(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	128(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	128(%rsp), %rax
	addq	%rax, 112(%rbp)
.LBB93_79:
	movaps	464(%rsp), %xmm6
	addq	$488, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB93_80:
	movq	168(%rsp), %rax
	movq	%rax, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1789, %edx
	movl	$42, %r8d
	movq	%rbx, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB93_81:
	movq	32(%rbx), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$1e3(%rip), %rdx
	leaq	.Lggv$1e2(%rip), %r8
	movq	%rbx, %r9
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI93_0:
	.long	.LBB93_15-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_27-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_29-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_81-.LJTI93_0
	.long	.LBB93_25-.LJTI93_0
	.text
	.seh_endproc

	.def	fmt.fmt_write_indent;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_write_indent:
.seh_proc fmt.fmt_write_indent
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$88, %rsp
	.seh_stackalloc 88
	.seh_endprologue
	movq	32(%rcx), %rax
	testq	%rax, %rax
	jle	.LBB94_5
	movq	%rdx, %rsi
	movq	%rcx, %rdi
	xorl	%r14d, %r14d
	leaq	63(%rsp), %r15
	leaq	64(%rsp), %r12
	leaq	72(%rsp), %rbx
	jmp	.LBB94_2
	.p2align	4, 0x90
.LBB94_4:
	incq	%r14
	cmpq	%rax, %r14
	jge	.LBB94_5
.LBB94_2:
	movb	$9, 63(%rsp)
	movq	%r15, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rdi), %r10
	testq	%r10, %r10
	je	.LBB94_4
	movq	48(%rdi), %rcx
	movq	$0, 64(%rsp)
	movq	%rsi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	64(%rsp), %rax
	addq	%rax, 112(%rdi)
	movq	32(%rdi), %rax
	jmp	.LBB94_4
.LBB94_5:
	addq	$88, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	fmt.fmt_struct;
	.scl	3;
	.type	32;
	.endef
	.globl	__xmm@000000000000000000000000ff0000ff
	.section	.rdata,"dr",discard,__xmm@000000000000000000000000ff0000ff
	.p2align	4, 0x0
__xmm@000000000000000000000000ff0000ff:
	.byte	255
	.byte	0
	.byte	0
	.byte	255
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.zero	1
	.globl	__xmm@00000000000000000000000000000001
	.section	.rdata,"dr",discard,__xmm@00000000000000000000000000000001
	.p2align	4, 0x0
__xmm@00000000000000000000000000000001:
	.long	1
	.long	0
	.long	0
	.long	0
	.text
	.p2align	4, 0x90
fmt.fmt_struct:
.seh_proc fmt.fmt_struct
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$520, %rsp
	.seh_stackalloc 520
	movaps	%xmm12, 496(%rsp)
	.seh_savexmm %xmm12, 496
	movaps	%xmm11, 480(%rsp)
	.seh_savexmm %xmm11, 480
	movdqa	%xmm10, 464(%rsp)
	.seh_savexmm %xmm10, 464
	movaps	%xmm9, 448(%rsp)
	.seh_savexmm %xmm9, 448
	movdqa	%xmm8, 432(%rsp)
	.seh_savexmm %xmm8, 432
	movaps	%xmm7, 416(%rsp)
	.seh_savexmm %xmm7, 416
	movdqa	%xmm6, 400(%rsp)
	.seh_savexmm %xmm6, 400
	.seh_endprologue
	movl	%r8d, %r13d
	movq	%rdx, 160(%rsp)
	movq	%rcx, %rsi
	movq	632(%rsp), %rdi
	movl	%r8d, %eax
	andl	$-2, %eax
	cmpl	$118, %eax
	jne	.LBB95_4
	movq	624(%rsp), %r8
	testb	$2, 44(%r9)
	jne	.LBB95_5
	movzbl	45(%r9), %r15d
	movq	40(%rsi), %rax
	testq	%rax, %rax
	movq	%r9, 88(%rsp)
	je	.LBB95_9
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r9
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	jmp	.LBB95_10
.LBB95_4:
	movq	%rsi, %rcx
	movl	%r13d, %edx
	movq	%rdi, %r8
	movaps	400(%rsp), %xmm6
	movaps	416(%rsp), %xmm7
	movaps	432(%rsp), %xmm8
	movaps	448(%rsp), %xmm9
	movaps	464(%rsp), %xmm10
	movaps	480(%rsp), %xmm11
	movaps	496(%rsp), %xmm12
	addq	$520, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bad_verb
.LBB95_5:
	cmpq	$0, 8(%r8)
	je	.LBB95_140
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_221
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rbx
	movq	%rbx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_221
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1f7(%rip), %r8
	jmp	.LBB95_142
.LBB95_9:
	xorl	%eax, %eax
.LBB95_10:
	testb	%r15b, %r15b
	setne	%cl
	cmpl	$118, %r13d
	sete	%r14b
	andb	%cl, %r14b
	xorb	$1, %r14b
	shlb	$5, %r14b
	leal	91(%r14), %ecx
	movb	%cl, 144(%rsp)
	leaq	144(%rsp), %rbx
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	testq	%rax, %rax
	je	.LBB95_12
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r9
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_12:
	testb	%r15b, %r15b
	setne	%al
	incq	80(%rsi)
	movzbl	4(%rsi), %edx
	movq	32(%rsi), %rcx
	movq	%rcx, 192(%rsp)
	incq	%rcx
	movq	%rcx, 32(%rsi)
	movl	40(%r9), %ebp
	testl	%ebp, %ebp
	sete	%cl
	movb	%dl, 70(%rsp)
	testb	%dl, %dl
	sete	%r12b
	orb	%cl, %r12b
	orb	%al, %r12b
	movq	%r14, 280(%rsp)
	movb	%r12b, 127(%rsp)
	je	.LBB95_19
	testb	%r15b, %r15b
	je	.LBB95_21
	movq	192(%rsp), %rax
	addq	$2, %rax
	movq	%rax, 32(%rsi)
	pxor	%xmm0, %xmm0
	movdqa	%xmm0, 304(%rsp)
	movq	56(%r9), %rax
	cmpq	$1, 104(%rax)
	jne	.LBB95_16
	movdqu	32(%rax), %xmm0
	movdqa	%xmm0, 304(%rsp)
.LBB95_16:
	movl	40(%r9), %eax
	movl	%eax, 136(%rsp)
	movzbl	45(%r9), %ecx
	movl	$-1, %eax
	cmpb	$2, %cl
	je	.LBB95_18
	movl	$-3, %eax
	cmpb	$3, %cl
	jne	.LBB95_143
.LBB95_18:
	movl	136(%rsp), %edx
	addl	%eax, %edx
	movq	160(%rsp), %rax
	movq	(%rax), %rax
	movq	16(%r9), %rcx
	movl	%edx, 136(%rsp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx,%rax), %r13
	jmp	.LBB95_144
.LBB95_19:
	movb	$10, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_21
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r9
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movl	40(%r9), %ebp
.LBB95_21:
	movl	%r13d, 180(%rsp)
	movslq	%ebp, %rax
	movq	%rax, 216(%rsp)
	testl	%eax, %eax
	js	.LBB95_233
	je	.LBB95_217
	movq	8(%r9), %r14
	xorl	%eax, %eax
	cmpl	$119, 180(%rsp)
	sete	%al
	orl	$118, %eax
	movl	%eax, 176(%rsp)
	leaq	88(%rsi), %rax
	movq	%rax, 272(%rsp)
	movq	$-1, 248(%rsp)
	xorl	%r13d, %r13d
	xorps	%xmm7, %xmm7
	movdqa	__xmm@000000000000000000000000ff0000ff(%rip), %xmm6
	movdqa	__xmm@00000000000000000000000000000001(%rip), %xmm8
	movq	%r14, 240(%rsp)
	leaq	(,%r13,8), %r12
	jmp	.LBB95_25
	.p2align	4, 0x90
.LBB95_24:
	incq	%r13
	addq	$8, %r12
	cmpq	216(%rsp), %r13
	movq	88(%rsp), %r9
	jge	.LBB95_217
.LBB95_25:
	movups	(%r14,%r12,2), %xmm0
	movups	%xmm0, 368(%rsp)
	movq	$-1, 208(%rsp)
	movq	(%rsi), %xmm10
	movzbl	4(%rsi), %eax
	movb	%al, 200(%rsp)
	movzbl	5(%rsi), %eax
	movq	%rax, 128(%rsp)
	movzbl	6(%rsi), %eax
	movb	%al, 71(%rsp)
	movsd	7(%rsi), %xmm9
	movzbl	15(%rsi), %eax
	movb	%al, 232(%rsp)
	movq	16(%rsi), %rbp
	movq	24(%rsi), %rax
	movq	%rax, 136(%rsp)
	movq	32(%rsi), %rax
	movq	%rax, 224(%rsp)
	movq	160(%rsp), %rax
	movq	(%rax), %r15
	movq	32(%r9), %rax
	movups	(%rax,%r12,2), %xmm0
	movups	%xmm0, 72(%rsp)
	movaps	%xmm7, 96(%rsp)
	leaq	72(%rsp), %rcx
	leaq	.Lggv$27a(%rip), %rdx
	leaq	96(%rsp), %r8
	callq	reflect.struct_tag_lookup
	movdqa	96(%rsp), %xmm0
	movdqu	%xmm0, 144(%rsp)
	testb	%al, %al
	je	.LBB95_30
	movaps	%xmm7, 256(%rsp)
	leaq	256(%rsp), %rcx
	movq	%rbx, %rdx
	callq	strings.trim_space
	movq	256(%rsp), %r8
	movq	264(%rsp), %r10
	cmpq	$1, %r10
	jne	.LBB95_29
	leaq	.Lcsbs$161(%rip), %rax
	cmpq	%rax, %r8
	je	.LBB95_24
	cmpb	$45, (%r8)
	je	.LBB95_24
	jmp	.LBB95_32
.LBB95_29:
	testq	%r10, %r10
	jne	.LBB95_31
.LBB95_30:
	xorl	%eax, %eax
	movl	176(%rsp), %ecx
	movl	%ecx, %r10d
	movzbl	70(%rsp), %r14d
	jmp	.LBB95_97
.LBB95_31:
	jle	.LBB95_51
.LBB95_32:
	xorl	%r9d, %r9d
	movzbl	70(%rsp), %r14d
	.p2align	4, 0x90
.LBB95_33:
	cmpb	$44, (%r8,%r9)
	je	.LBB95_36
	incq	%r9
	cmpq	%r9, %r10
	jne	.LBB95_33
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%rax, 112(%rsp)
	jmp	.LBB95_41
.LBB95_36:
	cmpq	%r9, %r10
	jb	.LBB95_236
	leaq	1(%r9), %rax
	movabsq	$9223372036854775807, %rcx
	cmpq	%r9, %rcx
	je	.LBB95_235
	cmpq	%r10, %rax
	jg	.LBB95_235
	testq	%rax, %rax
	js	.LBB95_234
	leaq	(%r8,%r9), %rax
	incq	%rax
	movq	%rax, 112(%rsp)
	movq	%r9, %rcx
	notq	%rcx
	addq	%r10, %rcx
	movq	%r9, %r10
	testq	%r9, %r9
	je	.LBB95_52
.LBB95_41:
	xorl	%r9d, %r9d
	jmp	.LBB95_44
.LBB95_42:
	movb	$1, 200(%rsp)
	.p2align	4, 0x90
.LBB95_43:
	incq	%r9
	cmpq	%r9, %r10
	je	.LBB95_50
.LBB95_44:
	movzbl	(%r8,%r9), %eax
	addl	$-32, %eax
	cmpl	$16, %eax
	ja	.LBB95_53
	leaq	.LJTI95_0(%rip), %rdx
	movslq	(%rdx,%rax,4), %rax
	addq	%rdx, %rax
	jmpq	*%rax
.LBB95_46:
	pextrb	$3, %xmm10, %eax
	pmovzxwd	%xmm10, %xmm10
	movl	$1, %edx
	pinsrb	$2, %edx, %xmm10
	pinsrb	$3, %eax, %xmm10
	jmp	.LBB95_43
.LBB95_47:
	movdqa	%xmm6, %xmm0
	pblendvb	%xmm0, %xmm8, %xmm10
	jmp	.LBB95_43
.LBB95_48:
	movdqa	%xmm10, %xmm0
	movl	$1, %eax
	pinsrb	$1, %eax, %xmm0
	pblendw	$253, %xmm0, %xmm10
	jmp	.LBB95_43
.LBB95_49:
	movd	%xmm10, %eax
	xorl	%r11d, %r11d
	testb	%al, %al
	sete	%r11b
	pextrb	$2, %xmm10, %eax
	pmovzxwd	%xmm10, %xmm10
	pinsrb	$2, %eax, %xmm10
	pinsrb	$3, %r11d, %xmm10
	jmp	.LBB95_43
.LBB95_50:
	movl	$119, %eax
	movl	$118, %r10d
	xorl	%edx, %edx
	movq	%rdx, 128(%rsp)
	xorl	%ebp, %ebp
	movq	88(%rsp), %rdx
	jmp	.LBB95_85
.LBB95_51:
	xorl	%ecx, %ecx
	xorl	%eax, %eax
	movq	%rax, 112(%rsp)
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	xorl	%ebp, %ebp
.LBB95_58:
	movzbl	70(%rsp), %r14d
	jmp	.LBB95_59
.LBB95_52:
	xorl	%r9d, %r9d
	xorl	%eax, %eax
	xorl	%ebp, %ebp
.LBB95_59:
	cmpq	%r9, %rax
	setg	%dl
	movq	%rdx, 128(%rsp)
	cmpq	%r10, %rax
	jge	.LBB95_70
	jae	.LBB95_237
	cmpb	$46, (%r8,%rax)
	jne	.LBB95_70
	incq	%rax
	cmpq	%rax, %r10
	jle	.LBB95_69
	xorl	%edx, %edx
	movq	%rax, %r9
.LBB95_64:
	movzbl	(%r8,%r9), %r11d
	leal	-58(%r11), %r14d
	cmpb	$-10, %r14b
	jb	.LBB95_67
	incq	%r9
	leaq	(%rdx,%rdx,4), %r14
	leaq	(%r11,%r14,2), %rdx
	addq	$-48, %rdx
	cmpq	%r9, %r10
	jne	.LBB95_64
	movq	%rdx, 136(%rsp)
	movq	%r10, %r9
	jmp	.LBB95_68
.LBB95_53:
	xorl	%ebp, %ebp
	movq	%r9, %rax
	.p2align	4, 0x90
.LBB95_54:
	cmpq	%r10, %rax
	jae	.LBB95_232
	movzbl	(%r8,%rax), %r11d
	leal	-58(%r11), %r14d
	cmpb	$-10, %r14b
	jb	.LBB95_58
	incq	%rax
	leaq	(,%rbp,4), %r14
	addq	%rbp, %r14
	leaq	(%r11,%r14,2), %rbp
	addq	$-48, %rbp
	cmpq	%rax, %r10
	jne	.LBB95_54
	movl	$119, %eax
	movl	$118, %r10d
	movb	$1, %dl
	movq	%rdx, 128(%rsp)
	jmp	.LBB95_81
.LBB95_67:
	movq	%rdx, 136(%rsp)
.LBB95_68:
	movzbl	70(%rsp), %r14d
	cmpq	%rax, %r9
	setg	71(%rsp)
	jne	.LBB95_71
.LBB95_69:
	movb	$1, 71(%rsp)
	xorl	%edx, %edx
	movq	%rdx, 136(%rsp)
.LBB95_70:
	movq	%rax, %r9
.LBB95_71:
	movl	$119, %eax
	movq	%r10, %r11
	subq	%r9, %r11
	jle	.LBB95_74
	jbe	.LBB95_238
	movzbl	(%r8,%r9), %edx
	cmpq	$32, %rdx
	jne	.LBB95_75
.LBB95_74:
	movq	88(%rsp), %rdx
	movl	$118, %r10d
	jmp	.LBB95_85
.LBB95_75:
	testq	%r9, %r9
	js	.LBB95_239
	movl	$65533, %r10d
	testq	%r11, %r11
	jle	.LBB95_81
	movq	%rdx, 184(%rsp)
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rdx
	movq	184(%rsp), %r10
	movzbl	(%r10,%rdx), %r10d
	movq	184(%rsp), %rdx
	leaq	-245(%rdx), %r14
	cmpq	$-52, %r14
	ja	.LBB95_82
	andl	$1, %r10d
	movl	%r10d, %eax
	negl	%eax
	decl	%r10d
	andl	%edx, %r10d
	andl	$65533, %eax
	orl	%r10d, %eax
	movq	%rax, %r10
.LBB95_79:
	movzbl	70(%rsp), %r14d
	movq	88(%rsp), %rdx
.LBB95_80:
	cmpl	$115, %r10d
	movl	$119, %eax
	movl	$113, %r8d
	cmovel	%r8d, %eax
	jmp	.LBB95_85
.LBB95_81:
	movzbl	70(%rsp), %r14d
	movq	88(%rsp), %rdx
	jmp	.LBB95_85
.LBB95_82:
	movl	%r10d, %r14d
	andl	$7, %r14d
	cmpq	%r14, %r11
	jae	.LBB95_127
.LBB95_83:
	movzbl	70(%rsp), %r14d
	movq	88(%rsp), %rdx
.LBB95_84:
	movl	$65533, %r10d
.LBB95_85:
	movq	112(%rsp), %r8
	cmpl	$119, 180(%rsp)
	cmovel	%eax, %r10d
	testq	%rcx, %rcx
	je	.LBB95_96
	movq	%r8, 288(%rsp)
	movq	%rcx, 296(%rsp)
	cmpq	$1, %rcx
	jne	.LBB95_89
	movb	$1, %al
	leaq	.Lcsbs$163(%rip), %rcx
	cmpq	%rcx, %r8
	je	.LBB95_97
	cmpb	$48, (%r8)
	je	.LBB95_97
.LBB95_89:
	leal	-118(%r10), %eax
	cmpl	$2, %eax
	jb	.LBB95_92
	cmpl	$115, %r10d
	je	.LBB95_95
	cmpl	$113, %r10d
	je	.LBB95_95
	jmp	.LBB95_96
.LBB95_92:
	movq	(%rdx), %rax
	movq	(%rax,%r12), %rax
	movq	24(%rax), %rcx
	movabsq	$72057594037927935, %rax
	andq	%rax, %rcx
	xorl	%eax, %eax
	cmpq	$160, %rcx
	movl	$0, %r8d
	cmovbq	%rcx, %r8
	leaq	.L__$type_info_data(%rip), %rcx
	movq	(%rcx,%r8,8), %rcx
	testq	%rcx, %rcx
	je	.LBB95_97
	movq	104(%rcx), %rcx
	xorl	%eax, %eax
	cmpq	$17, %rcx
	ja	.LBB95_97
	movl	$217216, %r8d
	btq	%rcx, %r8
	jae	.LBB95_97
.LBB95_95:
	movq	%r15, %rcx
	leaq	288(%rsp), %r8
	leaq	208(%rsp), %r9
	movq	%r10, %r15
	callq	"fmt.handle_tag-1898.handle_optional_len-0"
	movq	%r15, %r10
.LBB95_96:
	xorl	%eax, %eax
.LBB95_97:
	movq	208(%rsp), %rcx
	testq	%rcx, %rcx
	movq	248(%rsp), %r15
	js	.LBB95_99
	movq	%rcx, 88(%rsi)
	movq	$1, 96(%rsi)
.LBB95_99:
	movq	%r10, 112(%rsp)
	movb	%al, 104(%rsi)
	testb	%r14b, %r14b
	jne	.LBB95_103
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %r15
	jae	.LBB95_103
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_109
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	jmp	.LBB95_109
.LBB95_103:
	testb	%r14b, %r14b
	je	.LBB95_109
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB95_109
	xorl	%r14d, %r14d
	jmp	.LBB95_107
	.p2align	4, 0x90
.LBB95_106:
	incq	%r14
	cmpq	%rax, %r14
	jge	.LBB95_109
.LBB95_107:
	movb	$9, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB95_106
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	72(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB95_106
.LBB95_109:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_112
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	368(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_112
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$245(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_112:
	movq	88(%rsp), %r9
	movq	(%r9), %rax
	movq	(%rax,%r12), %rax
	testq	%rax, %rax
	movq	112(%rsp), %r8
	je	.LBB95_119
	movq	104(%rax), %rcx
	cmpq	$1, %rcx
	jne	.LBB95_116
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB95_115:
	movq	48(%rdx), %rdx
	movq	104(%rdx), %rcx
	cmpq	$1, %rcx
	je	.LBB95_115
.LBB95_116:
	cmpq	$9, %rcx
	jne	.LBB95_119
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_120
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$205(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_120
.LBB95_119:
	movq	32(%rsi), %r14
	movq	224(%rsp), %rcx
	movq	%rcx, 32(%rsi)
	movups	(%rsi), %xmm11
	movups	16(%rsi), %xmm12
	movq	%rbp, 16(%rsi)
	movq	136(%rsp), %rcx
	movq	%rcx, 24(%rsi)
	movd	%xmm10, (%rsi)
	movzbl	200(%rsp), %ecx
	movb	%cl, 4(%rsi)
	movq	128(%rsp), %rcx
	movb	%cl, 5(%rsi)
	movzbl	71(%rsp), %ecx
	movb	%cl, 6(%rsi)
	movlps	%xmm9, 7(%rsi)
	movzbl	232(%rsp), %ecx
	movb	%cl, 15(%rsi)
	movq	16(%r9), %rcx
	movq	(%rcx,%r12), %rcx
	movq	160(%rsp), %rdx
	addq	(%rdx), %rcx
	movq	%rcx, 320(%rsp)
	movq	24(%rax), %rax
	movq	%rax, 328(%rsp)
	movq	%rsi, %rcx
	leaq	320(%rsp), %rdx
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	movups	%xmm11, (%rsi)
	movups	%xmm12, 16(%rsi)
	movq	%r14, 32(%rsi)
.LBB95_120:
	movzbl	70(%rsp), %eax
	movq	240(%rsp), %r14
	testb	%al, %al
	movq	88(%rsp), %r9
	je	.LBB95_123
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_123
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r9
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_123:
	movb	$0, 104(%rsi)
	cmpq	$0, 208(%rsp)
	js	.LBB95_125
	movq	272(%rsp), %rax
	movups	%xmm7, (%rax)
.LBB95_125:
	incq	%r15
	movq	%r15, 248(%rsp)
	incq	%r13
	cmpq	216(%rsp), %r13
	jge	.LBB95_217
	leaq	(,%r13,8), %r12
	jmp	.LBB95_25
.LBB95_127:
	cmpq	$1, %r11
	je	.LBB95_240
	shrl	$4, %r10d
	movzbl	1(%r8,%r9), %r14d
	leaq	utf8.accept_ranges(%rip), %rdx
	cmpb	(%rdx,%r10,2), %r14b
	jb	.LBB95_83
	cmpb	%r14b, 1(%rdx,%r10,2)
	jb	.LBB95_83
	movq	184(%rsp), %rdx
	leaq	-194(%rdx), %r10
	movzbl	%r14b, %r14d
	cmpq	$29, %r10
	ja	.LBB95_132
	andl	$31, %edx
	shll	$6, %edx
	andl	$63, %r14d
	orl	%edx, %r14d
	movl	%r14d, %r10d
	jmp	.LBB95_79
.LBB95_132:
	cmpq	$2, %r11
	jbe	.LBB95_241
	movzbl	2(%r8,%r9), %r10d
	cmpb	$-65, %r10b
	jg	.LBB95_83
	movl	%r10d, 172(%rsp)
	movl	%edx, %r10d
	andl	$-16, %r10d
	cmpl	$224, %r10d
	jne	.LBB95_136
	andl	$15, %edx
	shll	$12, %edx
	andl	$63, %r14d
	shll	$6, %r14d
	orl	%edx, %r14d
	movl	172(%rsp), %eax
	andl	$63, %eax
	orl	%r14d, %eax
	movl	%eax, %r10d
	jmp	.LBB95_79
.LBB95_136:
	cmpq	$3, %r11
	je	.LBB95_242
	movzbl	3(%r8,%r9), %r8d
	cmpb	$-65, %r8b
	movq	88(%rsp), %rdx
	jle	.LBB95_139
	movzbl	70(%rsp), %r14d
	jmp	.LBB95_84
.LBB95_139:
	movq	184(%rsp), %rax
	andl	$7, %eax
	shll	$18, %eax
	andl	$63, %r14d
	shll	$12, %r14d
	orl	%eax, %r14d
	movl	172(%rsp), %eax
	andl	$63, %eax
	shll	$6, %eax
	orl	%r14d, %eax
	andl	$63, %r8d
	orl	%eax, %r8d
	movl	%r8d, %r10d
	movzbl	70(%rsp), %r14d
	jmp	.LBB95_80
.LBB95_140:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_221
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1f6(%rip), %r8
.LBB95_142:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_221
.LBB95_143:
	movslq	48(%r9), %r13
.LBB95_144:
	cmpb	$0, 70(%rsp)
	sete	%al
	testq	%r13, %r13
	sete	%cl
	orb	%al, %cl
	movb	%cl, 224(%rsp)
	je	.LBB95_146
	testq	%r13, %r13
	jne	.LBB95_148
	jmp	.LBB95_216
.LBB95_146:
	movb	$10, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_148
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_148:
	movzbl	70(%rsp), %r14d
	testb	%r14b, %r14b
	sete	%al
	testl	%ebp, %ebp
	sete	%cl
	orb	%al, %cl
	movb	%cl, 71(%rsp)
	movl	136(%rsp), %eax
	movq	%rax, 200(%rsp)
	xorl	%eax, %eax
	movq	%rax, 128(%rsp)
	leaq	72(%rsp), %r12
	leaq	96(%rsp), %rbp
	movq	%r13, 232(%rsp)
	jmp	.LBB95_150
	.p2align	4, 0x90
.LBB95_149:
	movq	128(%rsp), %rcx
	incq	%rcx
	movq	%rcx, %rax
	movq	%rcx, 128(%rsp)
	cmpq	%r13, %rcx
	je	.LBB95_215
.LBB95_150:
	testb	%r14b, %r14b
	jne	.LBB95_154
	cmpq	$0, 128(%rsp)
	je	.LBB95_154
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_161
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_161
	.p2align	4, 0x90
.LBB95_154:
	testb	%r14b, %r14b
	je	.LBB95_161
	movq	32(%rsi), %rax
	decq	%rax
	movq	%rax, 32(%rsi)
	testq	%rax, %rax
	jle	.LBB95_160
	xorl	%r15d, %r15d
	jmp	.LBB95_158
	.p2align	4, 0x90
.LBB95_157:
	incq	%r15
	cmpq	%rax, %r15
	jge	.LBB95_160
.LBB95_158:
	movb	$9, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB95_157
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB95_157
	.p2align	4, 0x90
.LBB95_160:
	incq	%rax
	movq	%rax, 32(%rsi)
.LBB95_161:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_164
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	304(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	movb	$123, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	testq	%rax, %rax
	je	.LBB95_164
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_164:
	cmpb	$0, 71(%rsp)
	movq	88(%rsp), %r8
	jne	.LBB95_167
	movb	$10, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_167
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r8
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_167:
	movq	80(%rsi), %rax
	incq	%rax
	movq	%rax, 80(%rsi)
	cmpl	$0, 136(%rsp)
	jle	.LBB95_203
	movq	$-1, %r15
	xorl	%r13d, %r13d
	jmp	.LBB95_170
	.p2align	4, 0x90
.LBB95_169:
	incq	%r15
	incq	%r13
	cmpq	200(%rsp), %r13
	je	.LBB95_202
.LBB95_170:
	movq	%r13, %rax
	shlq	$4, %rax
	movq	8(%r8), %rcx
	movdqu	(%rcx,%rax), %xmm0
	movdqu	%xmm0, 384(%rsp)
	testb	%r14b, %r14b
	jne	.LBB95_174
	movabsq	$9223372036854775807, %rax
	cmpq	%rax, %r15
	jae	.LBB95_174
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_180
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_180
	.p2align	4, 0x90
.LBB95_174:
	testb	%r14b, %r14b
	je	.LBB95_180
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB95_180
	xorl	%r14d, %r14d
	jmp	.LBB95_178
	.p2align	4, 0x90
.LBB95_177:
	incq	%r14
	cmpq	%rax, %r14
	jge	.LBB95_180
.LBB95_178:
	movb	$9, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB95_177
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB95_177
	.p2align	4, 0x90
.LBB95_180:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_183
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	384(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_183
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$245(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_183:
	movq	88(%rsp), %r8
	cmpb	$1, 45(%r8)
	movq	(%r8), %rax
	movq	(%rax,%r13,8), %rax
	movq	104(%rax), %rcx
	jne	.LBB95_190
	cmpq	$14, %rcx
	movzbl	70(%rsp), %r14d
	jne	.LBB95_230
	movq	32(%rax), %rax
	movq	104(%rax), %rcx
	cmpq	$1, %rcx
	jne	.LBB95_188
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB95_187:
	movq	48(%rdx), %rdx
	movq	104(%rdx), %rcx
	cmpq	$1, %rcx
	je	.LBB95_187
.LBB95_188:
	cmpq	$9, %rcx
	je	.LBB95_195
	movq	16(%r8), %rcx
	movq	(%rax), %rdx
	imulq	128(%rsp), %rdx
	movq	160(%rsp), %r8
	addq	(%r8), %rdx
	addq	(%rcx,%r13,8), %rdx
	movq	%rdx, 352(%rsp)
	movq	24(%rax), %rax
	movq	%rax, 360(%rsp)
	movq	%rsi, %rcx
	leaq	352(%rsp), %rdx
	jmp	.LBB95_198
	.p2align	4, 0x90
.LBB95_190:
	cmpq	$12, %rcx
	movzbl	70(%rsp), %r14d
	jne	.LBB95_231
	movq	32(%rax), %rax
	movq	104(%rax), %rcx
	cmpq	$1, %rcx
	jne	.LBB95_194
	movq	%rax, %rdx
	.p2align	4, 0x90
.LBB95_193:
	movq	48(%rdx), %rdx
	movq	104(%rdx), %rcx
	cmpq	$1, %rcx
	je	.LBB95_193
.LBB95_194:
	cmpq	$9, %rcx
	jne	.LBB95_197
.LBB95_195:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_199
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$205(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r8
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_199
	.p2align	4, 0x90
.LBB95_197:
	movq	160(%rsp), %rcx
	movq	(%rcx), %rcx
	movq	16(%r8), %rdx
	movq	(%rdx,%r13,8), %rdx
	movq	(%rax), %r8
	imulq	128(%rsp), %r8
	addq	(%rdx,%rcx), %r8
	movq	%r8, 336(%rsp)
	movq	24(%rax), %rax
	movq	%rax, 344(%rsp)
	movq	%rsi, %rcx
	leaq	336(%rsp), %rdx
.LBB95_198:
	movl	$118, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	movq	88(%rsp), %r8
.LBB95_199:
	testb	%r14b, %r14b
	je	.LBB95_169
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_169
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %r8
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_169
	.p2align	4, 0x90
.LBB95_202:
	movq	80(%rsi), %rax
.LBB95_203:
	decq	%rax
	movq	%rax, 80(%rsi)
	cmpb	$0, 71(%rsp)
	movq	232(%rsp), %r13
	jne	.LBB95_210
	movq	32(%rsi), %rax
	decq	%rax
	movq	%rax, 32(%rsi)
	testq	%rax, %rax
	jle	.LBB95_209
	xorl	%r15d, %r15d
	jmp	.LBB95_207
	.p2align	4, 0x90
.LBB95_206:
	incq	%r15
	cmpq	%rax, %r15
	jge	.LBB95_209
.LBB95_207:
	movb	$9, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB95_206
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB95_206
	.p2align	4, 0x90
.LBB95_209:
	incq	%rax
	movq	%rax, 32(%rsi)
.LBB95_210:
	movb	$125, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_212
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_212:
	testb	%r14b, %r14b
	je	.LBB95_149
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_149
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_149
.LBB95_215:
	cmpq	$0, 192(%rsp)
	setle	%al
	orb	%al, 224(%rsp)
	je	.LBB95_226
.LBB95_216:
	decq	32(%rsi)
.LBB95_217:
	movq	192(%rsp), %r13
	testq	%r13, %r13
	setle	%al
	orb	%al, 127(%rsp)
	movq	280(%rsp), %r12
	je	.LBB95_222
.LBB95_218:
	orb	$93, %r12b
	movb	%r12b, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_220
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB95_220:
	decq	32(%rsi)
	movzbl	70(%rsp), %eax
	movb	%al, 4(%rsi)
	decq	80(%rsi)
.LBB95_221:
	movaps	400(%rsp), %xmm6
	movaps	416(%rsp), %xmm7
	movaps	432(%rsp), %xmm8
	movaps	448(%rsp), %xmm9
	movaps	464(%rsp), %xmm10
	movaps	480(%rsp), %xmm11
	movaps	496(%rsp), %xmm12
	addq	$520, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB95_222:
	leaq	96(%rsp), %r15
	leaq	72(%rsp), %r14
	jmp	.LBB95_224
	.p2align	4, 0x90
.LBB95_223:
	decq	%r13
	je	.LBB95_218
.LBB95_224:
	movb	$9, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_223
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r14, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_223
.LBB95_226:
	leaq	72(%rsp), %r14
	movq	192(%rsp), %r15
	jmp	.LBB95_228
	.p2align	4, 0x90
.LBB95_227:
	decq	%r15
	je	.LBB95_216
.LBB95_228:
	movb	$9, 144(%rsp)
	movq	%rbx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB95_227
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r14, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB95_227
.LBB95_230:
	movabsq	$3602879701896396856, %rcx
	orq	$5, %rcx
	addq	$32, %rax
	movq	%rax, 40(%rsp)
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movabsq	$1369094286720630814, %r9
	movl	$2084, %edx
	movl	$11, %r8d
	callq	"runtime.type_assertion_check2.handle_error-1"
.LBB95_231:
	addq	$32, %rax
	movq	%rax, 40(%rsp)
	movabsq	$3602879701896396856, %rax
	movq	%rax, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movabsq	$1369094286720630814, %r9
	movl	$2093, %edx
	movl	$11, %r8d
	callq	"runtime.type_assertion_check2.handle_error-1"
.LBB95_232:
	cmpq	%r9, %r10
	cmovaq	%r10, %r9
	movq	%r10, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$872, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB95_233:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2113, %edx
	movl	$28, %r8d
	movq	216(%rsp), %r9
	callq	runtime.multi_pointer_slice_handle_error
.LBB95_234:
	movq	%r10, 40(%rsp)
	movq	%r10, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2961, %edx
	movl	$12, %r8d
	movq	%rax, %r9
	callq	runtime.slice_handle_error
.LBB95_235:
	movq	%r10, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2960, %edx
	movl	$13, %r8d
	callq	runtime.slice_handle_error
.LBB95_236:
	movq	%r10, 40(%rsp)
	movq	%r9, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2959, %edx
	movl	$12, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB95_237:
	movq	%r10, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1920, %edx
	movl	$28, %r8d
	movq	%rax, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB95_238:
	movq	%r10, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1931, %edx
	movl	$29, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB95_239:
	movq	%r10, 40(%rsp)
	movq	%r10, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1934, %edx
	movl	$42, %r8d
	callq	runtime.slice_handle_error
.LBB95_240:
	movq	$1, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$1, %r9d
	movl	$122, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB95_241:
	movq	%r11, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$2, %r9d
	movl	$129, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB95_242:
	movq	$3, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$3, %r9d
	movl	$136, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI95_0:
	.long	.LBB95_46-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_42-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_48-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_47-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_53-.LJTI95_0
	.long	.LBB95_49-.LJTI95_0
	.text
	.seh_endproc

	.def	strings.trim_space;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
strings.trim_space:
.seh_proc strings.trim_space
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movq	%rcx, %rsi
	movq	8(%rdx), %rax
	movl	$1, %edi
	movq	$-1, %r13
	testq	%rax, %rax
	jle	.LBB96_1
	movq	(%rdx), %r14
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %rbx
	movabsq	$4294983168, %r15
	leaq	"runtime.string_decode_rune-.accept_ranges-28682"(%rip), %rcx
	xorl	%r9d, %r9d
	jmp	.LBB96_3
.LBB96_32:
	movabsq	$36028797018964099, %r11
	btq	%r10, %r11
	jae	.LBB96_28
	.p2align	4, 0x90
.LBB96_33:
	movq	%r8, %r9
	cmpq	%rax, %r8
	jge	.LBB96_1
.LBB96_3:
	leaq	(%r14,%r9), %rbp
	movq	%rax, %r12
	subq	%r9, %r12
	testq	%r12, %r12
	jle	.LBB96_29
	movzbl	(%rbp), %r8d
	movzbl	(%r8,%rbx), %r10d
	leaq	-245(%r8), %rdx
	cmpq	$-52, %rdx
	ja	.LBB96_6
	andl	$1, %r10d
	movl	%r10d, %edx
	negl	%edx
	decl	%r10d
	andl	%r8d, %r10d
	andl	$65533, %edx
	orl	%r10d, %edx
	movl	$1, %r8d
.LBB96_19:
	addq	%r9, %r8
	cmpl	$8191, %edx
	jbe	.LBB96_20
	cmpl	$8203, %edx
	jb	.LBB96_33
	leal	-8232(%rdx), %r10d
	cmpl	$55, %r10d
	jbe	.LBB96_32
.LBB96_28:
	cmpl	$12288, %edx
	je	.LBB96_33
	jmp	.LBB96_29
	.p2align	4, 0x90
.LBB96_6:
	movl	%r10d, %edx
	andl	$7, %edx
	cmpq	%rdx, %r12
	jb	.LBB96_29
	cmpq	$1, %r12
	je	.LBB96_86
	shrl	$4, %r10d
	movzbl	1(%rbp), %edx
	cmpb	(%rcx,%r10,2), %dl
	jb	.LBB96_29
	cmpb	%dl, 1(%rcx,%r10,2)
	jb	.LBB96_29
	leaq	-194(%r8), %r10
	movzbl	%dl, %edx
	cmpq	$29, %r10
	ja	.LBB96_12
	andl	$31, %r8d
	shll	$6, %r8d
	andl	$63, %edx
	orl	%r8d, %edx
	leaq	2(%r9), %r8
.LBB96_20:
	cmpl	$132, %edx
	jg	.LBB96_23
	cmpl	$32, %edx
	ja	.LBB96_29
	movl	%edx, %edx
	btq	%rdx, %r15
	jb	.LBB96_33
	jmp	.LBB96_29
	.p2align	4, 0x90
.LBB96_12:
	cmpq	$2, %r12
	jbe	.LBB96_87
	movzbl	2(%rbp), %r10d
	cmpb	$-65, %r10b
	jg	.LBB96_29
	movl	%r8d, %r11d
	andl	$-16, %r11d
	cmpl	$224, %r11d
	jne	.LBB96_16
	andl	$15, %r8d
	shll	$12, %r8d
	andl	$63, %edx
	shll	$6, %edx
	orl	%r8d, %edx
	andl	$63, %r10d
	orl	%edx, %r10d
	movl	$3, %r8d
	movl	%r10d, %edx
	jmp	.LBB96_19
.LBB96_23:
	cmpl	$133, %edx
	je	.LBB96_33
	cmpl	$160, %edx
	je	.LBB96_33
	cmpl	$5760, %edx
	je	.LBB96_33
	jmp	.LBB96_29
.LBB96_16:
	cmpq	$3, %r12
	je	.LBB96_88
	movzbl	3(%rbp), %r11d
	cmpb	$-65, %r11b
	jg	.LBB96_29
	andl	$7, %r8d
	shll	$18, %r8d
	andl	$63, %edx
	shll	$12, %edx
	orl	%r8d, %edx
	andl	$63, %r10d
	shll	$6, %r10d
	orl	%edx, %r10d
	andl	$63, %r11d
	orl	%r10d, %r11d
	movl	$4, %r8d
	movl	%r11d, %edx
	jmp	.LBB96_19
.LBB96_29:
	cmpq	$-1, %r9
	je	.LBB96_1
	cmpq	%r9, %rax
	setge	%cl
	setae	%dl
	testb	%cl, %dl
	je	.LBB96_31
	testq	%r12, %r12
	jle	.LBB96_82
	addq	%r9, %r14
	movq	%r12, %rdi
	jmp	.LBB96_36
.LBB96_1:
	xorl	%r12d, %r12d
	xorl	%ebp, %ebp
.LBB96_82:
	addq	%rdi, %r13
	testq	%r12, %r12
	js	.LBB96_96
	testq	%r13, %r13
	js	.LBB96_96
	cmpq	%r12, %r13
	jg	.LBB96_96
	movq	%rbp, (%rsi)
	movq	%r13, 8(%rsi)
	movq	%rsi, %rax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB96_62:
	movabsq	$36028797018964099, %rdx
	btq	%rax, %rdx
	jae	.LBB96_61
	.p2align	4, 0x90
.LBB96_63:
	testq	%rdi, %rdi
	jle	.LBB96_64
.LBB96_36:
	cmpq	%r12, %rdi
	jg	.LBB96_89
	movzbl	-1(%rbp,%rdi), %ecx
	testb	%cl, %cl
	js	.LBB96_39
	decq	%rdi
	cmpl	$132, %ecx
	jg	.LBB96_56
.LBB96_54:
	cmpl	$32, %ecx
	ja	.LBB96_49
	movl	%ecx, %eax
	btq	%rax, %r15
	jb	.LBB96_63
	jmp	.LBB96_49
	.p2align	4, 0x90
.LBB96_39:
	cmpq	$5, %rdi
	movl	$4, %eax
	cmovgeq	%rdi, %rax
	leaq	-4(%rax), %rcx
	leaq	-2(%rdi), %r9
	cmpq	%rcx, %r9
	jge	.LBB96_41
	testq	%r9, %r9
	movl	$0, %eax
	cmovleq	%rax, %r9
	movq	%r9, %r15
	jmp	.LBB96_47
.LBB96_41:
	addq	$-5, %rax
	.p2align	4, 0x90
.LBB96_42:
	cmpq	%rdi, %r9
	jae	.LBB96_90
	movzbl	(%r14,%r9), %edx
	andb	$-64, %dl
	cmpb	$-128, %dl
	jne	.LBB96_46
	leaq	-1(%r9), %rdx
	cmpq	%rcx, %r9
	movq	%rdx, %r9
	jg	.LBB96_42
	movq	%rax, %r9
.LBB96_46:
	testq	%r9, %r9
	movl	$0, %r15d
	cmovgq	%r9, %r15
	cmpq	%rdi, %r9
	jg	.LBB96_91
.LBB96_47:
	leaq	(%r15,%rbp), %rax
	movq	%rdi, %rcx
	subq	%r15, %rcx
	movq	%rax, 56(%rsp)
	movq	%rcx, 64(%rsp)
	movl	$0, 52(%rsp)
	leaq	56(%rsp), %rcx
	leaq	52(%rsp), %rdx
	callq	utf8.decode_rune_in_bytes
	addq	%rax, %r15
	cmpq	%rdi, %r15
	jne	.LBB96_48
	movl	52(%rsp), %ecx
	subq	%rax, %rdi
	cmpl	$8191, %ecx
	jg	.LBB96_59
	movabsq	$4294983168, %r15
	cmpl	$132, %ecx
	jle	.LBB96_54
.LBB96_56:
	cmpl	$133, %ecx
	je	.LBB96_63
	cmpl	$160, %ecx
	je	.LBB96_63
	cmpl	$5760, %ecx
	je	.LBB96_63
	jmp	.LBB96_49
.LBB96_59:
	cmpl	$8203, %ecx
	movabsq	$4294983168, %r15
	jb	.LBB96_63
	leal	-8232(%rcx), %eax
	cmpl	$55, %eax
	jbe	.LBB96_62
.LBB96_61:
	cmpl	$12288, %ecx
	je	.LBB96_63
	jmp	.LBB96_49
.LBB96_64:
	movl	$1, %edi
	jmp	.LBB96_82
.LBB96_48:
	decq	%rdi
.LBB96_49:
	testq	%rdi, %rdi
	js	.LBB96_50
	cmpq	%rdi, %r12
	jbe	.LBB96_92
	movzbl	(%rbp,%rdi), %ecx
	testb	%cl, %cl
	js	.LBB96_67
.LBB96_50:
	movq	%rdi, %r13
	movl	$1, %edi
	jmp	.LBB96_82
.LBB96_67:
	movq	%r12, %rax
	subq	%rdi, %rax
	jle	.LBB96_68
	leaq	-245(%rcx), %rdx
	cmpq	$-51, %rdx
	jb	.LBB96_50
	movzbl	(%rcx,%rbx), %edx
	movl	%edx, %r8d
	andl	$7, %r8d
	cmpq	%r8, %rax
	jb	.LBB96_50
	cmpq	$1, %rax
	je	.LBB96_93
	shrl	$4, %edx
	leaq	utf8.accept_ranges(%rip), %r8
	movzbl	1(%rbp,%rdi), %r9d
	cmpb	(%r8,%rdx,2), %r9b
	jb	.LBB96_50
	cmpb	%r9b, 1(%r8,%rdx,2)
	jb	.LBB96_50
	leaq	-194(%rcx), %rdx
	cmpq	$30, %rdx
	jae	.LBB96_76
	movq	%rdi, %r13
	movl	$2, %edi
	jmp	.LBB96_82
.LBB96_68:
	movq	%rdi, %r13
	xorl	%edi, %edi
	jmp	.LBB96_82
.LBB96_76:
	cmpq	$2, %rax
	jbe	.LBB96_94
	cmpb	$-65, 2(%rbp,%rdi)
	jg	.LBB96_50
	andl	$-16, %ecx
	cmpl	$224, %ecx
	jne	.LBB96_80
	movq	%rdi, %r13
	movl	$3, %edi
	jmp	.LBB96_82
.LBB96_80:
	cmpq	$3, %rax
	je	.LBB96_95
	xorl	%eax, %eax
	cmpb	$-64, 3(%rbp,%rdi)
	setl	%al
	leaq	(%rax,%rax,2), %rax
	incq	%rax
	movq	%rdi, %r13
	movq	%rax, %rdi
	jmp	.LBB96_82
.LBB96_90:
	movq	%rdi, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$201, %edx
	movl	$19, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_89:
	movq	%r12, 40(%rsp)
	movq	%rdi, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2286, %edx
	movl	$47, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB96_86:
	movq	$1, 32(%rsp)
	leaq	.Lggv$184(%rip), %rcx
	movl	$1, %r9d
	movl	$542, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_87:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$184(%rip), %rcx
	movl	$2, %r9d
	movl	$549, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_96:
	movq	%r12, 40(%rsp)
	movq	%r13, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2393, %edx
	movl	$10, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB96_91:
	movq	%rdi, 40(%rsp)
	movq	%rdi, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$207, %edx
	movl	$25, %r8d
	movq	%r15, %r9
	callq	runtime.slice_handle_error
.LBB96_88:
	movq	$3, 32(%rsp)
	leaq	.Lggv$184(%rip), %rcx
	movl	$3, %r9d
	movl	$556, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_31:
	movq	%rax, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2338, %edx
	movl	$10, %r8d
	callq	runtime.slice_handle_error
.LBB96_92:
	movq	%r12, 32(%rsp)
	leaq	.Lggv$226(%rip), %rcx
	movl	$2387, %edx
	movl	$17, %r8d
	movq	%rdi, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_93:
	movq	$1, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$1, %r9d
	movl	$122, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_94:
	movq	%rax, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$2, %r9d
	movl	$129, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB96_95:
	movq	$3, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$3, %r9d
	movl	$136, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	"fmt.search_nul_termination-1911";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"fmt.search_nul_termination-1911":
	pushq	%rsi
	xorl	%eax, %eax
	testq	%r8, %r8
	je	.LBB97_25
	leaq	-1(%rdx), %r9
	leaq	.LJTI97_0(%rip), %r10
	.p2align	4, 0x90
.LBB97_2:
	testq	%rdx, %rdx
	jle	.LBB97_25
	testq	%rcx, %rcx
	je	.LBB97_25
	cmpq	$7, %r9
	ja	.LBB97_13
	movslq	(%r10,%r9,4), %r11
	addq	%r10, %r11
	jmpq	*%r11
.LBB97_6:
	cmpb	$0, (%rcx)
	jne	.LBB97_10
	jmp	.LBB97_25
.LBB97_7:
	cmpl	$0, (%rcx)
	jne	.LBB97_10
	jmp	.LBB97_25
.LBB97_8:
	cmpw	$0, (%rcx)
	jne	.LBB97_10
	jmp	.LBB97_25
.LBB97_9:
	cmpq	$0, (%rcx)
	je	.LBB97_25
.LBB97_10:
	addq	%rdx, %rcx
.LBB97_11:
	incq	%rax
	testq	%r8, %r8
	js	.LBB97_2
	cmpq	%r8, %rax
	jl	.LBB97_2
	jmp	.LBB97_25
.LBB97_13:
	leaq	7(%rcx), %rsi
	andq	$-8, %rsi
	leaq	(%rcx,%rdx), %r11
	cmpq	%rcx, %rsi
	jbe	.LBB97_16
	.p2align	4, 0x90
.LBB97_14:
	cmpb	$0, (%rcx)
	jne	.LBB97_23
	incq	%rcx
	cmpq	%rcx, %rsi
	jne	.LBB97_14
.LBB97_16:
	movq	%r11, %rcx
	andq	$-8, %rcx
	cmpq	%rcx, %rsi
	jae	.LBB97_19
	.p2align	4, 0x90
.LBB97_17:
	cmpq	$0, (%rsi)
	jne	.LBB97_23
	addq	$8, %rsi
	cmpq	%rcx, %rsi
	jb	.LBB97_17
.LBB97_19:
	cmpq	%r11, %rcx
	je	.LBB97_25
	.p2align	4, 0x90
.LBB97_20:
	cmpb	$0, (%rcx)
	jne	.LBB97_23
	incq	%rcx
	cmpq	%r11, %rcx
	jb	.LBB97_20
	jmp	.LBB97_25
.LBB97_23:
	movq	%r11, %rcx
	jmp	.LBB97_11
.LBB97_25:
	popq	%rsi
	retq
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI97_0:
	.long	.LBB97_6-.LJTI97_0
	.long	.LBB97_8-.LJTI97_0
	.long	.LBB97_13-.LJTI97_0
	.long	.LBB97_7-.LJTI97_0
	.long	.LBB97_13-.LJTI97_0
	.long	.LBB97_13-.LJTI97_0
	.long	.LBB97_13-.LJTI97_0
	.long	.LBB97_9-.LJTI97_0

	.def	fmt.fmt_array_nul_terminated;
	.scl	3;
	.type	32;
	.endef
	.text
	.p2align	4, 0x90
fmt.fmt_array_nul_terminated:
.seh_proc fmt.fmt_array_nul_terminated
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	movq	%rcx, %rsi
	testq	%rdx, %rdx
	je	.LBB98_1
	movq	%rdx, %rcx
	movq	%rdx, %rdi
	movq	%r9, %rdx
	movq	%r9, %rbx
	callq	"fmt.search_nul_termination-1911"
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	movq	%rax, %r8
	movq	%rbx, %r9
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	jmp	fmt.fmt_array
.LBB98_1:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB98_3
	movq	144(%rsp), %rdx
	movq	48(%rsi), %rcx
	movq	$0, 56(%rsp)
	movq	%rdx, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$24d(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	56(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB98_3:
	addq	$64, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
	.seh_endproc

	.def	fmt.fmt_array;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_array:
.seh_proc fmt.fmt_array
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$168, %rsp
	.seh_stackalloc 168
	.seh_endprologue
	movq	%r9, 104(%rsp)
	movq	%r8, %rbx
	movq	%rdx, %rbp
	movq	%rcx, %rsi
	movq	288(%rsp), %rdi
	testq	%rdx, %rdx
	jne	.LBB99_4
	testq	%rbx, %rbx
	jle	.LBB99_4
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_108
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$249(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	jmp	.LBB99_108
.LBB99_4:
	movl	280(%rsp), %r14d
	cmpl	$112, %r14d
	je	.LBB99_45
	movq	272(%rsp), %rax
	cmpl	$115, %r14d
	je	.LBB99_7
	cmpl	$113, %r14d
	jne	.LBB99_49
.LBB99_7:
	cmpq	$1, 104(%rax)
	movq	%rax, %rcx
	jne	.LBB99_10
	movq	%rax, %rcx
	.p2align	4, 0x90
.LBB99_9:
	movq	48(%rcx), %rcx
	cmpq	$1, 104(%rcx)
	je	.LBB99_9
.LBB99_10:
	movq	24(%rcx), %rcx
	movabsq	$72057594037928058, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB99_32
	movabsq	$-72057594037928059, %rdx
	addq	%rcx, %rdx
	cmpq	$16, %rdx
	ja	.LBB99_39
	leaq	.LJTI99_0(%rip), %rcx
	movslq	(%rcx,%rdx,4), %rdx
	addq	%rcx, %rdx
	jmpq	*%rdx
.LBB99_13:
	testq	%rbx, %rbx
	js	.LBB99_116
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r13d, %r13d
	leaq	64(%rsp), %r12
	jmp	.LBB99_18
	.p2align	4, 0x90
.LBB99_16:
	movl	$65533, %edx
.LBB99_17:
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r12, %r9
	callq	io.write_rune
	incq	%r13
	cmpq	%rbx, %r13
	jge	.LBB99_108
.LBB99_18:
	cmpq	%rbx, %r13
	jae	.LBB99_114
	movzwl	(%rbp,%r13,2), %eax
	rolw	$8, %ax
	leal	8192(%rax), %ecx
	movzwl	%cx, %ecx
	movzwl	%ax, %edx
	cmpl	$63487, %ecx
	jbe	.LBB99_17
	cmpl	$56319, %edx
	ja	.LBB99_16
	leaq	1(%r13), %r9
	cmpq	%rbx, %r9
	jge	.LBB99_16
	jae	.LBB99_115
	movzwl	2(%rbp,%r13,2), %eax
	movl	%eax, %ecx
	shll	$8, %ecx
	movzwl	%cx, %ecx
	cmpl	$56320, %ecx
	jb	.LBB99_16
	movl	%eax, %ecx
	andl	$224, %ecx
	movzwl	%cx, %ecx
	cmpl	$224, %ecx
	je	.LBB99_16
	rolw	$8, %ax
	movl	%eax, %ecx
	andl	$64512, %ecx
	cmpl	$56320, %ecx
	jne	.LBB99_30
	movzwl	%ax, %eax
	shll	$10, %edx
	addl	%eax, %edx
	addl	$-56613888, %edx
	jmp	.LBB99_31
.LBB99_30:
	movl	$65533, %edx
.LBB99_31:
	movq	%r9, %r13
	jmp	.LBB99_17
.LBB99_32:
	movabsq	$72057594037927938, %rdx
	cmpq	%rdx, %rcx
	je	.LBB99_94
	movabsq	$72057594037927947, %rdx
	cmpq	%rdx, %rcx
	je	.LBB99_96
	movabsq	$72057594037927960, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB99_44
	testq	%rbx, %rbx
	js	.LBB99_121
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r14d, %r14d
	leaq	64(%rsp), %r12
	.p2align	4, 0x90
.LBB99_38:
	movl	(%rbp,%r14,4), %edx
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r12, %r9
	callq	io.write_rune
	incq	%r14
	cmpq	%r14, %rbx
	jne	.LBB99_38
	jmp	.LBB99_108
.LBB99_39:
	movabsq	$4755801206503243794, %rdx
	cmpq	%rdx, %rcx
	jne	.LBB99_44
	testq	%rbx, %rbx
	js	.LBB99_125
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r14d, %r14d
	leaq	64(%rsp), %r12
	.p2align	4, 0x90
.LBB99_43:
	movl	(%rbp,%r14,4), %edx
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r12, %r9
	callq	io.write_rune
	incq	%r14
	cmpq	%r14, %rbx
	jne	.LBB99_43
	jmp	.LBB99_108
.LBB99_44:
	cmpl	$112, %r14d
	jne	.LBB99_49
.LBB99_45:
	cmpb	$0, 4(%rsi)
	jne	.LBB99_48
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_48
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	64(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$1d7(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB99_48:
	movq	%rdi, 48(%rsp)
	leaq	fmt.__DIGITS_UPPER(%rip), %rax
	movq	%rax, 40(%rsp)
	movq	$64, 32(%rsp)
	movl	$16, %r8d
	movq	%rsi, %rcx
	movq	%rbp, %rdx
	xorl	%r9d, %r9d
	callq	fmt._fmt_int
	jmp	.LBB99_108
.LBB99_49:
	movq	%rbx, 88(%rsp)
	movq	%rbp, %rbx
	movq	24(%rax), %rax
	movq	%rax, 96(%rsp)
	cmpl	$119, %r14d
	sete	%al
	shlb	$5, %al
	orb	$91, %al
	movb	%al, 63(%rsp)
	leaq	63(%rsp), %rbp
	movq	%rbp, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_51
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	64(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB99_51:
	cmpq	$0, 88(%rsp)
	jle	.LBB99_69
	incq	80(%rsi)
	cmpb	$0, 4(%rsi)
	je	.LBB99_70
	movb	$10, 63(%rsp)
	movq	%rbp, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_55
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	64(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB99_55:
	movq	32(%rsi), %rax
	movq	%rax, 128(%rsp)
	incq	%rax
	movq	%rax, 32(%rsi)
	xorl	%r15d, %r15d
	leaq	80(%rsp), %r13
	leaq	64(%rsp), %r12
	jmp	.LBB99_57
	.p2align	4, 0x90
.LBB99_56:
	incq	%r15
	cmpq	88(%rsp), %r15
	je	.LBB99_64
.LBB99_57:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB99_62
	xorl	%r14d, %r14d
	jmp	.LBB99_60
	.p2align	4, 0x90
.LBB99_59:
	incq	%r14
	cmpq	%rax, %r14
	jge	.LBB99_62
.LBB99_60:
	movb	$9, 63(%rsp)
	movq	%rbp, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB99_59
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB99_59
	.p2align	4, 0x90
.LBB99_62:
	movq	%r15, %rax
	imulq	104(%rsp), %rax
	addq	%rbx, %rax
	movq	%rax, 152(%rsp)
	movq	96(%rsp), %rax
	movq	%rax, 160(%rsp)
	movq	%rsi, %rcx
	leaq	152(%rsp), %rdx
	movl	280(%rsp), %r8d
	movq	%rdi, %r14
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_56
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%r14, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB99_56
.LBB99_64:
	movq	128(%rsp), %rcx
	movq	%rcx, 32(%rsi)
	testq	%rcx, %rcx
	jle	.LBB99_71
	xorl	%r14d, %r14d
	leaq	64(%rsp), %rbx
	jmp	.LBB99_67
	.p2align	4, 0x90
.LBB99_66:
	incq	%r14
	cmpq	%rcx, %r14
	jge	.LBB99_71
.LBB99_67:
	movb	$9, 63(%rsp)
	movq	%rbp, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_66
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rcx
	jmp	.LBB99_66
.LBB99_69:
	cmpl	$119, %r14d
	sete	%al
	jmp	.LBB99_72
.LBB99_70:
	movq	%rbx, 112(%rsp)
	movq	96(%rsp), %rax
	movq	%rax, 120(%rsp)
	leaq	112(%rsp), %rdx
	movq	%rsi, %rcx
	movl	%r14d, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	cmpq	$1, 88(%rsp)
	jne	.LBB99_109
.LBB99_71:
	cmpl	$119, 280(%rsp)
	sete	%al
	decq	80(%rsi)
.LBB99_72:
	shlb	$5, %al
	orb	$93, %al
	movb	%al, 63(%rsp)
	movq	%rbp, 64(%rsp)
	movq	$1, 72(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB99_108
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	64(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB99_108
.LBB99_74:
	testq	%rbx, %rbx
	js	.LBB99_117
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r14d, %r14d
	leaq	64(%rsp), %r12
	.p2align	4, 0x90
.LBB99_77:
	movl	(%rbp,%r14,4), %edx
	bswapl	%edx
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r12, %r9
	callq	io.write_rune
	incq	%r14
	cmpq	%r14, %rbx
	jne	.LBB99_77
	jmp	.LBB99_108
.LBB99_78:
	testq	%rbx, %rbx
	js	.LBB99_118
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r12d, %r12d
	leaq	64(%rsp), %r13
	jmp	.LBB99_83
	.p2align	4, 0x90
.LBB99_81:
	movl	%eax, %edx
.LBB99_82:
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r13, %r9
	callq	io.write_rune
	incq	%r12
	cmpq	%rbx, %r12
	jge	.LBB99_108
.LBB99_83:
	cmpq	%rbx, %r12
	jae	.LBB99_113
	movzwl	(%rbp,%r12,2), %eax
	leal	8192(%rax), %ecx
	movzwl	%cx, %ecx
	cmpl	$63487, %ecx
	jbe	.LBB99_81
	movl	$65533, %edx
	cmpl	$56319, %eax
	ja	.LBB99_82
	leaq	1(%r12), %r9
	cmpq	%rbx, %r9
	jge	.LBB99_82
	jae	.LBB99_115
	movzwl	2(%rbp,%r12,2), %ecx
	movl	%ecx, %r8d
	andl	$64512, %r8d
	cmpl	$56320, %r8d
	jne	.LBB99_82
	shll	$10, %eax
	leal	(%rax,%rcx), %edx
	addl	$-56613888, %edx
	movq	%r9, %r12
	jmp	.LBB99_82
.LBB99_90:
	testq	%rbx, %rbx
	js	.LBB99_119
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r14d, %r14d
	leaq	64(%rsp), %r12
	.p2align	4, 0x90
.LBB99_93:
	movl	(%rbp,%r14,4), %edx
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r12, %r9
	callq	io.write_rune
	incq	%r14
	cmpq	%r14, %rbx
	jne	.LBB99_93
	jmp	.LBB99_108
.LBB99_94:
	testq	%rbx, %rbx
	js	.LBB99_122
	movq	%rbp, 136(%rsp)
	movq	%rbx, 144(%rsp)
	leaq	136(%rsp), %rdx
	movq	%rsi, %rcx
	movl	%r14d, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_string
	jmp	.LBB99_108
.LBB99_96:
	testq	%rbx, %rbx
	js	.LBB99_123
	jle	.LBB99_108
	leaq	40(%rsi), %r15
	addq	$112, %rsi
	xorl	%r12d, %r12d
	leaq	64(%rsp), %r13
	jmp	.LBB99_101
	.p2align	4, 0x90
.LBB99_99:
	movl	%eax, %edx
.LBB99_100:
	movq	%rdi, 32(%rsp)
	movq	%r15, %rcx
	movq	%rsi, %r8
	movq	%r13, %r9
	callq	io.write_rune
	incq	%r12
	cmpq	%rbx, %r12
	jge	.LBB99_108
.LBB99_101:
	cmpq	%rbx, %r12
	jae	.LBB99_113
	movzwl	(%rbp,%r12,2), %eax
	leal	8192(%rax), %ecx
	movzwl	%cx, %ecx
	cmpl	$63487, %ecx
	jbe	.LBB99_99
	movl	$65533, %edx
	cmpl	$56319, %eax
	ja	.LBB99_100
	leaq	1(%r12), %r9
	cmpq	%rbx, %r9
	jge	.LBB99_100
	jae	.LBB99_115
	movzwl	2(%rbp,%r12,2), %ecx
	movl	%ecx, %r8d
	andl	$64512, %r8d
	cmpl	$56320, %r8d
	jne	.LBB99_100
	shll	$10, %eax
	leal	(%rax,%rcx), %edx
	addl	$-56613888, %edx
	movq	%r9, %r12
	jmp	.LBB99_100
.LBB99_108:
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB99_109:
	addq	104(%rsp), %rbx
	decq	88(%rsp)
	leaq	112(%rsp), %r12
	leaq	64(%rsp), %r15
	leaq	.Lggv$244(%rip), %r13
	jmp	.LBB99_111
	.p2align	4, 0x90
.LBB99_110:
	movq	%rbx, 112(%rsp)
	movq	96(%rsp), %rax
	movq	%rax, 120(%rsp)
	movq	%rsi, %rcx
	movq	%r12, %rdx
	movl	280(%rsp), %r8d
	movq	%r14, %r9
	callq	fmt.fmt_arg
	addq	104(%rsp), %rbx
	decq	88(%rsp)
	je	.LBB99_71
.LBB99_111:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	movq	%rdi, %r14
	je	.LBB99_110
	movq	48(%rsi), %rcx
	movq	$0, 64(%rsp)
	movq	%r14, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r13, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	64(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB99_110
.LBB99_113:
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2218, %edx
	movl	$19, %r8d
	movq	%r12, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB99_114:
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2218, %edx
	movl	$19, %r8d
	movq	%r13, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB99_115:
	movq	%rbx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2222, %edx
	movl	$18, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB99_116:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2243, %edx
	jmp	.LBB99_120
.LBB99_117:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2246, %edx
	jmp	.LBB99_120
.LBB99_118:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2242, %edx
	jmp	.LBB99_120
.LBB99_119:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2245, %edx
.LBB99_120:
	movl	$47, %r8d
	movq	%rbx, %r9
	callq	runtime.multi_pointer_slice_handle_error
.LBB99_121:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2244, %edx
	jmp	.LBB99_124
.LBB99_122:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2240, %edx
	movl	$52, %r8d
	movq	%rbx, %r9
	callq	runtime.multi_pointer_slice_handle_error
.LBB99_123:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2241, %edx
.LBB99_124:
	movl	$45, %r8d
	movq	%rbx, %r9
	callq	runtime.multi_pointer_slice_handle_error
.LBB99_125:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2247, %edx
	movl	$46, %r8d
	movq	%rbx, %r9
	callq	runtime.multi_pointer_slice_handle_error
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI99_0:
	.long	.LBB99_13-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_78-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_90-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_44-.LJTI99_0
	.long	.LBB99_74-.LJTI99_0
	.text
	.seh_endproc

	.def	fmt.fmt_named;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_named:
.seh_proc fmt.fmt_named
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$408, %rsp
	.seh_stackalloc 408
	.seh_endprologue
	movq	%rcx, %rsi
	movq	512(%rsp), %r15
	cmpl	$119, %r8d
	jne	.LBB100_1
.LBB100_120:
	movq	16(%r9), %rax
	leaq	32(%rax), %rcx
	movq	104(%rax), %r10
	cmpq	$29, %r10
	je	.LBB100_124
	cmpq	$23, %r10
	je	.LBB100_125
	cmpq	$19, %r10
	jne	.LBB100_126
	movq	64(%rcx), %rax
	movq	%rax, 400(%rsp)
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movups	48(%rcx), %xmm3
	movaps	%xmm3, 384(%rsp)
	movaps	%xmm2, 368(%rsp)
	movaps	%xmm1, 352(%rsp)
	movaps	%xmm0, 336(%rsp)
	movq	%r15, 40(%rsp)
	movq	%r9, 32(%rsp)
	leaq	336(%rsp), %r9
	movq	%rsi, %rcx
	callq	fmt.fmt_struct
	jmp	.LBB100_119
.LBB100_1:
	movq	8(%rdx), %rax
	movabsq	$6989586621679009951, %rcx
	cmpq	%rcx, %rax
	je	.LBB100_18
	movabsq	$3602879701896396957, %rcx
	cmpq	%rcx, %rax
	je	.LBB100_90
	movabsq	$3602879701896396843, %rcx
	cmpq	%rcx, %rax
	jne	.LBB100_120
	movq	(%rdx), %rax
	movq	32(%rax), %rcx
	movq	%rcx, 272(%rsp)
	movups	(%rax), %xmm0
	movups	16(%rax), %xmm1
	movaps	%xmm1, 256(%rsp)
	movaps	%xmm0, 240(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_7
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r15, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	240(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	movb	$40, 128(%rsp)
	leaq	128(%rsp), %rcx
	movq	%rcx, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB100_7
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_7:
	movslq	256(%rsp), %r8
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 112(%rsp)
	leaq	96(%rsp), %rdi
	movq	%rdi, 80(%rsp)
	movq	$32, 88(%rsp)
	movaps	%xmm0, 128(%rsp)
	movq	%r15, 64(%rsp)
	movq	%r15, %r13
	leaq	strconv.digits(%rip), %r15
	movq	%r15, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	leaq	128(%rsp), %r14
	leaq	80(%rsp), %rbx
	movl	$10, %r9d
	movq	%r14, %rcx
	movq	%rbx, %rdx
	callq	strconv.append_bits
	movaps	128(%rsp), %xmm0
	movups	%xmm0, 224(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_11
	movq	48(%rsi), %rcx
	movq	$0, 152(%rsp)
	movq	%r13, %r12
	movq	%r13, 48(%rsp)
	leaq	152(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	224(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	152(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	movl	260(%rsp), %ecx
	testl	%ecx, %ecx
	je	.LBB100_16
	movb	$58, 128(%rsp)
	movq	%r14, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB100_13
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r12, 48(%rsp)
	movq	%rbx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	movl	260(%rsp), %ecx
	jmp	.LBB100_13
.LBB100_125:
	leaq	.Lggv$24c(%rip), %rax
	movq	%rsi, %rcx
	movl	%r8d, %r9d
	movq	%rax, %r8
	addq	$408, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bit_set
.LBB100_124:
	movq	48(%rcx), %rax
	movq	%rax, 384(%rsp)
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movaps	%xmm2, 368(%rsp)
	movaps	%xmm1, 352(%rsp)
	movaps	%xmm0, 336(%rsp)
	movq	%r15, 40(%rsp)
	movq	%r9, 32(%rsp)
	leaq	336(%rsp), %r9
	movq	%rsi, %rcx
	callq	fmt.fmt_bit_field
	jmp	.LBB100_119
.LBB100_126:
	cmpl	$119, %r8d
	jne	.LBB100_131
	cmpq	$29, %r10
	ja	.LBB100_131
	movl	$694927360, %ecx
	btq	%r10, %rcx
	jae	.LBB100_131
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB100_131
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r15, 48(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	movq	%rdx, %rdi
	movl	$4, %edx
	movl	%r8d, %ebx
	movq	%r9, %r8
	movq	%r9, %r14
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%rdi, %rdx
	movl	%ebx, %r8d
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	16(%r14), %rax
.LBB100_131:
	movq	(%rdx), %rcx
	movq	%rcx, 288(%rsp)
	movq	24(%rax), %rax
	movq	%rax, 296(%rsp)
	leaq	288(%rsp), %rdx
	movq	%rsi, %rcx
	movq	%r15, %r9
	callq	fmt.fmt_value
	jmp	.LBB100_119
.LBB100_90:
	movq	%r15, 216(%rsp)
	movq	(%rdx), %rax
	movq	(%rax), %rcx
	movabsq	$1237940039285380275, %rdx
	movq	%rcx, %rax
	imulq	%rdx
	movq	%rdx, %r12
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$26, %r12
	addq	%rax, %r12
	movabsq	$9223372028715321600, %r8
	addq	%r12, %r8
	movabsq	$-4454547087429121353, %rdx
	movq	%r8, %rax
	mulq	%rdx
	movq	%rdx, %r10
	shrq	$16, %r10
	movabsq	$-5893541452261140249, %rdx
	movq	%r8, %rax
	mulq	%rdx
	shrq	$33, %rdx
	imulq	$400, %rdx, %rbx
	imulq	$-146097, %rdx, %r11
	addq	%r10, %r11
	movabsq	$-1896998432287073591, %rdx
	movq	%r11, %rax
	mulq	%rdx
	movq	%rdx, %rax
	shrq	$15, %rax
	shrq	$17, %rdx
	subq	%rdx, %rax
	imulq	$100, %rax, %rdi
	addq	%rbx, %rdi
	imulq	$-36524, %rax, %rbx
	addq	%r11, %rbx
	movabsq	$-5517609281458640695, %rdx
	movq	%rbx, %rax
	mulq	%rdx
	movq	%rdx, %r11
	shrq	$10, %r11
	imulq	$-1461, %r11, %r15
	addq	%rbx, %r15
	movabsq	$7429236654343298871, %rdx
	movq	%r15, %rax
	mulq	%rdx
	movq	%r15, %rax
	subq	%rdx, %rax
	shrq	%rax
	addq	%rdx, %rax
	movq	%rax, %rdx
	shrq	$8, %rdx
	shrq	$10, %rax
	subq	%rax, %rdx
	imulq	$-365, %rdx, %r14
	addq	%r15, %r14
	leaq	(%rdi,%r11,4), %rax
	movabsq	$-292277022399, %r11
	addq	%rax, %r11
	addq	%rdx, %r11
	testb	$3, %r11b
	jne	.LBB100_97
	movabsq	$-8116567392432202711, %rax
	imulq	%r11, %rax
	movabsq	$368934881474191032, %rdi
	addq	%rax, %rdi
	shrdq	$2, %rdi, %rdi
	movabsq	$-6640827866535438581, %rdx
	movq	%r11, %rax
	imulq	%rdx
	movabsq	$184467440737095516, %rax
	cmpq	%rax, %rdi
	ja	.LBB100_93
	addq	%r11, %rdx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$8, %rdx
	addq	%rax, %rdx
	imulq	$400, %rdx, %rax
	movq	%r11, %rdx
	subq	%rax, %rdx
	jne	.LBB100_97
.LBB100_93:
	cmpq	$59, %r14
	jle	.LBB100_94
	decq	%r14
	jmp	.LBB100_97
.LBB100_18:
	movq	(%rdx), %rax
	movq	(%rax), %rbx
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 176(%rsp)
	movaps	%xmm0, 160(%rsp)
	movq	%rbx, %rcx
	negq	%rcx
	cmovsq	%rbx, %rcx
	movb	$115, 191(%rsp)
	cmpq	$1000000000, %rcx
	jae	.LBB100_19
	testq	%rbx, %rbx
	je	.LBB100_28
	cmpq	$1000, %rcx
	jae	.LBB100_26
	movb	$110, 190(%rsp)
	movl	$30, %r8d
	jmp	.LBB100_49
.LBB100_19:
	movl	$31, %r11d
	xorl	%r10d, %r10d
	movabsq	$-3689348814741910323, %r14
	xorl	%edi, %edi
.LBB100_20:
	movq	%rcx, %rax
	mulq	%r14
	movq	%rdx, %r8
	movq	%r11, %r9
	shrq	$3, %r8
	leaq	(%r8,%r8), %rax
	leaq	(%rax,%rax,4), %rdx
	movq	%rcx, %rax
	subq	%rdx, %rax
	testb	$1, %dil
	jne	.LBB100_61
	testq	%rax, %rax
	jne	.LBB100_61
	incq	%r10
	cmpq	$9, %r10
	je	.LBB100_23
	.p2align	4, 0x90
.LBB100_59:
	movq	%r8, %rax
	mulq	%r14
	movq	%rdx, %rcx
	shrq	$3, %rcx
	leaq	(%rcx,%rcx), %rax
	leaq	(%rax,%rax,4), %rdx
	movq	%r8, %rax
	subq	%rdx, %rax
	jne	.LBB100_60
	incq	%r10
	movq	%rcx, %r8
	cmpq	$9, %r10
	jne	.LBB100_59
	jmp	.LBB100_65
.LBB100_60:
	movq	%r8, %rcx
.LBB100_61:
	leaq	-1(%r9), %r11
	cmpq	$31, %r11
	jae	.LBB100_134
	orb	$48, %al
	movb	%al, 160(%rsp,%r11)
	movq	%rcx, %rax
	mulq	%r14
	movq	%rdx, %rcx
	shrq	$3, %rcx
	incq	%r10
	movb	$1, %dil
	cmpq	$9, %r10
	jne	.LBB100_20
	addq	$-2, %r9
	cmpq	$31, %r9
	jae	.LBB100_141
	movb	$46, 160(%rsp,%r9)
	jmp	.LBB100_65
.LBB100_11:
	movl	260(%rsp), %ecx
	testl	%ecx, %ecx
	je	.LBB100_119
	movq	%r13, %r12
.LBB100_13:
	movslq	%ecx, %r8
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 96(%rsp)
	movaps	%xmm0, 112(%rsp)
	movq	%rdi, 80(%rsp)
	movq	$32, 88(%rsp)
	movaps	%xmm0, 128(%rsp)
	movq	%r12, 64(%rsp)
	movq	%r15, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	leaq	128(%rsp), %rcx
	leaq	80(%rsp), %rdx
	movl	$10, %r9d
	callq	strconv.append_bits
	movaps	128(%rsp), %xmm0
	movups	%xmm0, 224(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_14
	movq	48(%rsi), %rcx
	movq	$0, 152(%rsp)
	movq	%r12, 48(%rsp)
	leaq	152(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	224(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	152(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	jmp	.LBB100_16
.LBB100_14:
	xorl	%eax, %eax
.LBB100_16:
	movb	$41, 128(%rsp)
	movq	%r14, 96(%rsp)
	movq	$1, 104(%rsp)
	testq	%rax, %rax
	je	.LBB100_119
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r12, 48(%rsp)
	movq	%rbx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	jmp	.LBB100_118
.LBB100_28:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_119
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r15, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$212(%rip), %r8
	jmp	.LBB100_117
.LBB100_26:
	movq	%r15, %r13
	cmpq	$999999, %rcx
	ja	.LBB100_30
	movw	$-19006, 189(%rsp)
	movl	$29, %r11d
	movl	$3, %r14d
	jmp	.LBB100_31
.LBB100_94:
	jne	.LBB100_97
	movl	$29, %r14d
	movl	$2, %eax
	movq	%rax, 200(%rsp)
	jmp	.LBB100_103
.LBB100_97:
	movabsq	$-8925843906633654007, %rdx
	movq	%r14, %rax
	imulq	%rdx
	addq	%r14, %rdx
	movq	%rdx, %rax
	shrq	$63, %rax
	sarq	$4, %rdx
	leaq	(%rdx,%rax), %r9
	incq	%r9
	cmpq	$13, %r9
	jae	.LBB100_139
	addq	%rax, %rdx
	leaq	time.days_before(%rip), %rdi
	movslq	4(%rdi,%rdx,4), %rax
	cmpq	%rax, %r14
	jge	.LBB100_99
	cmpq	$13, %rdx
	jae	.LBB100_140
	movslq	(%rdi,%rdx,4), %rax
	jmp	.LBB100_102
.LBB100_99:
	addq	$2, %rdx
	movq	%rdx, %r9
.LBB100_102:
	movq	%r9, 200(%rsp)
	subq	%rax, %r14
	incq	%r14
.LBB100_103:
	imulq	$1000000000, %r12, %rax
	subq	%rax, %rcx
	imulq	$86400, %r10, %rax
	subq	%rax, %r8
	movl	%r8d, %eax
	movl	$2443359173, %r12d
	imulq	%rax, %r12
	shrq	$43, %r12
	imulq	$-3600, %r12, %rbp
	addq	%r8, %rbp
	movslq	%ebp, %rdi
	imulq	$-2004318071, %rdi, %rax
	shrq	$32, %rax
	addl	%eax, %edi
	movl	%edi, %r13d
	shrl	$31, %r13d
	sarl	$5, %edi
	movabsq	$8139454208000000000, %rbx
	addq	%rcx, %rbx
	movq	%rbx, %rax
	shrq	$9, %rax
	movabsq	$19342813113834067, %rcx
	mulq	%rcx
	movq	%rdx, 208(%rsp)
	movl	$4, %r8d
	movq	%rsi, %rcx
	movq	%r11, %rdx
	movq	216(%rsp), %r15
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movb	$45, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_105
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_105:
	addl	%r13d, %edi
	movl	$2, %r8d
	movq	%rsi, %rcx
	movq	200(%rsp), %rdx
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movb	$45, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_107
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_107:
	movslq	%edi, %r13
	movl	$2, %r8d
	movq	%rsi, %rcx
	movq	%r14, %rdx
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movb	$32, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_109
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_109:
	movq	208(%rsp), %rdi
	shrq	$11, %rdi
	imulq	$-60, %r13, %r14
	movl	$2, %r8d
	movq	%rsi, %rcx
	movq	%r12, %rdx
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movb	$58, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_111
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_111:
	imulq	$1000000000, %rdi, %rdi
	addq	%rbp, %r14
	movl	$2, %r8d
	movq	%rsi, %rcx
	movq	%r13, %rdx
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movb	$58, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_113
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_113:
	subq	%rdi, %rbx
	movl	$2, %r8d
	movq	%rsi, %rcx
	movq	%r14, %rdx
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movb	$46, 128(%rsp)
	leaq	128(%rsp), %rax
	movq	%rax, 96(%rsp)
	movq	$1, 104(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_115
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%r15, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	96(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB100_115:
	movl	$9, %r8d
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	movq	%r15, %r9
	callq	"fmt.fmt_named.write_padded_number-0"
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_119
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r15, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$222(%rip), %r8
	jmp	.LBB100_117
.LBB100_30:
	movb	$109, 190(%rsp)
	movl	$30, %r11d
	movl	$6, %r14d
.LBB100_31:
	xorl	%edi, %edi
	movabsq	$-3689348814741910323, %r15
	xorl	%r12d, %r12d
	movq	%r11, %r9
.LBB100_32:
	movq	%rcx, %rax
	mulq	%r15
	movq	%rdx, %r8
	movq	%r9, %r10
	shrq	$3, %r8
	leaq	(%r8,%r8), %rax
	leaq	(%rax,%rax,4), %rdx
	movq	%rcx, %rax
	subq	%rdx, %rax
	testb	$1, %r12b
	jne	.LBB100_39
	testq	%rax, %rax
	jne	.LBB100_39
	incq	%rdi
	cmpq	%r14, %rdi
	je	.LBB100_35
	.p2align	4, 0x90
.LBB100_37:
	movq	%r8, %rax
	mulq	%r15
	movq	%rdx, %rcx
	shrq	$3, %rcx
	leaq	(%rcx,%rcx), %rax
	leaq	(%rax,%rax,4), %rdx
	movq	%r8, %rax
	subq	%rdx, %rax
	jne	.LBB100_38
	incq	%rdi
	movq	%rcx, %r8
	cmpq	%rdi, %r14
	jne	.LBB100_37
	jmp	.LBB100_45
.LBB100_38:
	movq	%r8, %rcx
.LBB100_39:
	leaq	-1(%r10), %r9
	cmpq	%r11, %r9
	jae	.LBB100_132
	orb	$48, %al
	movb	%al, 160(%rsp,%r9)
	movq	%rcx, %rax
	mulq	%r15
	movq	%rdx, %rcx
	shrq	$3, %rcx
	incq	%rdi
	movb	$1, %r12b
	cmpq	%r14, %rdi
	jne	.LBB100_32
	addq	$-2, %r10
	cmpq	%r11, %r10
	jae	.LBB100_42
	movb	$46, 160(%rsp,%r10)
	jmp	.LBB100_45
.LBB100_23:
	movq	%r8, %rcx
.LBB100_65:
	movabsq	$2459565876494606883, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	movq	%rdx, %r8
	shrq	$3, %r8
	imulq	$60, %r8, %rax
	movq	%rcx, %r11
	subq	%rax, %r11
	je	.LBB100_69
	movq	%r9, %rdi
	.p2align	4, 0x90
.LBB100_67:
	leaq	-1(%rdi), %r10
	cmpq	%r9, %r10
	jae	.LBB100_68
	movq	%r11, %rax
	mulq	%r14
	shrq	$3, %rdx
	leal	(%rdx,%rdx), %eax
	leal	(%rax,%rax,4), %eax
	movl	%r11d, %ebp
	subl	%eax, %ebp
	orb	$48, %bpl
	movb	%bpl, 159(%rsp,%rdi)
	movq	%r10, %rdi
	cmpq	$9, %r11
	movq	%rdx, %r11
	ja	.LBB100_67
	cmpq	$60, %rcx
	jae	.LBB100_73
	jmp	.LBB100_84
.LBB100_69:
	subq	$1, %r9
	jb	.LBB100_135
	movb	$48, 160(%rsp,%r9)
	movq	%r9, %r10
	cmpq	$60, %rcx
	jb	.LBB100_84
.LBB100_73:
	leaq	-1(%r10), %r9
	cmpq	$32, %r9
	jae	.LBB100_136
	movabsq	$307445734561825861, %rdx
	movq	%r8, %rax
	mulq	%rdx
	movb	$109, 160(%rsp,%r9)
	imulq	$60, %rdx, %rax
	addq	$-2, %r10
	subq	%rax, %r8
	je	.LBB100_78
	.p2align	4, 0x90
.LBB100_75:
	cmpq	%r9, %r10
	jae	.LBB100_68
	movq	%r8, %rax
	mulq	%r14
	shrq	$3, %rdx
	leal	(%rdx,%rdx), %eax
	leal	(%rax,%rax,4), %eax
	movl	%r8d, %r11d
	subl	%eax, %r11d
	orb	$48, %r11b
	movb	%r11b, 160(%rsp,%r10)
	decq	%r10
	cmpq	$9, %r8
	movq	%rdx, %r8
	ja	.LBB100_75
	incq	%r10
	jmp	.LBB100_80
.LBB100_78:
	testq	%r9, %r9
	je	.LBB100_55
	movb	$48, 160(%rsp,%r10)
.LBB100_80:
	cmpq	$3600, %rcx
	jb	.LBB100_84
	decq	%r10
	cmpq	$32, %r10
	jae	.LBB100_82
	movabsq	$2623536934927580675, %rdx
	movq	%rcx, %rax
	mulq	%rdx
	shrq	$9, %rdx
	movb	$104, 160(%rsp,%r10)
	leaq	160(%rsp), %rax
	movq	%rax, 320(%rsp)
	movq	%r10, 328(%rsp)
	leaq	320(%rsp), %rcx
	callq	"fmt.fmt_named.fint-2"
	movq	%rax, %r10
	testq	%rbx, %rbx
	jns	.LBB100_87
	jmp	.LBB100_85
.LBB100_35:
	movq	%r8, %rcx
.LBB100_45:
	movq	%r13, %r15
	cmpq	$33, %r10
	jae	.LBB100_133
	testq	%rcx, %rcx
	je	.LBB100_54
	movq	%r10, %r8
.LBB100_49:
	movabsq	$-3689348814741910323, %r9
	movq	%r8, %r11
	.p2align	4, 0x90
.LBB100_50:
	leaq	-1(%r11), %r10
	cmpq	%r8, %r10
	jae	.LBB100_51
	movq	%rcx, %rax
	mulq	%r9
	shrq	$3, %rdx
	leal	(%rdx,%rdx), %eax
	leal	(%rax,%rax,4), %eax
	movl	%ecx, %edi
	subl	%eax, %edi
	orb	$48, %dil
	movb	%dil, 159(%rsp,%r11)
	movq	%r10, %r11
	cmpq	$10, %rcx
	movq	%rdx, %rcx
	jae	.LBB100_50
.LBB100_84:
	testq	%rbx, %rbx
	js	.LBB100_85
.LBB100_87:
	cmpq	$33, %r10
	jb	.LBB100_88
	movq	$32, 40(%rsp)
	movq	$32, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2395, %edx
	movl	$41, %r8d
	movq	%r10, %r9
	callq	runtime.slice_handle_error
.LBB100_54:
	subq	$1, %r10
	jb	.LBB100_55
	movb	$48, 160(%rsp,%r10)
	testq	%rbx, %rbx
	jns	.LBB100_87
.LBB100_85:
	decq	%r10
	cmpq	$32, %r10
	jae	.LBB100_137
	movb	$45, 160(%rsp,%r10)
.LBB100_88:
	leaq	(%rsp,%r10), %rax
	addq	$160, %rax
	movl	$32, %ecx
	subq	%r10, %rcx
	movq	%rax, 304(%rsp)
	movq	%rcx, 312(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB100_119
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r15, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	304(%rsp), %r8
.LBB100_117:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
.LBB100_118:
	addq	%rax, 112(%rsi)
.LBB100_119:
	addq	$408, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB100_68:
	movq	%r9, 32(%rsp)
	jmp	.LBB100_52
.LBB100_51:
	movq	%r8, 32(%rsp)
.LBB100_52:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2334, %edx
.LBB100_53:
	movl	$11, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_134:
	movq	$31, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2315, %edx
	movl	$11, %r8d
	movq	$-1, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_139:
	movq	$13, 32(%rsp)
	leaq	.Lggv$1ab(%rip), %rcx
	movl	$862, %edx
	movl	$25, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_140:
	movq	$13, 32(%rsp)
	leaq	.Lggv$1ab(%rip), %rcx
	movq	%rdx, %r9
	movl	$868, %edx
	movl	$27, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_132:
	movq	%r11, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2315, %edx
	movl	$11, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_137:
	movq	$32, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2393, %edx
	movl	$9, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_136:
	movq	$32, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2380, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_135:
	movq	$0, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2330, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_133:
	movq	%r10, 32(%rsp)
	movq	$32, 40(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2371, %edx
	movl	$17, %r8d
	xorl	%r9d, %r9d
	callq	runtime.slice_handle_error
.LBB100_55:
	movq	$0, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2330, %edx
.LBB100_43:
	movl	$10, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_82:
	movq	$32, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2385, %edx
	jmp	.LBB100_53
.LBB100_141:
	movq	$31, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2321, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB100_42:
	movq	%r11, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2321, %edx
	jmp	.LBB100_43
	.seh_endproc

	.def	fmt.fmt_union;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_union:
.seh_proc fmt.fmt_union
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$112, %rsp
	.seh_stackalloc 112
	.seh_endprologue
	movq	%r9, %rax
	movq	184(%rsp), %r9
	cmpq	$0, 176(%rsp)
	je	.LBB101_1
	movq	8(%rax), %rsi
	cmpq	$1, %rsi
	jne	.LBB101_13
	movq	(%rax), %r10
	movq	(%r10), %r10
	testq	%r10, %r10
	je	.LBB101_13
	movq	104(%r10), %r11
	cmpq	$1, %r11
	jne	.LBB101_8
	movq	%r10, %rdi
	.p2align	4, 0x90
.LBB101_7:
	movq	48(%rdi), %rdi
	movq	104(%rdi), %r11
	cmpq	$1, %r11
	je	.LBB101_7
.LBB101_8:
	cmpq	$11, %r11
	jne	.LBB101_13
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.LBB101_1
	movq	24(%r10), %rdx
	movq	%rax, 96(%rsp)
	movq	%rdx, 104(%rsp)
	leaq	96(%rsp), %rdx
	jmp	.LBB101_11
.LBB101_13:
	movq	(%rdx), %rdx
	movq	16(%rax), %r10
	movq	24(%rax), %r11
	movq	24(%r11), %r11
	movabsq	$4683743612465315848, %rdi
	cmpq	%rdi, %r11
	jg	.LBB101_16
	movabsq	$-72057594037927938, %rdi
	addq	%rdi, %r11
	cmpq	$29, %r11
	ja	.LBB101_26
	leaq	.LJTI101_0(%rip), %rdi
	movslq	(%rdi,%r11,4), %r11
	addq	%rdi, %r11
	jmpq	*%r11
.LBB101_30:
	movzbl	(%rdx,%r10), %r10d
	jmp	.LBB101_31
.LBB101_16:
	movabsq	$4683743612465315862, %rdi
	cmpq	%rdi, %r11
	jg	.LBB101_20
	movabsq	$4683743612465315849, %rbx
	cmpq	%rbx, %r11
	jne	.LBB101_18
	movswq	(%rdx,%r10), %r10
	jmp	.LBB101_28
.LBB101_20:
	movabsq	$4683743612465315863, %rdi
	cmpq	%rdi, %r11
	jne	.LBB101_21
.LBB101_25:
	movq	(%rdx,%r10), %r10
	jmp	.LBB101_28
.LBB101_18:
	cmpq	%rdi, %r11
	jne	.LBB101_26
	movslq	(%rdx,%r10), %r10
	jmp	.LBB101_28
.LBB101_21:
	movabsq	$4683743612465315981, %rdi
	cmpq	%rdi, %r11
	jne	.LBB101_26
	movsbq	(%rdx,%r10), %r10
.LBB101_28:
	testq	%r10, %r10
	js	.LBB101_29
.LBB101_31:
	testq	%rdx, %rdx
	je	.LBB101_1
	cmpb	$0, 41(%rax)
	je	.LBB101_35
	cmpq	%rsi, %r10
	jae	.LBB101_38
	movq	(%rax), %rax
	movq	(%rax,%r10,8), %rax
	movq	24(%rax), %rax
	movq	%rdx, 80(%rsp)
	movq	%rax, 88(%rsp)
	leaq	80(%rsp), %rdx
	jmp	.LBB101_11
.LBB101_35:
	testq	%r10, %r10
	je	.LBB101_1
	leaq	-1(%r10), %r11
	cmpq	%rsi, %r11
	jae	.LBB101_39
	movq	(%rax), %rax
	movq	-8(%rax,%r10,8), %rax
	movq	24(%rax), %rax
	movq	%rdx, 64(%rsp)
	movq	%rax, 72(%rsp)
	leaq	64(%rsp), %rdx
.LBB101_11:
	callq	fmt.fmt_arg
	jmp	.LBB101_12
.LBB101_1:
	movq	40(%rcx), %r10
	testq	%r10, %r10
	je	.LBB101_12
	movq	48(%rcx), %rax
	movq	$0, 56(%rsp)
	movq	%r9, 48(%rsp)
	leaq	56(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$249(%rip), %r8
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rcx
	xorl	%r9d, %r9d
	callq	*%r10
	movq	56(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB101_12:
	addq	$112, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	retq
.LBB101_23:
	movzwl	(%rdx,%r10), %r10d
	jmp	.LBB101_31
.LBB101_24:
	movl	(%rdx,%r10), %r10d
	jmp	.LBB101_31
.LBB101_38:
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2494, %edx
	movl	$23, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB101_39:
	movq	%rsi, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2499, %edx
	movl	$23, %r8d
	movq	%r11, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB101_26:
	movq	32(%r9), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$1bd(%rip), %rcx
	leaq	.Lggv$22b(%rip), %rdx
	leaq	.Lggv$22a(%rip), %r8
	callq	*%r10
.LBB101_29:
	movq	32(%r9), %rax
	testq	%rax, %rax
	leaq	runtime.default_assertion_failure_proc(%rip), %r10
	cmovneq	%rax, %r10
	leaq	.Lggv$267(%rip), %rcx
	leaq	.Lggv$24c(%rip), %rdx
	leaq	.Lggv$22c(%rip), %r8
	callq	*%r10
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI101_0:
	.long	.LBB101_30-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_23-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_24-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_26-.LJTI101_0
	.long	.LBB101_25-.LJTI101_0
	.text
	.seh_endproc

	.def	fmt.fmt_matrix;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_matrix:
.seh_proc fmt.fmt_matrix
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$152, %rsp
	.seh_stackalloc 152
	.seh_endprologue
	movq	%r9, %r14
	movq	%rdx, %r15
	movq	%rcx, %rsi
	movq	256(%rsp), %rdi
	movl	%r8d, 100(%rsp)
	cmpl	$119, %r8d
	jne	.LBB102_2
	movb	$123, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	jne	.LBB102_5
	jmp	.LBB102_6
.LBB102_2:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_6
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$232(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	movb	$91, 71(%rsp)
	leaq	71(%rsp), %rcx
	movq	%rcx, 80(%rsp)
	movq	$1, 88(%rsp)
	testq	%rax, %rax
	je	.LBB102_6
.LBB102_5:
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB102_6:
	incq	32(%rsi)
	cmpb	$0, 4(%rsi)
	je	.LBB102_35
	movb	$10, 71(%rsp)
	leaq	71(%rsp), %rbp
	movq	%rbp, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_9
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB102_9:
	cmpq	$0, 24(%r14)
	jle	.LBB102_57
	xorl	%r13d, %r13d
	leaq	80(%rsp), %r12
	jmp	.LBB102_11
	.p2align	4, 0x90
.LBB102_34:
	incq	%r13
	cmpq	24(%r14), %r13
	jge	.LBB102_57
.LBB102_11:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB102_16
	xorl	%ebx, %ebx
	jmp	.LBB102_13
	.p2align	4, 0x90
.LBB102_15:
	incq	%rbx
	cmpq	%rax, %rbx
	jge	.LBB102_16
.LBB102_13:
	movb	$9, 71(%rsp)
	movq	%rbp, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB102_15
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r12, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB102_15
	.p2align	4, 0x90
.LBB102_16:
	cmpq	$0, 32(%r14)
	jle	.LBB102_32
	movzbl	40(%r14), %ecx
	movq	%r13, %rax
	testl	%ecx, %ecx
	je	.LBB102_21
	cmpl	$1, %ecx
	jne	.LBB102_19
	movq	16(%r14), %rax
	imulq	%r13, %rax
.LBB102_21:
	imulq	8(%r14), %rax
	jmp	.LBB102_22
	.p2align	4, 0x90
.LBB102_19:
	xorl	%eax, %eax
.LBB102_22:
	addq	(%r15), %rax
	movq	%rax, 104(%rsp)
	movq	(%r14), %rax
	movq	24(%rax), %rax
	movq	%rax, 112(%rsp)
	movq	%rsi, %rcx
	leaq	104(%rsp), %rdx
	movl	100(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	cmpq	$2, 32(%r14)
	jl	.LBB102_32
	movl	$1, %ebx
	jmp	.LBB102_24
	.p2align	4, 0x90
.LBB102_29:
	movq	%r13, %rax
	movq	%rbx, %rcx
.LBB102_30:
	imulq	16(%r14), %rax
	addq	%rcx, %rax
	imulq	8(%r14), %rax
.LBB102_31:
	addq	(%r15), %rax
	movq	%rax, 104(%rsp)
	movq	(%r14), %rax
	movq	24(%rax), %rax
	movq	%rax, 112(%rsp)
	movq	%rsi, %rcx
	leaq	104(%rsp), %rdx
	movl	100(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	incq	%rbx
	cmpq	32(%r14), %rbx
	jge	.LBB102_32
.LBB102_24:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_26
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB102_26:
	movzbl	40(%r14), %edx
	cmpl	$1, %edx
	je	.LBB102_29
	movq	%rbx, %rax
	movq	%r13, %rcx
	testl	%edx, %edx
	je	.LBB102_30
	xorl	%eax, %eax
	jmp	.LBB102_31
	.p2align	4, 0x90
.LBB102_32:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_34
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB102_34
.LBB102_35:
	cmpl	$119, 100(%rsp)
	leaq	.Lcsbs$116(%rip), %rax
	leaq	.Lcsbs$12e(%rip), %rcx
	cmoveq	%rax, %rcx
	movq	%rcx, 136(%rsp)
	movq	$2, 144(%rsp)
	cmpq	$0, 24(%r14)
	jle	.LBB102_57
	xorl	%ebp, %ebp
	leaq	120(%rsp), %r12
	leaq	80(%rsp), %r13
	jmp	.LBB102_37
	.p2align	4, 0x90
.LBB102_56:
	incq	%rbp
	cmpq	24(%r14), %rbp
	jge	.LBB102_57
.LBB102_37:
	testq	%rbp, %rbp
	je	.LBB102_40
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_40
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	136(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB102_40:
	cmpq	$0, 32(%r14)
	jle	.LBB102_56
	movzbl	40(%r14), %ecx
	movq	%rbp, %rax
	testl	%ecx, %ecx
	je	.LBB102_45
	cmpl	$1, %ecx
	jne	.LBB102_43
	movq	16(%r14), %rax
	imulq	%rbp, %rax
.LBB102_45:
	imulq	8(%r14), %rax
	jmp	.LBB102_46
	.p2align	4, 0x90
.LBB102_43:
	xorl	%eax, %eax
.LBB102_46:
	addq	(%r15), %rax
	movq	%rax, 120(%rsp)
	movq	(%r14), %rax
	movq	24(%rax), %rax
	movq	%rax, 128(%rsp)
	movq	%rsi, %rcx
	movq	%r12, %rdx
	movl	100(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	cmpq	$2, 32(%r14)
	jl	.LBB102_56
	movl	$1, %ebx
	jmp	.LBB102_48
	.p2align	4, 0x90
.LBB102_53:
	movq	%rbp, %rax
	movq	%rbx, %rcx
.LBB102_54:
	imulq	16(%r14), %rax
	addq	%rcx, %rax
	imulq	8(%r14), %rax
.LBB102_55:
	addq	(%r15), %rax
	movq	%rax, 120(%rsp)
	movq	(%r14), %rax
	movq	24(%rax), %rax
	movq	%rax, 128(%rsp)
	movq	%rsi, %rcx
	movq	%r12, %rdx
	movl	100(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	incq	%rbx
	cmpq	32(%r14), %rbx
	jge	.LBB102_56
.LBB102_48:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_50
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB102_50:
	movzbl	40(%r14), %edx
	cmpl	$1, %edx
	je	.LBB102_53
	movq	%rbx, %rax
	movq	%rbp, %rcx
	testl	%edx, %edx
	je	.LBB102_54
	xorl	%eax, %eax
	jmp	.LBB102_55
.LBB102_57:
	movq	32(%rsi), %rax
	decq	%rax
	movq	%rax, 32(%rsi)
	cmpb	$0, 4(%rsi)
	je	.LBB102_63
	testq	%rax, %rax
	jle	.LBB102_63
	xorl	%ebx, %ebx
	leaq	71(%rsp), %r15
	leaq	72(%rsp), %r12
	leaq	80(%rsp), %r14
	jmp	.LBB102_60
	.p2align	4, 0x90
.LBB102_62:
	incq	%rbx
	cmpq	%rax, %rbx
	jge	.LBB102_63
.LBB102_60:
	movb	$9, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB102_62
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r12, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r14, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB102_62
.LBB102_63:
	cmpl	$119, 100(%rsp)
	sete	%al
	shlb	$5, %al
	orb	$93, %al
	movb	%al, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB102_65
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB102_65:
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	fmt.fmt_bit_field;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_bit_field:
.seh_proc fmt.fmt_bit_field
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$296, %rsp
	.seh_stackalloc 296
	movaps	%xmm6, 272(%rsp)
	.seh_savexmm %xmm6, 272
	.seh_endprologue
	movq	%r9, 136(%rsp)
	movq	%rdx, 208(%rsp)
	movq	%rcx, %rsi
	movq	400(%rsp), %rcx
	movq	8(%rcx), %rax
	testq	%rax, %rax
	jne	.LBB103_3
	cmpl	$119, %r8d
	je	.LBB103_3
	movl	$9, %eax
	leaq	.Lcsbs$16e(%rip), %rcx
	jmp	.LBB103_4
.LBB103_3:
	movq	(%rcx), %rcx
.LBB103_4:
	movq	408(%rsp), %rbx
	movq	%rcx, 240(%rsp)
	movq	%rax, 248(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	movl	%r8d, 116(%rsp)
	je	.LBB103_7
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	240(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	movb	$123, 120(%rsp)
	leaq	120(%rsp), %rcx
	movq	%rcx, 72(%rsp)
	movq	$1, 80(%rsp)
	testq	%rax, %rax
	je	.LBB103_7
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB103_7:
	movzbl	4(%rsi), %ecx
	movq	32(%rsi), %rdi
	leaq	1(%rdi), %rax
	movq	%rax, 32(%rsi)
	movb	%cl, 71(%rsp)
	testb	%cl, %cl
	je	.LBB103_10
	movb	$10, 120(%rsp)
	leaq	120(%rsp), %rax
	movq	%rax, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB103_10
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%rbx, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB103_10:
	movq	136(%rsp), %rbx
	movq	48(%rbx), %rax
	movq	%rax, 144(%rsp)
	testq	%rax, %rax
	js	.LBB103_13
	je	.LBB103_23
	movq	8(%rbx), %rax
	movq	%rax, 216(%rsp)
	movq	$-1, 168(%rsp)
	xorl	%r14d, %r14d
	xorps	%xmm6, %xmm6
	leaq	.LJTI103_2(%rip), %r13
	leaq	.LJTI103_0(%rip), %rbp
	xorl	%r12d, %r12d
	leaq	(,%r12,8), %r15
	jmp	.LBB103_14
	.p2align	4, 0x90
.LBB103_22:
	incq	%r12
	addq	$8, %r15
	cmpq	144(%rsp), %r12
	jge	.LBB103_23
.LBB103_14:
	movq	216(%rsp), %rax
	movups	(%rax,%r15,2), %xmm0
	movups	%xmm0, 256(%rsp)
	movq	40(%rbx), %rax
	movups	(%rax,%r15,2), %xmm0
	movups	%xmm0, 72(%rsp)
	movaps	%xmm6, 96(%rsp)
	leaq	72(%rsp), %rcx
	leaq	.Lggv$27a(%rip), %rdx
	leaq	96(%rsp), %r8
	callq	reflect.struct_tag_lookup
	movaps	96(%rsp), %xmm0
	movups	%xmm0, 120(%rsp)
	testb	%al, %al
	je	.LBB103_15
	movaps	%xmm6, 176(%rsp)
	leaq	176(%rsp), %rcx
	leaq	120(%rsp), %rdx
	callq	strings.trim_space
	movq	176(%rsp), %rax
	movq	184(%rsp), %rcx
	cmpq	$1, %rcx
	jne	.LBB103_17
	leaq	.Lcsbs$161(%rip), %rdx
	cmpq	%rdx, %rax
	je	.LBB103_22
	movzbl	(%rax), %edx
	cmpb	$45, %dl
	je	.LBB103_22
	jmp	.LBB103_33
.LBB103_17:
	movl	116(%rsp), %ebx
	testq	%rcx, %rcx
	je	.LBB103_52
	jle	.LBB103_19
	movzbl	(%rax), %edx
.LBB103_33:
	movzbl	%dl, %edx
	leaq	"runtime.string_decode_rune-.accept_sizes-28525"(%rip), %r8
	movzbl	(%rdx,%r8), %r8d
	leaq	-245(%rdx), %r9
	cmpq	$-52, %r9
	ja	.LBB103_35
	andl	$1, %r8d
	movl	%r8d, %ebx
	negl	%ebx
	decl	%r8d
	andl	%edx, %r8d
	andl	$65533, %ebx
	orl	%r8d, %ebx
	movl	$1, %r9d
	jmp	.LBB103_50
.LBB103_15:
	movl	116(%rsp), %ebx
	jmp	.LBB103_52
.LBB103_35:
	movl	%r8d, %r9d
	andl	$7, %r9d
	cmpq	%r9, %rcx
	jae	.LBB103_37
	movl	$65533, %ebx
	movl	$1, %r9d
	jmp	.LBB103_50
.LBB103_19:
	movl	$65533, %ebx
	xorl	%r9d, %r9d
.LBB103_49:
	cmpq	%rcx, %r9
	jg	.LBB103_110
.LBB103_50:
	cmpq	%r9, %rcx
	je	.LBB103_52
.LBB103_51:
	cmpb	$44, (%rax,%r9)
	cmovnel	116(%rsp), %ebx
.LBB103_52:
	cmpb	$0, 71(%rsp)
	movl	%ebx, 164(%rsp)
	jne	.LBB103_56
	movabsq	$9223372036854775806, %rax
	cmpq	%rax, 168(%rsp)
	ja	.LBB103_56
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB103_62
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	408(%rsp), %rdx
	movq	%rdx, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	jmp	.LBB103_62
.LBB103_56:
	cmpb	$0, 71(%rsp)
	je	.LBB103_62
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB103_62
	xorl	%ebx, %ebx
	jmp	.LBB103_59
	.p2align	4, 0x90
.LBB103_61:
	incq	%rbx
	cmpq	%rax, %rbx
	jge	.LBB103_62
.LBB103_59:
	movb	$9, 120(%rsp)
	leaq	120(%rsp), %rcx
	movq	%rcx, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %r10
	testq	%r10, %r10
	je	.LBB103_61
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	408(%rsp), %rax
	movq	%rax, 48(%rsp)
	leaq	96(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	72(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB103_61
.LBB103_62:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB103_63
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	408(%rsp), %rdx
	movq	%rdx, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	256(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	movq	136(%rsp), %rbx
	je	.LBB103_66
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	408(%rsp), %rdx
	movq	%rdx, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$245(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB103_66
.LBB103_63:
	movq	136(%rsp), %rbx
.LBB103_66:
	movq	16(%rbx), %rcx
	movq	24(%rbx), %rax
	movq	(%rax,%r15), %r10
	movq	(%rcx,%r15), %r8
	testq	%r10, %r10
	movq	%r10, 88(%rsp)
	je	.LBB103_67
	movq	32(%rbx), %rcx
	movq	(%rcx,%r15), %rcx
	movq	208(%rsp), %rax
	movq	(%rax), %r11
	cmpq	$1, %r10
	jne	.LBB103_70
	xorl	%r9d, %r9d
	xorl	%edx, %edx
	jmp	.LBB103_73
.LBB103_67:
	xorl	%r9d, %r9d
	leaq	.LJTI103_1(%rip), %r10
	jmp	.LBB103_75
.LBB103_70:
	movq	%r8, 200(%rsp)
	movq	%r10, %r15
	andq	$-2, %r15
	movq	%rcx, 192(%rsp)
	movq	%rcx, %r10
	xorl	%r9d, %r9d
	xorl	%edx, %edx
	.p2align	4, 0x90
.LBB103_71:
	movq	%r10, %rcx
	shrq	$3, %rcx
	movzbl	(%r11,%rcx), %r8d
	movl	%r10d, %eax
	andl	$7, %eax
	movl	$1, %ebx
	movl	%edx, %ecx
	shlq	%cl, %rbx
	cmpq	$64, %rdx
	cmovaeq	%r14, %rbx
	btl	%eax, %r8d
	cmovaeq	%r14, %rbx
	orq	%r9, %rbx
	leaq	1(%r10), %rax
	movq	%rax, %r8
	shrq	$3, %r8
	leaq	1(%rdx), %rcx
	movl	$1, %r9d
	shlq	%cl, %r9
	andl	$7, %eax
	cmpq	$64, %rcx
	cmovaeq	%r14, %r9
	movzbl	(%r11,%r8), %ecx
	btl	%eax, %ecx
	cmovaeq	%r14, %r9
	orq	%rbx, %r9
	addq	$2, %rdx
	addq	$2, %r10
	cmpq	%r15, %rdx
	jne	.LBB103_71
	movq	136(%rsp), %rbx
	movq	200(%rsp), %r8
	movq	88(%rsp), %r10
	movq	192(%rsp), %rcx
.LBB103_73:
	testb	$1, %r10b
	leaq	.LJTI103_1(%rip), %r10
	je	.LBB103_75
	addq	%rdx, %rcx
	movq	%rcx, %rax
	shrq	$3, %rax
	movzbl	(%r11,%rax), %eax
	movq	%r8, %r11
	movl	$1, %r8d
	movq	%rcx, %r15
	movl	%edx, %ecx
	shlq	%cl, %r8
	andl	$7, %r15d
	cmpq	$64, %rdx
	cmovaeq	%r14, %r8
	btl	%r15d, %eax
	cmovaeq	%r14, %r8
	orq	%r8, %r9
	movq	%r11, %r8
.LBB103_75:
	movq	%r9, 152(%rsp)
	testq	%r8, %r8
	je	.LBB103_76
	movq	%r8, %rcx
	jmp	.LBB103_78
	.p2align	4, 0x90
.LBB103_80:
	addq	$32, %rcx
	movq	(%rcx), %rcx
.LBB103_78:
	movq	104(%rcx), %rdx
	decq	%rdx
	cmpq	$28, %rdx
	ja	.LBB103_90
	movslq	(%rbp,%rdx,4), %rax
	addq	%rbp, %rax
	jmpq	*%rax
.LBB103_81:
	addq	$48, %rcx
	movq	(%rcx), %rcx
	jmp	.LBB103_78
.LBB103_76:
	movq	88(%rsp), %r10
	jmp	.LBB103_101
.LBB103_91:
	cmpb	$2, 33(%rcx)
	jne	.LBB103_90
	jmp	.LBB103_93
.LBB103_83:
	movq	40(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB103_84
	jmp	.LBB103_90
	.p2align	4, 0x90
.LBB103_87:
	addq	$48, %rcx
	movq	(%rcx), %rcx
.LBB103_84:
	movq	104(%rcx), %rdx
	decq	%rdx
	cmpq	$28, %rdx
	ja	.LBB103_90
	movslq	(%r10,%rdx,4), %rax
	addq	%r10, %rax
	jmpq	*%rax
.LBB103_86:
	addq	$32, %rcx
	movq	(%rcx), %rcx
	jmp	.LBB103_84
	.p2align	4, 0x90
.LBB103_92:
	movq	40(%rcx), %rcx
	testq	%rcx, %rcx
	jne	.LBB103_84
	jmp	.LBB103_93
.LBB103_37:
	cmpq	$1, %rcx
	leaq	utf8.accept_ranges(%rip), %r11
	je	.LBB103_107
	shrl	$4, %r8d
	movzbl	1(%rax), %r10d
	movl	$1, %r9d
	movl	$65533, %ebx
	cmpb	(%r11,%r8,2), %r10b
	jb	.LBB103_51
	cmpb	%r10b, 1(%r11,%r8,2)
	jb	.LBB103_51
	leaq	-194(%rdx), %r11
	movzbl	%r10b, %r8d
	cmpq	$29, %r11
	ja	.LBB103_42
	andl	$31, %edx
	shll	$6, %edx
	andl	$63, %r8d
	orl	%edx, %r8d
	movl	$2, %r9d
	movl	%r8d, %ebx
	jmp	.LBB103_49
.LBB103_89:
	cmpb	$0, 33(%rcx)
	je	.LBB103_93
.LBB103_90:
	movq	88(%rsp), %r10
	jmp	.LBB103_94
.LBB103_93:
	movq	(%r8), %rcx
	shlq	$3, %rcx
	movq	88(%rsp), %r10
	subq	%r10, %rcx
	shlq	%cl, %r9
	cmpq	$64, %rcx
	cmovaeq	%r14, %r9
	movq	%r9, 152(%rsp)
.LBB103_94:
	movq	%r8, %rcx
	jmp	.LBB103_95
	.p2align	4, 0x90
.LBB103_98:
	addq	$48, %rcx
	movq	(%rcx), %rcx
.LBB103_95:
	movq	104(%rcx), %rdx
	decq	%rdx
	cmpq	$28, %rdx
	ja	.LBB103_101
	movslq	(%r13,%rdx,4), %rax
	addq	%r13, %rax
	jmpq	*%rax
.LBB103_97:
	addq	$32, %rcx
	movq	(%rcx), %rcx
	jmp	.LBB103_95
.LBB103_100:
	cmpb	$0, 32(%rcx)
	je	.LBB103_102
.LBB103_101:
	decq	%r10
	movl	$1, %eax
	movl	%r10d, %ecx
	shlq	%cl, %rax
	cmpq	$64, %r10
	cmovaeq	%r14, %rax
	xorq	%rax, %r9
	subq	%rax, %r9
	movq	%r9, 152(%rsp)
.LBB103_102:
	leaq	152(%rsp), %rax
	movq	%rax, 224(%rsp)
	movq	24(%r8), %rax
	movq	%rax, 232(%rsp)
	movq	%rsi, %rcx
	leaq	224(%rsp), %rdx
	movl	164(%rsp), %r8d
	movq	408(%rsp), %r9
	callq	fmt.fmt_value
	cmpb	$0, 71(%rsp)
	je	.LBB103_105
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB103_105
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	408(%rsp), %rdx
	movq	%rdx, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB103_105:
	incq	168(%rsp)
	incq	%r12
	cmpq	144(%rsp), %r12
	jge	.LBB103_23
	leaq	(,%r12,8), %r15
	jmp	.LBB103_14
.LBB103_42:
	cmpq	$2, %rcx
	jbe	.LBB103_108
	movzbl	2(%rax), %r10d
	cmpb	$-65, %r10b
	jg	.LBB103_51
	movl	%edx, %r11d
	andl	$-16, %r11d
	cmpl	$224, %r11d
	jne	.LBB103_46
	andl	$15, %edx
	shll	$12, %edx
	andl	$63, %r8d
	shll	$6, %r8d
	orl	%edx, %r8d
	andl	$63, %r10d
	orl	%r8d, %r10d
	movl	$3, %r9d
	movl	%r10d, %ebx
	jmp	.LBB103_49
.LBB103_46:
	cmpq	$3, %rcx
	je	.LBB103_109
	movzbl	3(%rax), %r11d
	cmpb	$-65, %r11b
	jg	.LBB103_51
	andl	$7, %edx
	shll	$18, %edx
	andl	$63, %r8d
	shll	$12, %r8d
	orl	%edx, %r8d
	andl	$63, %r10d
	shll	$6, %r10d
	orl	%r8d, %r10d
	andl	$63, %r11d
	orl	%r10d, %r11d
	movl	$4, %r9d
	movl	%r11d, %ebx
	jmp	.LBB103_49
.LBB103_23:
	cmpb	$0, 71(%rsp)
	movq	408(%rsp), %r12
	je	.LBB103_29
	testq	%rdi, %rdi
	jle	.LBB103_29
	leaq	120(%rsp), %r14
	leaq	96(%rsp), %r15
	leaq	72(%rsp), %rbx
	jmp	.LBB103_26
	.p2align	4, 0x90
.LBB103_28:
	decq	%rdi
	je	.LBB103_29
.LBB103_26:
	movb	$9, 120(%rsp)
	movq	%r14, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB103_28
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r12, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB103_28
.LBB103_29:
	movb	$125, 120(%rsp)
	leaq	120(%rsp), %rax
	movq	%rax, 72(%rsp)
	movq	$1, 80(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB103_31
	movq	48(%rsi), %rcx
	movq	$0, 96(%rsp)
	movq	%r12, 48(%rsp)
	leaq	96(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	72(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	96(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB103_31:
	decq	32(%rsi)
	movzbl	71(%rsp), %eax
	movb	%al, 4(%rsi)
	movaps	272(%rsp), %xmm6
	addq	$296, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB103_13:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2619, %edx
	movl	$27, %r8d
	movq	144(%rsp), %r9
	callq	runtime.multi_pointer_slice_handle_error
.LBB103_110:
	movq	%rcx, 40(%rsp)
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2590, %edx
	movl	$17, %r8d
	callq	runtime.slice_handle_error
.LBB103_107:
	movq	$1, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$1, %r9d
	movl	$122, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB103_108:
	movq	%rcx, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$2, %r9d
	movl	$129, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB103_109:
	movq	$3, 32(%rsp)
	leaq	.Lggv$10d(%rip), %rcx
	movl	$3, %r9d
	movl	$136, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI103_0:
	.long	.LBB103_81-.LJTI103_0
	.long	.LBB103_91-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_80-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_83-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_90-.LJTI103_0
	.long	.LBB103_80-.LJTI103_0
.LJTI103_1:
	.long	.LBB103_87-.LJTI103_1
	.long	.LBB103_89-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_93-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_86-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_92-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_90-.LJTI103_1
	.long	.LBB103_86-.LJTI103_1
.LJTI103_2:
	.long	.LBB103_98-.LJTI103_2
	.long	.LBB103_100-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_97-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_101-.LJTI103_2
	.long	.LBB103_97-.LJTI103_2
	.text
	.seh_endproc

	.def	fmt.fmt_value;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_value:
.seh_proc fmt.fmt_value
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$728, %rsp
	.seh_stackalloc 728
	movaps	%xmm6, 704(%rsp)
	.seh_savexmm %xmm6, 704
	.seh_endprologue
	movq	%r9, %rdi
	movq	%rcx, %rsi
	cmpq	$0, (%rdx)
	je	.LBB104_2
	cmpq	$0, 8(%rdx)
	je	.LBB104_2
	movl	%r8d, %ebp
	movabsq	$72057594037927935, %r8
	movb	$0, 7(%rsi)
	movq	8(%rdx), %r10
	movq	%r10, %rax
	andq	%r8, %rax
	xorl	%ecx, %ecx
	cmpq	$160, %rax
	cmovbq	%rax, %rcx
	leaq	.L__$type_info_data(%rip), %r9
	movq	(%r9,%rcx,8), %rax
	movq	104(%rax), %r11
	decq	%r11
	cmpq	$28, %r11
	ja	.LBB104_174
	leaq	32(%rax), %rcx
	leaq	.LJTI104_0(%rip), %rbx
	movslq	(%rbx,%r11,4), %r11
	addq	%rbx, %r11
	jmpq	*%r11
.LBB104_8:
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	movq	%rdi, %r9
	movaps	704(%rsp), %xmm6
	addq	$728, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_arg
.LBB104_101:
	movups	(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	movq	(%rdx), %rax
	movq	(%rax), %rdx
	movq	8(%rax), %r8
	cmpq	$1, 96(%rsi)
	jne	.LBB104_99
.LBB104_95:
	movq	88(%rsi), %rax
	cmpq	%rax, %r8
	cmovgeq	%rax, %r8
	xorps	%xmm0, %xmm0
	movups	%xmm0, 88(%rsi)
	jmp	.LBB104_96
.LBB104_167:
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	movq	%rdi, %r9
	movaps	704(%rsp), %xmm6
	addq	$728, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_enum
.LBB104_102:
	movl	%ebp, 76(%rsp)
	movq	%rdx, 136(%rsp)
	movq	16(%rcx), %rax
	movq	%rax, 192(%rsp)
	movups	(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	leaq	40(%rsi), %r15
	leaq	112(%rsi), %r8
	movq	%r15, %rcx
	movb	$60, %dl
	movq	%r8, 168(%rsp)
	movq	%rdi, %r9
	callq	io.write_byte
	movq	192(%rsp), %rbp
	testq	%rbp, %rbp
	jle	.LBB104_108
	movq	136(%rsp), %rax
	movq	(%rax), %rax
	movq	176(%rsp), %r14
	movq	184(%rsp), %rbx
	movq	%rax, 320(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 328(%rsp)
	leaq	320(%rsp), %rdx
	movq	%rsi, %rcx
	movl	76(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	cmpq	$1, %rbp
	jne	.LBB104_104
.LBB104_108:
	movq	%r15, %rcx
	movb	$62, %dl
	movq	168(%rsp), %r8
	jmp	.LBB104_109
.LBB104_56:
	movq	%rdx, 136(%rsp)
	movq	48(%rcx), %rax
	movq	%rax, 224(%rsp)
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	incq	80(%rsi)
	movzbl	4(%rsi), %ebx
	leaq	40(%rsi), %r14
	movl	%ebp, 76(%rsp)
	cmpl	$119, %ebp
	sete	%dl
	shlb	$5, %dl
	orb	$91, %dl
	leaq	112(%rsi), %r15
	movq	%r14, %rcx
	movq	%r15, %r8
	movq	%rdi, %r9
	callq	io.write_byte
	testb	%bl, %bl
	movq	%r15, 280(%rsp)
	je	.LBB104_77
	movq	%r14, %rcx
	movb	$10, %dl
	movq	%r15, %r8
	movq	%rdi, %r9
	callq	io.write_byte
	movq	32(%rsi), %rax
	movq	%rax, 272(%rsp)
	incq	%rax
	movq	%rax, 32(%rsi)
	movq	200(%rsp), %rax
	movq	%rax, 168(%rsp)
	testq	%rax, %rax
	jle	.LBB104_76
	xorl	%r12d, %r12d
	leaq	144(%rsp), %r13
	leaq	120(%rsp), %rbp
	leaq	80(%rsp), %r15
	xorps	%xmm6, %xmm6
	jmp	.LBB104_59
.LBB104_75:
	incq	%r12
	cmpq	168(%rsp), %r12
	jge	.LBB104_76
.LBB104_59:
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB104_64
	xorl	%ebx, %ebx
	jmp	.LBB104_61
	.p2align	4, 0x90
.LBB104_63:
	incq	%rbx
	cmpq	%rax, %rbx
	jge	.LBB104_64
.LBB104_61:
	movb	$9, 144(%rsp)
	movq	%r13, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%r14), %r10
	testq	%r10, %r10
	je	.LBB104_63
	movq	48(%rsi), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r15, %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	120(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB104_63
.LBB104_64:
	movq	184(%rsp), %rcx
	movq	208(%rsp), %rbx
	movaps	%xmm6, 400(%rsp)
	movq	%rbx, %rdx
	movq	%r12, %r8
	leaq	400(%rsp), %r9
	callq	fmt.stored_enum_value_to_string
	movaps	400(%rsp), %xmm0
	movups	%xmm0, 536(%rsp)
	testb	%al, %al
	je	.LBB104_68
	movb	$46, 144(%rsp)
	movq	%r13, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_71
	movq	48(%rsi), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r15, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	120(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB104_71
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	536(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	jmp	.LBB104_70
.LBB104_68:
	addq	%r12, %rbx
	movaps	%xmm6, 80(%rsp)
	movaps	%xmm6, 96(%rsp)
	movq	%r15, 120(%rsp)
	movq	$32, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movq	%rdi, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	movl	$10, %r9d
	movq	%r13, %rcx
	movq	%rbx, %r8
	movq	%rbp, %rdx
	callq	strconv.append_bits
	movaps	144(%rsp), %xmm0
	movups	%xmm0, 368(%rsp)
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_71
	movq	48(%rsi), %rcx
	movq	$0, 248(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	248(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	368(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	248(%rsp), %rax
.LBB104_70:
	addq	%rax, 112(%rsi)
.LBB104_71:
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_73
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$245(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB104_73:
	movq	192(%rsp), %rcx
	imulq	%r12, %rcx
	movq	136(%rsp), %rax
	addq	(%rax), %rcx
	movq	%rcx, 496(%rsp)
	movq	176(%rsp), %rax
	movq	24(%rax), %rax
	movq	%rax, 504(%rsp)
	movq	%rsi, %rcx
	leaq	496(%rsp), %rdx
	movl	76(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB104_75
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r15, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB104_75
.LBB104_28:
	movq	(%rdx), %rax
	movups	(%rax), %xmm0
	movups	%xmm0, 552(%rsp)
	leaq	552(%rsp), %rdx
	movq	%rsi, %rcx
	movq	%rdi, %r8
	callq	fmt.fmt_soa_pointer
	jmp	.LBB104_174
.LBB104_179:
	movups	(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	movq	(%rdx), %rcx
	movq	184(%rsp), %rax
	movq	24(%rax), %rdx
	callq	reflect.relative_pointer_to_absolute_raw
	movq	176(%rsp), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, 416(%rsp)
	movq	%rcx, 424(%rsp)
	leaq	416(%rsp), %rdx
	jmp	.LBB104_178
.LBB104_29:
	movq	(%rdx), %rax
	movq	(%rax), %rdx
	testq	%rdx, %rdx
	je	.LBB104_2
	cmpl	$112, %ebp
	je	.LBB104_55
	movq	(%rcx), %r15
	testq	%r15, %r15
	je	.LBB104_55
	movq	24(%r15), %rax
	movq	%rdx, 336(%rsp)
	movq	%rax, 344(%rsp)
.LBB104_34:
	movq	104(%r15), %rax
	cmpq	$1, %rax
	jne	.LBB104_35
	movq	48(%r15), %r15
	jmp	.LBB104_34
.LBB104_177:
	movups	(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	movq	(%rdx), %rcx
	movq	184(%rsp), %rax
	movq	24(%rax), %rdx
	callq	reflect.relative_pointer_to_absolute_raw
	movq	176(%rsp), %rcx
	movq	24(%rcx), %rcx
	movq	%rax, 432(%rsp)
	movq	%rcx, 440(%rsp)
	leaq	432(%rsp), %rdx
.LBB104_178:
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_value
	jmp	.LBB104_174
.LBB104_93:
	movq	16(%rcx), %r8
	movq	%r8, 192(%rsp)
	movups	(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	movq	(%rdx), %rdx
	cmpq	$1, 96(%rsi)
	je	.LBB104_95
.LBB104_99:
	cmpb	$0, 104(%rsi)
	je	.LBB104_96
	movb	$0, 104(%rsi)
	movq	176(%rsp), %rax
	movq	184(%rsp), %r9
	movq	%rdi, 48(%rsp)
	movl	%ebp, 40(%rsp)
	movq	%rax, 32(%rsp)
	movq	%rsi, %rcx
	callq	fmt.fmt_array_nul_terminated
	jmp	.LBB104_174
.LBB104_96:
	movq	176(%rsp), %rax
	movq	184(%rsp), %r9
	movq	%rdi, 48(%rsp)
	movl	%ebp, 40(%rsp)
	movq	%rax, 32(%rsp)
.LBB104_97:
	movq	%rsi, %rcx
	callq	fmt.fmt_array
	jmp	.LBB104_174
.LBB104_110:
	movq	16(%rcx), %rax
	movq	%rax, 192(%rsp)
	movups	(%rcx), %xmm0
	movaps	%xmm0, 176(%rsp)
	movl	%ebp, %r8d
	movl	%ebp, %eax
	andl	$-2, %eax
	cmpl	$118, %eax
	jne	.LBB104_164
	movq	%rdx, %rbx
	cmpl	$118, %r8d
	jne	.LBB104_114
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB104_114
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$243(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movl	%ebp, %r8d
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB104_114:
	leaq	40(%rsi), %r14
	movl	%r8d, 76(%rsp)
	cmpl	$119, %r8d
	sete	%dl
	shlb	$5, %dl
	orb	$91, %dl
	leaq	112(%rsi), %r15
	movq	%r14, %rcx
	movq	%r15, %r8
	movq	%rdi, %r9
	callq	io.write_byte
	movzbl	4(%rsi), %r13d
	movq	32(%rsi), %r12
	leaq	1(%r12), %rax
	movq	%rax, 32(%rsi)
	testb	%r13b, %r13b
	je	.LBB104_116
	movq	%r14, %rcx
	movb	$10, %dl
	movq	%r15, %r8
	movq	%rdi, %r9
	callq	io.write_byte
.LBB104_116:
	movq	%r15, 288(%rsp)
	movq	(%rbx), %rcx
	testq	%rcx, %rcx
	je	.LBB104_158
	movq	192(%rsp), %rdx
	testq	%rdx, %rdx
	je	.LBB104_118
	movq	(%rcx), %rbx
	movq	$0, 312(%rsp)
	movq	$0, 304(%rsp)
	movq	$0, 296(%rsp)
	leaq	512(%rsp), %rax
	movq	%rax, 40(%rsp)
	leaq	296(%rsp), %rax
	movq	%rax, 32(%rsp)
	leaq	312(%rsp), %r8
	leaq	304(%rsp), %r9
	movq	%rdx, 272(%rsp)
	callq	runtime.map_kvh_data_dynamic
	movq	%rbx, %rax
	movq	%rbx, 168(%rsp)
	testq	%rbx, %rbx
	je	.LBB104_158
	movq	168(%rsp), %rax
	andl	$63, %eax
	movq	%rax, 168(%rsp)
	movq	312(%rsp), %rax
	movq	%rax, 264(%rsp)
	movq	304(%rsp), %rax
	movq	%rax, 256(%rsp)
	movq	296(%rsp), %rax
	movq	%rax, 280(%rsp)
	xorl	%ebp, %ebp
	xorps	%xmm6, %xmm6
	leaq	144(%rsp), %rbx
	xorl	%eax, %eax
	movq	%rax, 136(%rsp)
	jmp	.LBB104_127
.LBB104_157:
	incq	%rbp
	movq	%rbp, %rax
	movq	168(%rsp), %rcx
	shrq	%cl, %rax
	testq	%rax, %rax
	jne	.LBB104_158
.LBB104_127:
	movq	280(%rsp), %rax
	cmpq	$0, (%rax,%rbp,8)
	jle	.LBB104_157
	testb	%r13b, %r13b
	jne	.LBB104_132
	cmpq	$0, 136(%rsp)
	jle	.LBB104_132
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_138
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	jmp	.LBB104_138
.LBB104_132:
	testb	%r13b, %r13b
	je	.LBB104_138
	movq	32(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB104_138
	xorl	%r15d, %r15d
	jmp	.LBB104_135
	.p2align	4, 0x90
.LBB104_137:
	incq	%r15
	cmpq	%rax, %r15
	jge	.LBB104_138
.LBB104_135:
	movb	$9, 144(%rsp)
	movq	%rbx, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%r14), %r10
	testq	%r10, %r10
	je	.LBB104_137
	movq	48(%rsi), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	120(%rsp), %rax
	movq	%rax, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	80(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%r10
	movq	120(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	32(%rsi), %rax
	jmp	.LBB104_137
.LBB104_138:
	movq	272(%rsp), %r10
	movq	(%r10), %r8
	movq	16(%r8), %rcx
	movq	24(%r8), %r9
	cmpq	$2, %r9
	je	.LBB104_141
	cmpq	$1, %r9
	jne	.LBB104_142
	imulq	%rbp, %rcx
	addq	264(%rsp), %rcx
	jmp	.LBB104_143
.LBB104_141:
	movq	%rbp, %rax
	shrq	%rax
	imulq	%rax, %rcx
	movl	%ebp, %eax
	andl	$1, %eax
	negq	%rax
	andq	(%r8), %rax
	addq	264(%rsp), %rax
	addq	%rax, %rcx
	jmp	.LBB104_143
.LBB104_142:
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%r9
	imulq	(%r8), %rdx
	imulq	%rcx, %rax
	addq	264(%rsp), %rdx
	addq	%rax, %rdx
	movq	%rdx, %rcx
.LBB104_143:
	movq	8(%r10), %r8
	movq	16(%r8), %r15
	movq	24(%r8), %r9
	cmpq	$2, %r9
	je	.LBB104_146
	cmpq	$1, %r9
	jne	.LBB104_147
	imulq	%rbp, %r15
	addq	256(%rsp), %r15
	jmp	.LBB104_148
.LBB104_146:
	movq	%rbp, %rax
	shrq	%rax
	imulq	%rax, %r15
	movl	%ebp, %eax
	andl	$1, %eax
	negq	%rax
	andq	(%r8), %rax
	addq	256(%rsp), %rax
	addq	%rax, %r15
	jmp	.LBB104_148
.LBB104_147:
	movq	%rbp, %rax
	xorl	%edx, %edx
	divq	%r9
	imulq	(%r8), %rdx
	imulq	%r15, %rax
	addq	256(%rsp), %rdx
	addq	%rax, %rdx
	movq	%rdx, %r15
.LBB104_148:
	movaps	%xmm6, 592(%rsp)
	movaps	%xmm6, 576(%rsp)
	movq	$0, 608(%rsp)
	movups	(%r14), %xmm0
	movups	%xmm0, 616(%rsp)
	leaq	632(%rsp), %rax
	movups	%xmm6, 48(%rax)
	movups	%xmm6, 32(%rax)
	movups	%xmm6, 16(%rax)
	movups	%xmm6, (%rax)
	movq	%rcx, 464(%rsp)
	movq	176(%rsp), %rax
	movq	24(%rax), %rax
	movq	%rax, 472(%rsp)
	leaq	576(%rsp), %rcx
	leaq	464(%rsp), %rdx
	movl	76(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	testb	%r13b, %r13b
	je	.LBB104_151
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_154
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$245(%rip), %r8
	jmp	.LBB104_153
.LBB104_151:
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_154
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$246(%rip), %r8
.LBB104_153:
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB104_154:
	incq	136(%rsp)
	movq	%r15, 448(%rsp)
	movq	184(%rsp), %rax
	movq	24(%rax), %rax
	movq	%rax, 456(%rsp)
	movq	%rsi, %rcx
	leaq	448(%rsp), %rdx
	movl	76(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	testb	%r13b, %r13b
	je	.LBB104_157
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_157
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$247(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB104_157
.LBB104_168:
	movq	(%rdx), %rcx
	movq	(%rcx), %rbx
	leaq	40(%rsi), %rcx
	testq	%rbx, %rbx
	je	.LBB104_169
	leaq	112(%rsi), %r8
	movq	%rdi, 32(%rsp)
	leaq	80(%rsp), %r14
	movq	%rax, %rdx
	movq	%r14, %r9
	callq	reflect.write_type_writer
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB104_173
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r14, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$24a(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB104_173:
	movq	%rsi, %rcx
	movq	%rbx, %rdx
	movl	$112, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_pointer
	jmp	.LBB104_174
.LBB104_7:
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movq	%rdi, 32(%rsp)
	leaq	176(%rsp), %r9
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	callq	fmt.fmt_named
	jmp	.LBB104_174
.LBB104_180:
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movq	%rdi, 32(%rsp)
	leaq	176(%rsp), %r9
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	callq	fmt.fmt_matrix
	jmp	.LBB104_174
.LBB104_9:
	movabsq	$720575940379279395, %rax
	cmpq	%rax, %r10
	jne	.LBB104_12
	leaq	40(%rsi), %rcx
	movq	(%rdx), %rax
	movq	(%rax), %rdx
	addq	$112, %rsi
	movq	%rdi, 32(%rsp)
	leaq	568(%rsp), %r9
	jmp	.LBB104_11
.LBB104_175:
	movq	(%rdx), %rax
	leaq	40(%rsi), %rcx
	addq	$112, %rsi
	andq	(%rax), %r8
	xorl	%eax, %eax
	cmpq	$160, %r8
	cmovbq	%r8, %rax
	movq	(%r9,%rax,8), %rdx
	movq	%rdi, 32(%rsp)
	leaq	80(%rsp), %r9
.LBB104_11:
	movq	%rsi, %r8
	callq	reflect.write_type_writer
	jmp	.LBB104_174
.LBB104_166:
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movq	(%rax), %rax
	movq	%rdi, 40(%rsp)
	movq	%rax, 32(%rsp)
	leaq	176(%rsp), %r9
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	callq	fmt.fmt_union
	jmp	.LBB104_174
.LBB104_165:
	movq	64(%rcx), %rax
	movq	%rax, 240(%rsp)
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movups	48(%rcx), %xmm3
	movaps	%xmm3, 224(%rsp)
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movq	%rdi, 40(%rsp)
	leaq	.Lggv$24c(%rip), %rax
	movq	%rax, 32(%rsp)
	leaq	176(%rsp), %r9
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	callq	fmt.fmt_struct
	jmp	.LBB104_174
.LBB104_176:
	movq	%rdi, 32(%rsp)
	leaq	.Lggv$24c(%rip), %r8
	movq	%rsi, %rcx
	movl	%ebp, %r9d
	callq	fmt.fmt_bit_set
	jmp	.LBB104_174
.LBB104_181:
	movq	48(%rcx), %rax
	movq	%rax, 224(%rsp)
	movups	(%rcx), %xmm0
	movups	16(%rcx), %xmm1
	movups	32(%rcx), %xmm2
	movaps	%xmm2, 208(%rsp)
	movaps	%xmm1, 192(%rsp)
	movaps	%xmm0, 176(%rsp)
	movq	%rdi, 40(%rsp)
	leaq	.Lggv$24c(%rip), %rax
	movq	%rax, 32(%rsp)
	leaq	176(%rsp), %r9
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	callq	fmt.fmt_bit_field
	jmp	.LBB104_174
.LBB104_76:
	movq	272(%rsp), %rax
	movq	%rax, 32(%rsi)
	movq	%rsi, %rcx
	movq	%rdi, %rdx
	callq	fmt.fmt_write_indent
.LBB104_92:
	cmpl	$119, 76(%rsp)
	sete	%dl
	shlb	$5, %dl
	orb	$93, %dl
	movq	%r14, %rcx
	movq	280(%rsp), %r8
	movq	%rdi, %r9
	callq	io.write_byte
	decq	80(%rsi)
	jmp	.LBB104_174
.LBB104_164:
	movq	%rsi, %rcx
	movl	%r8d, %edx
	movq	%rdi, %r8
	movaps	704(%rsp), %xmm6
	addq	$728, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bad_verb
.LBB104_12:
	movq	(%rdx), %rax
	movq	(%rax), %rdx
	cmpl	$112, %ebp
	je	.LBB104_55
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB104_55
	movq	24(%rax), %rcx
	movq	%rdx, 352(%rsp)
	movq	%rcx, 360(%rsp)
.LBB104_16:
	movq	104(%rax), %rcx
	cmpq	$1, %rcx
	jne	.LBB104_17
	movq	48(%rax), %rax
	jmp	.LBB104_16
.LBB104_158:
	testb	%r13b, %r13b
	je	.LBB104_124
	testq	%r12, %r12
	jle	.LBB104_124
	leaq	144(%rsp), %r15
	leaq	120(%rsp), %rbp
	leaq	80(%rsp), %rbx
	jmp	.LBB104_161
.LBB104_163:
	decq	%r12
	je	.LBB104_124
.LBB104_161:
	movb	$9, 144(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_163
	movq	48(%rsi), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	120(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB104_163
.LBB104_77:
	movq	200(%rsp), %rbp
	testq	%rbp, %rbp
	jle	.LBB104_92
	xorl	%r15d, %r15d
	xorps	%xmm6, %xmm6
	leaq	80(%rsp), %r13
	leaq	480(%rsp), %r12
	jmp	.LBB104_79
.LBB104_91:
	movq	192(%rsp), %rcx
	imulq	%r15, %rcx
	movq	136(%rsp), %rax
	addq	(%rax), %rcx
	movq	%rcx, 480(%rsp)
	movq	176(%rsp), %rax
	movq	24(%rax), %rax
	movq	%rax, 488(%rsp)
	movq	%rsi, %rcx
	movq	%r12, %rdx
	movl	76(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	incq	%r15
	cmpq	%rbp, %r15
	jge	.LBB104_92
.LBB104_79:
	testq	%r15, %r15
	je	.LBB104_82
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_82
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB104_82:
	movq	184(%rsp), %rcx
	movq	208(%rsp), %rbx
	movaps	%xmm6, 384(%rsp)
	movq	%rbx, %rdx
	movq	%r15, %r8
	leaq	384(%rsp), %r9
	callq	fmt.stored_enum_value_to_string
	movaps	384(%rsp), %xmm0
	movups	%xmm0, 520(%rsp)
	testb	%al, %al
	je	.LBB104_86
	movb	$46, 144(%rsp)
	leaq	144(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_89
	movq	48(%rsi), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	120(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r13, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	120(%rsp), %rax
	addq	%rax, 112(%rsi)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB104_89
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	520(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	jmp	.LBB104_88
.LBB104_86:
	addq	%r15, %rbx
	movaps	%xmm6, 80(%rsp)
	movaps	%xmm6, 96(%rsp)
	movq	%r13, 120(%rsp)
	movq	$32, 128(%rsp)
	movaps	%xmm6, 144(%rsp)
	movq	%rdi, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	movl	$10, %r9d
	leaq	144(%rsp), %rcx
	movq	%rbx, %r8
	leaq	120(%rsp), %rdx
	callq	strconv.append_bits
	movaps	144(%rsp), %xmm0
	movups	%xmm0, 368(%rsp)
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_89
	movq	48(%rsi), %rcx
	movq	$0, 248(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	248(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	368(%rsp), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	248(%rsp), %rax
.LBB104_88:
	addq	%rax, 112(%rsi)
.LBB104_89:
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_91
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$245(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB104_91
.LBB104_169:
	movq	(%rcx), %rax
	testq	%rax, %rax
	je	.LBB104_174
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$249(%rip), %r8
	jmp	.LBB104_4
.LBB104_104:
	movl	$1, %r12d
	movq	%rbx, %r13
	jmp	.LBB104_105
.LBB104_107:
	movq	136(%rsp), %rax
	movq	(%rax), %rax
	addq	%r13, %rax
	movq	%rax, 320(%rsp)
	movq	24(%r14), %rax
	movq	%rax, 328(%rsp)
	movq	%rsi, %rcx
	leaq	320(%rsp), %rdx
	movl	76(%rsp), %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_arg
	incq	%r12
	addq	%rbx, %r13
	cmpq	%rbp, %r12
	jge	.LBB104_108
.LBB104_105:
	movq	(%r15), %rax
	testq	%rax, %rax
	je	.LBB104_107
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	leaq	.Lggv$244(%rip), %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB104_107
.LBB104_35:
	cmpq	$1, 96(%rsi)
	jne	.LBB104_37
	movq	88(%rsi), %r8
	xorps	%xmm0, %xmm0
	movups	%xmm0, 88(%rsi)
	movq	(%r15), %r9
	movq	%rdi, 48(%rsp)
	movl	%ebp, 40(%rsp)
	movq	%r15, 32(%rsp)
	jmp	.LBB104_97
.LBB104_17:
	cmpq	$22, %rcx
	ja	.LBB104_55
	movl	$4407296, %eax
	btq	%rcx, %rax
	jae	.LBB104_19
	testq	%rdx, %rdx
	je	.LBB104_2
	movq	72(%rsi), %rax
	testq	%rax, %rax
	jg	.LBB104_55
	incq	%rax
	movq	%rax, 72(%rsi)
	leaq	40(%rsi), %rcx
	movb	$38, %dl
	xorl	%r8d, %r8d
	jmp	.LBB104_26
.LBB104_37:
	cmpb	$0, 104(%rsi)
	je	.LBB104_40
	movb	$0, 104(%rsi)
	movq	(%r15), %r9
	movq	%rdi, 48(%rsp)
	movl	%ebp, 40(%rsp)
	movq	%r15, 32(%rsp)
	movq	%rsi, %rcx
	movq	$-1, %r8
	callq	fmt.fmt_array_nul_terminated
	jmp	.LBB104_174
.LBB104_118:
	testb	%r13b, %r13b
	je	.LBB104_124
	testq	%r12, %r12
	jle	.LBB104_124
	leaq	144(%rsp), %r15
	leaq	120(%rsp), %rbp
	leaq	80(%rsp), %rbx
	jmp	.LBB104_121
.LBB104_123:
	decq	%r12
	je	.LBB104_124
.LBB104_121:
	movb	$9, 144(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	(%r14), %rax
	testq	%rax, %rax
	je	.LBB104_123
	movq	48(%rsi), %rcx
	movq	$0, 120(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%rbp, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%rbx, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	120(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB104_123
.LBB104_124:
	cmpl	$119, 76(%rsp)
	sete	%dl
	decq	32(%rsi)
	movb	%r13b, 4(%rsi)
	shlb	$5, %dl
	orb	$93, %dl
	movq	%r14, %rcx
	movq	288(%rsp), %r8
.LBB104_109:
	movq	%rdi, %r9
	callq	io.write_byte
	jmp	.LBB104_174
.LBB104_19:
	movl	$1572864, %eax
	btq	%rcx, %rax
	jae	.LBB104_55
	testq	%rdx, %rdx
	je	.LBB104_2
	movq	72(%rsi), %rax
	testq	%rax, %rax
	jg	.LBB104_55
	incq	%rax
	movq	%rax, 72(%rsi)
	leaq	40(%rsi), %rcx
	leaq	112(%rsi), %r8
	movb	$38, %dl
.LBB104_26:
	movq	%rdi, %r9
	callq	io.write_byte
	leaq	352(%rsp), %rdx
	jmp	.LBB104_27
.LBB104_2:
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB104_174
	movq	48(%rsi), %rcx
	movq	$0, 80(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	80(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$24d(%rip), %r8
.LBB104_4:
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	80(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB104_174:
	movaps	704(%rsp), %xmm6
	addq	$728, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
.LBB104_40:
	cmpq	$22, %rax
	ja	.LBB104_55
	movl	$4407296, %ecx
	btq	%rax, %rcx
	jb	.LBB104_53
	movl	$1572864, %ecx
	btq	%rax, %rcx
	jae	.LBB104_43
.LBB104_53:
	movq	72(%rsi), %rax
	testq	%rax, %rax
	jle	.LBB104_54
.LBB104_55:
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	movq	%rdi, %r9
	movaps	704(%rsp), %xmm6
	addq	$728, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_pointer
.LBB104_54:
	incq	%rax
	movq	%rax, 72(%rsi)
	leaq	40(%rsi), %rcx
	leaq	112(%rsi), %r8
	movb	$38, %dl
	movq	%rdi, %r9
	callq	io.write_byte
	leaq	336(%rsp), %rdx
.LBB104_27:
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	movq	%rdi, %r9
	callq	fmt.fmt_value
	decq	72(%rsi)
	jmp	.LBB104_174
.LBB104_43:
	cmpq	$2, %rax
	jne	.LBB104_55
	movl	%ebp, %eax
	orl	$2, %eax
	cmpl	$115, %eax
	jne	.LBB104_55
	movq	24(%r15), %rax
	movabsq	$72057594037927959, %rcx
	cmpq	%rcx, %rax
	jg	.LBB104_50
	movabsq	$72057594037927938, %rcx
	cmpq	%rcx, %rax
	je	.LBB104_52
	movabsq	$72057594037927947, %rcx
	jmp	.LBB104_48
.LBB104_50:
	movabsq	$72057594037927960, %rcx
	cmpq	%rcx, %rax
	je	.LBB104_49
	movabsq	$4755801206503243794, %rcx
.LBB104_48:
	cmpq	%rcx, %rax
	jne	.LBB104_55
.LBB104_49:
	movq	(%r15), %rbx
	movq	%rdx, %rcx
	movq	%rdx, %r14
	movq	%rbx, %rdx
	movq	$-1, %r8
	callq	"fmt.search_nul_termination-1911"
	movq	%rdi, 48(%rsp)
	movl	%ebp, 40(%rsp)
	movq	%r15, 32(%rsp)
	movq	%rsi, %rcx
	movq	%r14, %rdx
	movq	%rax, %r8
	movq	%rbx, %r9
	callq	fmt.fmt_array
	jmp	.LBB104_174
.LBB104_52:
	movq	%rsi, %rcx
	movl	%ebp, %r8d
	movq	%rdi, %r9
	movaps	704(%rsp), %xmm6
	addq	$728, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_cstring
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI104_0:
	.long	.LBB104_7-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_8-.LJTI104_0
	.long	.LBB104_174-.LJTI104_0
	.long	.LBB104_175-.LJTI104_0
	.long	.LBB104_9-.LJTI104_0
	.long	.LBB104_29-.LJTI104_0
	.long	.LBB104_168-.LJTI104_0
	.long	.LBB104_93-.LJTI104_0
	.long	.LBB104_56-.LJTI104_0
	.long	.LBB104_101-.LJTI104_0
	.long	.LBB104_101-.LJTI104_0
	.long	.LBB104_174-.LJTI104_0
	.long	.LBB104_165-.LJTI104_0
	.long	.LBB104_166-.LJTI104_0
	.long	.LBB104_167-.LJTI104_0
	.long	.LBB104_110-.LJTI104_0
	.long	.LBB104_176-.LJTI104_0
	.long	.LBB104_102-.LJTI104_0
	.long	.LBB104_177-.LJTI104_0
	.long	.LBB104_179-.LJTI104_0
	.long	.LBB104_180-.LJTI104_0
	.long	.LBB104_28-.LJTI104_0
	.long	.LBB104_181-.LJTI104_0
	.text
	.seh_endproc

	.def	fmt.fmt_complex;
	.scl	3;
	.type	32;
	.endef
	.globl	__real@3fe0000000000000
	.section	.rdata,"dr",discard,__real@3fe0000000000000
	.p2align	3, 0x0
__real@3fe0000000000000:
	.quad	0x3fe0000000000000
	.text
	.p2align	4, 0x90
fmt.fmt_complex:
.seh_proc fmt.fmt_complex
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$120, %rsp
	.seh_stackalloc 120
	movaps	%xmm6, 96(%rsp)
	.seh_savexmm %xmm6, 96
	.seh_endprologue
	movl	%r9d, %ebx
	movq	%rcx, %rsi
	movq	192(%rsp), %rdi
	leal	-70(%rbx), %eax
	cmpl	$49, %eax
	ja	.LBB105_16
	movabsq	$844446404968453, %rcx
	btq	%rax, %rcx
	jae	.LBB105_16
	movq	%r8, %r14
	movsd	(%rdx), %xmm1
	movsd	8(%rdx), %xmm6
	shrq	%r14
	movq	%rdi, 32(%rsp)
	movq	%rsi, %rcx
	movq	%r14, %r8
	movl	%ebx, %r9d
	callq	fmt.fmt_float
	cmpb	$0, 1(%rsi)
	jne	.LBB105_12
	xorpd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm6
	jb	.LBB105_12
	jne	.LBB105_5
	jp	.LBB105_5
	movmskpd	%xmm6, %eax
	orq	$2, %rax
	jmp	.LBB105_8
.LBB105_5:
	movsd	__real@3fe0000000000000(%rip), %xmm0
	mulsd	%xmm6, %xmm0
	ucomisd	%xmm6, %xmm0
	jne	.LBB105_6
	jp	.LBB105_6
	xorpd	%xmm0, %xmm0
	xorl	%eax, %eax
	ucomisd	%xmm6, %xmm0
	seta	%al
	addq	$5, %rax
	jmp	.LBB105_8
.LBB105_16:
	movq	%rsi, %rcx
	movl	%ebx, %edx
	movq	%rdi, %r8
	movaps	96(%rsp), %xmm6
	addq	$120, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	fmt.fmt_bad_verb
.LBB105_6:
	ucomisd	%xmm6, %xmm6
	jp	.LBB105_9
	movq	%xmm6, %rcx
	movabsq	$9218868437227405312, %rdx
	xorl	%eax, %eax
	testq	%rdx, %rcx
	sete	%al
.LBB105_8:
	addq	$-3, %rax
	testq	$-3, %rax
	je	.LBB105_12
.LBB105_9:
	movb	$43, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB105_12
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB105_12
	incq	112(%rsi)
.LBB105_12:
	movq	%rdi, 32(%rsp)
	movq	%rsi, %rcx
	movapd	%xmm6, %xmm1
	movq	%r14, %r8
	movl	%ebx, %r9d
	callq	fmt.fmt_float
	movb	$105, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB105_15
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB105_15
	incq	112(%rsi)
.LBB105_15:
	movaps	96(%rsp), %xmm6
	addq	$120, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
	.seh_endproc

	.def	fmt.fmt_quaternion;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_quaternion:
.seh_proc fmt.fmt_quaternion
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$144, %rsp
	.seh_stackalloc 144
	movaps	%xmm8, 128(%rsp)
	.seh_savexmm %xmm8, 128
	movaps	%xmm7, 112(%rsp)
	.seh_savexmm %xmm7, 112
	movaps	%xmm6, 96(%rsp)
	.seh_savexmm %xmm6, 96
	.seh_endprologue
	movl	%r9d, %ebx
	movq	%rcx, %rsi
	movq	224(%rsp), %rdi
	leal	-70(%rbx), %eax
	cmpl	$49, %eax
	ja	.LBB106_42
	movabsq	$844446404968453, %rcx
	btq	%rax, %rcx
	jae	.LBB106_42
	movq	%r8, %r14
	movsd	24(%rdx), %xmm1
	movsd	(%rdx), %xmm8
	movsd	8(%rdx), %xmm7
	movsd	16(%rdx), %xmm6
	shrq	$2, %r14
	movq	%rdi, 32(%rsp)
	movq	%rsi, %rcx
	movq	%r14, %r8
	movl	%ebx, %r9d
	callq	fmt.fmt_float
	cmpb	$0, 1(%rsi)
	jne	.LBB106_12
	xorpd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm8
	jb	.LBB106_12
	jne	.LBB106_5
	jp	.LBB106_5
	movmskpd	%xmm8, %eax
	orq	$2, %rax
	jmp	.LBB106_8
.LBB106_5:
	movsd	__real@3fe0000000000000(%rip), %xmm0
	mulsd	%xmm8, %xmm0
	ucomisd	%xmm8, %xmm0
	jne	.LBB106_6
	jp	.LBB106_6
	xorpd	%xmm0, %xmm0
	xorl	%eax, %eax
	ucomisd	%xmm8, %xmm0
	seta	%al
	addq	$5, %rax
	jmp	.LBB106_8
.LBB106_42:
	movq	%rsi, %rcx
	movl	%ebx, %edx
	movq	%rdi, %r8
	movaps	96(%rsp), %xmm6
	movaps	112(%rsp), %xmm7
	movaps	128(%rsp), %xmm8
	addq	$144, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	jmp	fmt.fmt_bad_verb
.LBB106_6:
	ucomisd	%xmm8, %xmm8
	jp	.LBB106_9
	movq	%xmm8, %rcx
	movabsq	$9218868437227405312, %rdx
	xorl	%eax, %eax
	testq	%rdx, %rcx
	sete	%al
.LBB106_8:
	addq	$-3, %rax
	testq	$-3, %rax
	je	.LBB106_12
.LBB106_9:
	movb	$43, 71(%rsp)
	leaq	71(%rsp), %rax
	movq	%rax, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB106_12
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB106_12
	incq	112(%rsi)
.LBB106_12:
	movq	%rdi, 32(%rsp)
	movq	%rsi, %rcx
	movapd	%xmm8, %xmm1
	movq	%r14, %r8
	movl	%ebx, %r9d
	callq	fmt.fmt_float
	movb	$105, 71(%rsp)
	leaq	71(%rsp), %r15
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB106_15
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB106_15
	incq	112(%rsi)
.LBB106_15:
	cmpb	$0, 1(%rsi)
	jne	.LBB106_25
	xorpd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm7
	jb	.LBB106_25
	jne	.LBB106_18
	jp	.LBB106_18
	movmskpd	%xmm7, %eax
	orq	$2, %rax
	jmp	.LBB106_21
.LBB106_18:
	movsd	__real@3fe0000000000000(%rip), %xmm0
	mulsd	%xmm7, %xmm0
	ucomisd	%xmm7, %xmm0
	jne	.LBB106_19
	jp	.LBB106_19
	xorpd	%xmm0, %xmm0
	xorl	%eax, %eax
	ucomisd	%xmm7, %xmm0
	seta	%al
	addq	$5, %rax
	jmp	.LBB106_21
.LBB106_19:
	ucomisd	%xmm7, %xmm7
	jp	.LBB106_22
	movq	%xmm7, %rcx
	movabsq	$9218868437227405312, %rdx
	xorl	%eax, %eax
	testq	%rdx, %rcx
	sete	%al
.LBB106_21:
	addq	$-3, %rax
	testq	$-3, %rax
	je	.LBB106_25
.LBB106_22:
	movb	$43, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB106_25
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB106_25
	incq	112(%rsi)
.LBB106_25:
	movq	%rdi, 32(%rsp)
	movq	%rsi, %rcx
	movapd	%xmm7, %xmm1
	movq	%r14, %r8
	movl	%ebx, %r9d
	callq	fmt.fmt_float
	movb	$106, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB106_28
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB106_28
	incq	112(%rsi)
.LBB106_28:
	cmpb	$0, 1(%rsi)
	jne	.LBB106_38
	xorpd	%xmm0, %xmm0
	ucomisd	%xmm0, %xmm6
	jb	.LBB106_38
	jne	.LBB106_31
	jp	.LBB106_31
	movmskpd	%xmm6, %eax
	orq	$2, %rax
	jmp	.LBB106_34
.LBB106_31:
	movsd	__real@3fe0000000000000(%rip), %xmm0
	mulsd	%xmm6, %xmm0
	ucomisd	%xmm6, %xmm0
	jne	.LBB106_32
	jp	.LBB106_32
	xorpd	%xmm0, %xmm0
	xorl	%eax, %eax
	ucomisd	%xmm6, %xmm0
	seta	%al
	addq	$5, %rax
	jmp	.LBB106_34
.LBB106_32:
	ucomisd	%xmm6, %xmm6
	jp	.LBB106_35
	movq	%xmm6, %rcx
	movabsq	$9218868437227405312, %rdx
	xorl	%eax, %eax
	testq	%rdx, %rcx
	sete	%al
.LBB106_34:
	addq	$-3, %rax
	testq	$-3, %rax
	je	.LBB106_38
.LBB106_35:
	movb	$43, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB106_38
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB106_38
	incq	112(%rsi)
.LBB106_38:
	movq	%rdi, 32(%rsp)
	movq	%rsi, %rcx
	movapd	%xmm6, %xmm1
	movq	%r14, %r8
	movl	%ebx, %r9d
	callq	fmt.fmt_float
	movb	$107, 71(%rsp)
	movq	%r15, 80(%rsp)
	movq	$1, 88(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB106_41
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	72(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	80(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	testl	%eax, %eax
	jne	.LBB106_41
	incq	112(%rsi)
.LBB106_41:
	movaps	96(%rsp), %xmm6
	movaps	112(%rsp), %xmm7
	movaps	128(%rsp), %xmm8
	addq	$144, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	fmt.fmt_arg;
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
fmt.fmt_arg:
.seh_proc fmt.fmt_arg
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$360, %rsp
	.seh_stackalloc 360
	movaps	%xmm8, 336(%rsp)
	.seh_savexmm %xmm8, 336
	movaps	%xmm7, 320(%rsp)
	.seh_savexmm %xmm7, 320
	movaps	%xmm6, 304(%rsp)
	.seh_savexmm %xmm6, 304
	.seh_endprologue
	movq	(%rdx), %rax
	testq	%rax, %rax
	je	.LBB107_2
	movq	8(%rdx), %r10
	testq	%r10, %r10
	je	.LBB107_2
	movabsq	$72057594037927935, %r11
	movq	%rax, 56(%rcx)
	movq	%r10, 64(%rcx)
	movq	8(%rdx), %rax
	movq	%rax, %r10
	andq	%r11, %r10
	xorl	%edi, %edi
	cmpq	$160, %r10
	cmovbq	%r10, %rdi
	leaq	.L__$type_info_data(%rip), %rsi
	leaq	(%rsi,%rdi,8), %r10
	cmpl	$84, %r8d
	jne	.LBB107_9
	movabsq	$720575940379279395, %r8
	cmpq	%r8, %rax
	jne	.LBB107_7
	movq	(%rdx), %r10
.LBB107_7:
	movq	(%r10), %rdx
	leaq	40(%rcx), %rax
	addq	$112, %rcx
	movq	%r9, 32(%rsp)
	leaq	264(%rsp), %r9
.LBB107_8:
	movq	%rcx, %r8
	movq	%rax, %rcx
	callq	reflect.write_type_writer
	jmp	.LBB107_86
.LBB107_2:
	movq	40(%rcx), %rax
	testq	%rax, %rax
	je	.LBB107_86
	movq	48(%rcx), %rcx
	movq	$0, 104(%rsp)
	movq	%r9, 48(%rsp)
	leaq	104(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$24d(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	jmp	.LBB107_86
.LBB107_9:
	movq	(%r10), %rax
	cmpq	$1, 104(%rax)
	jne	.LBB107_11
	movups	32(%rax), %xmm0
	movdqu	64(%rax), %xmm1
	movaps	%xmm0, 192(%rsp)
	movups	48(%rax), %xmm0
	movaps	%xmm0, 208(%rsp)
	movdqa	%xmm1, 224(%rsp)
	movq	%r9, 32(%rsp)
	leaq	192(%rsp), %r9
	callq	fmt.fmt_named
.LBB107_86:
	movaps	304(%rsp), %xmm6
	movaps	320(%rsp), %xmm7
	movaps	336(%rsp), %xmm8
	addq	$360, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB107_11:
	pxor	%xmm0, %xmm0
	movdqa	%xmm0, 224(%rsp)
	movdqa	%xmm0, 208(%rsp)
	movdqa	%xmm0, 192(%rsp)
	movq	(%rdx), %rbx
	movq	24(%rax), %r10
	movabsq	$288230376151711880, %rax
	cmpq	%rax, %r10
	jg	.LBB107_25
	movabsq	$216172782113783824, %rax
	cmpq	%rax, %r10
	jg	.LBB107_18
	movabsq	$-72057594037927938, %rax
	addq	%r10, %rax
	cmpq	$142, %rax
	ja	.LBB107_14
	leaq	.LJTI107_1(%rip), %r10
	movslq	(%r10,%rax,4), %rax
	addq	%r10, %rax
	jmpq	*%rax
.LBB107_83:
	movq	(%rbx), %rdx
.LBB107_84:
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$64, %r9d
	jmp	.LBB107_76
.LBB107_25:
	movabsq	$4683743612465315968, %rax
	cmpq	%rax, %r10
	jg	.LBB107_44
	movabsq	$504403158265495682, %rax
	cmpq	%rax, %r10
	jg	.LBB107_40
	movabsq	$432345564227567649, %rax
	cmpq	%rax, %r10
	jle	.LBB107_28
	movabsq	$504403158265495598, %rax
	cmpq	%rax, %r10
	jg	.LBB107_37
	movabsq	$432345564227567650, %rax
	cmpq	%rax, %r10
	je	.LBB107_85
	movabsq	$504403158265495562, %rax
	cmpq	%rax, %r10
	je	.LBB107_35
	jmp	.LBB107_100
.LBB107_44:
	movabsq	$-4683743612465315969, %rax
	addq	%r10, %rax
	cmpq	$19, %rax
	ja	.LBB107_45
	leaq	.LJTI107_4(%rip), %r10
	movslq	(%r10,%rax,4), %rax
	addq	%r10, %rax
	jmpq	*%rax
.LBB107_98:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	movq	64(%rsp), %rax
	movq	72(%rsp), %rdx
	bswapq	%rdx
	bswapq	%rax
	movq	%rax, 136(%rsp)
	movq	%rdx, 128(%rsp)
	movq	%r9, 32(%rsp)
	leaq	128(%rsp), %rdx
	jmp	.LBB107_95
.LBB107_18:
	movabsq	$216172782113783931, %rax
	cmpq	%rax, %r10
	jle	.LBB107_19
	movabsq	$-216172782113783932, %rax
	addq	%rax, %r10
	cmpq	$29, %r10
	ja	.LBB107_100
	leaq	.LJTI107_2(%rip), %rax
	movslq	(%rax,%r10,4), %r10
	addq	%rax, %r10
	jmpq	*%r10
.LBB107_51:
	pinsrw	$0, (%rbx), %xmm0
	jmp	.LBB107_52
.LBB107_40:
	movabsq	$-4683743612465315844, %rax
	addq	%r10, %rax
	cmpq	$22, %rax
	ja	.LBB107_41
	leaq	.LJTI107_3(%rip), %r10
	movslq	(%r10,%rax,4), %rax
	addq	%r10, %rax
	jmpq	*%rax
.LBB107_77:
	movslq	(%rbx), %rdx
	jmp	.LBB107_78
.LBB107_14:
	leaq	-6(%r10), %rax
	cmpq	$14, %rax
	ja	.LBB107_15
	leaq	.LJTI107_0(%rip), %r10
	movslq	(%r10,%rax,4), %rax
	addq	%r10, %rax
	jmpq	*%rax
.LBB107_49:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	64(%rsp), %rdx
	callq	fmt.fmt_arg
	jmp	.LBB107_86
.LBB107_28:
	movl	%r8d, %eax
	movabsq	$288230376151711881, %r8
	cmpq	%r8, %r10
	je	.LBB107_65
	movabsq	$288230376151711887, %r8
	cmpq	%r8, %r10
	je	.LBB107_63
	movabsq	$288230376151711896, %r8
	cmpq	%r8, %r10
	movl	%eax, %r8d
	jne	.LBB107_100
	pinsrw	$0, (%rbx), %xmm0
	movq	%rcx, %rsi
	movl	%r8d, %edi
	movq	%r9, %r14
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm6
	pinsrw	$0, 2(%rbx), %xmm0
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm6, 144(%rsp)
	movsd	%xmm0, 152(%rsp)
	movq	%r14, 32(%rsp)
	leaq	144(%rsp), %rdx
	movl	$32, %r8d
	movq	%rsi, %rcx
	movl	%edi, %r9d
	callq	fmt.fmt_complex
	jmp	.LBB107_86
.LBB107_19:
	movl	%r8d, %eax
	movabsq	$216172782113783825, %r8
	cmpq	%r8, %r10
	je	.LBB107_53
	movabsq	$216172782113783829, %r8
	cmpq	%r8, %r10
	je	.LBB107_54
	movabsq	$216172782113783833, %r8
	cmpq	%r8, %r10
	movl	%eax, %r8d
	jne	.LBB107_100
	movl	(%rbx), %eax
	bswapl	%eax
	movd	%eax, %xmm0
	jmp	.LBB107_58
.LBB107_81:
	movq	(%rbx), %rdx
	jmp	.LBB107_82
.LBB107_37:
	movabsq	$504403158265495599, %rax
	cmpq	%rax, %r10
	je	.LBB107_35
	movabsq	$504403158265495677, %rax
	cmpq	%rax, %r10
	jne	.LBB107_100
	cmpq	$0, (%rbx)
	jmp	.LBB107_36
.LBB107_35:
	cmpb	$0, (%rbx)
	jmp	.LBB107_36
.LBB107_45:
	movabsq	$4755801206503243794, %rax
	cmpq	%rax, %r10
	je	.LBB107_50
	movabsq	$5044031582654955523, %rax
	cmpq	%rax, %r10
	jne	.LBB107_100
	movq	(%rbx), %rdx
	movaps	304(%rsp), %xmm6
	movaps	320(%rsp), %xmm7
	movaps	336(%rsp), %xmm8
	addq	$360, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	fmt.fmt_cstring
.LBB107_96:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	movq	%r9, 32(%rsp)
	leaq	64(%rsp), %rdx
	jmp	.LBB107_97
.LBB107_74:
	movzwl	(%rbx), %edx
	jmp	.LBB107_75
.LBB107_79:
	movl	(%rbx), %edx
	jmp	.LBB107_80
.LBB107_70:
	movswq	(%rbx), %rdx
	jmp	.LBB107_71
.LBB107_94:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	movq	%r9, 32(%rsp)
	leaq	64(%rsp), %rdx
.LBB107_95:
	movl	%r8d, %r9d
	movb	$1, %r8b
	callq	fmt.fmt_int_128
	jmp	.LBB107_86
.LBB107_41:
	movabsq	$504403158265495683, %rax
	cmpq	%rax, %r10
	je	.LBB107_48
	movabsq	$504403158265495694, %rax
	cmpq	%rax, %r10
	jne	.LBB107_100
	cmpw	$0, (%rbx)
	jmp	.LBB107_36
.LBB107_63:
	cvtps2pd	(%rbx), %xmm0
	movaps	%xmm0, 240(%rsp)
	movq	%r9, 32(%rsp)
	leaq	240(%rsp), %rdx
	movl	$64, %r8d
	jmp	.LBB107_64
.LBB107_65:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	movq	%r9, 32(%rsp)
	leaq	64(%rsp), %rdx
	movl	$128, %r8d
.LBB107_64:
	movl	%eax, %r9d
	callq	fmt.fmt_complex
	jmp	.LBB107_86
.LBB107_85:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	leaq	64(%rsp), %rdx
	callq	fmt.fmt_string
	jmp	.LBB107_86
.LBB107_15:
	cmpq	$149, %r10
	jne	.LBB107_100
	movq	(%rbx), %r14
	pinsrw	$0, %r14d, %xmm0
	movq	%rcx, %rdi
	movl	%r8d, %esi
	movq	%r9, %rbx
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm6
	movl	%r14d, %eax
	shrl	$16, %eax
	pinsrw	$0, %eax, %xmm0
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm7
	movq	%r14, %rax
	shrq	$32, %rax
	pinsrw	$0, %eax, %xmm0
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm8
	shrq	$48, %r14
	pinsrw	$0, %r14d, %xmm0
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm0
	movsd	%xmm6, 160(%rsp)
	movsd	%xmm7, 168(%rsp)
	movsd	%xmm8, 176(%rsp)
	movsd	%xmm0, 184(%rsp)
	movq	%rbx, 32(%rsp)
	leaq	160(%rsp), %rdx
	movl	$64, %r8d
	movq	%rdi, %rcx
	movl	%esi, %r9d
	callq	fmt.fmt_quaternion
	jmp	.LBB107_86
.LBB107_88:
	movzwl	(%rbx), %eax
	rolw	$8, %ax
	movswq	%ax, %rdx
.LBB107_71:
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$16, %r9d
	jmp	.LBB107_72
.LBB107_68:
	movsbq	(%rbx), %rdx
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$8, %r9d
	jmp	.LBB107_72
.LBB107_92:
	movq	(%rbx), %rdx
	bswapq	%rdx
.LBB107_82:
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$64, %r9d
	jmp	.LBB107_72
.LBB107_90:
	movl	(%rbx), %eax
	bswapl	%eax
	movslq	%eax, %rdx
.LBB107_78:
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$32, %r9d
.LBB107_72:
	movb	$1, %r8b
	callq	fmt.fmt_int
	jmp	.LBB107_86
.LBB107_61:
	movzwl	(%rbx), %eax
	rolw	$8, %ax
	pinsrw	$0, %eax, %xmm0
.LBB107_52:
	movq	%rcx, %rsi
	movl	%r8d, %edi
	movq	%r9, %rbx
	callq	__extendhfsf2
	cvtss2sd	%xmm0, %xmm1
	movq	%rbx, 32(%rsp)
	movl	$16, %r8d
	movq	%rsi, %rcx
	movl	%edi, %r9d
	callq	fmt.fmt_float
	jmp	.LBB107_86
.LBB107_57:
	movd	(%rbx), %xmm0
.LBB107_58:
	cvtss2sd	%xmm0, %xmm1
	movq	%r9, 32(%rsp)
	movl	%r8d, %r9d
	movl	$32, %r8d
	callq	fmt.fmt_float
	jmp	.LBB107_86
.LBB107_62:
	movq	(%rbx), %rax
	bswapq	%rax
	movq	%rax, %xmm1
	jmp	.LBB107_60
.LBB107_59:
	movq	(%rbx), %xmm1
.LBB107_60:
	movq	%r9, 32(%rsp)
	movl	%r8d, %r9d
	movl	$64, %r8d
	callq	fmt.fmt_float
	jmp	.LBB107_86
.LBB107_99:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	movq	64(%rsp), %rax
	movq	72(%rsp), %rdx
	bswapq	%rdx
	bswapq	%rax
	movq	%rax, 120(%rsp)
	movq	%rdx, 112(%rsp)
	movq	%r9, 32(%rsp)
	leaq	112(%rsp), %rdx
.LBB107_97:
	movl	%r8d, %r9d
	xorl	%r8d, %r8d
	callq	fmt.fmt_int_128
	jmp	.LBB107_86
.LBB107_93:
	movq	(%rbx), %rdx
	bswapq	%rdx
	jmp	.LBB107_84
.LBB107_69:
	movzbl	(%rbx), %edx
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$8, %r9d
	jmp	.LBB107_76
.LBB107_89:
	movzwl	(%rbx), %eax
	rolw	$8, %ax
	movzwl	%ax, %edx
.LBB107_75:
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$16, %r9d
	jmp	.LBB107_76
.LBB107_91:
	movl	(%rbx), %edx
	bswapl	%edx
.LBB107_80:
	movq	%r9, 40(%rsp)
	movl	%r8d, 32(%rsp)
	movl	$32, %r9d
.LBB107_76:
	xorl	%r8d, %r8d
	callq	fmt.fmt_int
	jmp	.LBB107_86
.LBB107_66:
	movups	(%rbx), %xmm0
	movaps	%xmm0, 64(%rsp)
	cvtps2pd	64(%rsp), %xmm0
	movaps	%xmm0, 272(%rsp)
	cvtps2pd	72(%rsp), %xmm0
	movaps	%xmm0, 288(%rsp)
	movq	%r9, 32(%rsp)
	leaq	272(%rsp), %rdx
	movl	%r8d, %r9d
	movl	$128, %r8d
	callq	fmt.fmt_quaternion
	jmp	.LBB107_86
.LBB107_87:
	leaq	40(%rcx), %rax
	addq	$112, %rcx
	andq	(%rbx), %r11
	xorl	%edx, %edx
	cmpq	$160, %r11
	cmovbq	%r11, %rdx
	movq	(%rsi,%rdx,8), %rdx
	movq	%r9, 32(%rsp)
	leaq	104(%rsp), %r9
	jmp	.LBB107_8
.LBB107_67:
	movups	(%rbx), %xmm0
	movdqu	16(%rbx), %xmm1
	movdqa	%xmm1, 80(%rsp)
	movaps	%xmm0, 64(%rsp)
	movq	%r9, 32(%rsp)
	leaq	64(%rsp), %rdx
	movl	%r8d, %r9d
	movl	$256, %r8d
	callq	fmt.fmt_quaternion
	jmp	.LBB107_86
.LBB107_53:
	movss	(%rbx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	%r9, 32(%rsp)
	movl	$32, %r8d
	jmp	.LBB107_55
.LBB107_54:
	movsd	(%rbx), %xmm1
	movq	%r9, 32(%rsp)
	movl	$64, %r8d
.LBB107_55:
	movl	%eax, %r9d
	callq	fmt.fmt_float
	jmp	.LBB107_86
.LBB107_100:
	movaps	304(%rsp), %xmm6
	movaps	320(%rsp), %xmm7
	movaps	336(%rsp), %xmm8
	addq	$360, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	fmt.fmt_value
.LBB107_50:
	movl	(%rbx), %edx
	movaps	304(%rsp), %xmm6
	movaps	320(%rsp), %xmm7
	movaps	336(%rsp), %xmm8
	addq	$360, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	fmt.fmt_rune
.LBB107_48:
	cmpl	$0, (%rbx)
.LBB107_36:
	setne	%dl
	movaps	304(%rsp), %xmm6
	movaps	320(%rsp), %xmm7
	movaps	336(%rsp), %xmm8
	addq	$360, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r14
	jmp	fmt.fmt_bool
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI107_0:
	.long	.LBB107_49-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_87-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_66-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_100-.LJTI107_0
	.long	.LBB107_67-.LJTI107_0
.LJTI107_1:
	.long	.LBB107_69-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_74-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_79-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_83-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_83-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_89-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_74-.LJTI107_1
	.long	.LBB107_83-.LJTI107_1
	.long	.LBB107_96-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_96-.LJTI107_1
	.long	.LBB107_93-.LJTI107_1
	.long	.LBB107_79-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_91-.LJTI107_1
	.long	.LBB107_99-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_100-.LJTI107_1
	.long	.LBB107_83-.LJTI107_1
.LJTI107_2:
	.long	.LBB107_62-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_59-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_57-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_51-.LJTI107_2
	.long	.LBB107_51-.LJTI107_2
	.long	.LBB107_100-.LJTI107_2
	.long	.LBB107_61-.LJTI107_2
.LJTI107_3:
	.long	.LBB107_81-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_70-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_94-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_77-.LJTI107_3
	.long	.LBB107_81-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_100-.LJTI107_3
	.long	.LBB107_77-.LJTI107_3
.LJTI107_4:
	.long	.LBB107_94-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_98-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_92-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_68-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_100-.LJTI107_4
	.long	.LBB107_90-.LJTI107_4
	.long	.LBB107_81-.LJTI107_4
	.long	.LBB107_70-.LJTI107_4
	.long	.LBB107_88-.LJTI107_4
	.text
	.seh_endproc

	.def	"runtime.bounds_check_error.handle_error-0";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"runtime.bounds_check_error.handle_error-0":
.seh_proc "runtime.bounds_check_error.handle_error-0"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$72, %rsp
	.seh_stackalloc 72
	.seh_endprologue
	movq	%r9, %rsi
	movq	128(%rsp), %rdi
	xorps	%xmm0, %xmm0
	movups	%xmm0, 56(%rsp)
	movups	(%rcx), %xmm0
	movups	%xmm0, 32(%rsp)
	movl	%edx, 48(%rsp)
	movl	%r8d, 52(%rsp)
	leaq	32(%rsp), %rcx
	callq	runtime.print_caller_location
	leaq	.Lggv$24f(%rip), %rcx
	callq	runtime.print_string
	movq	%rsi, %rcx
	callq	runtime.print_i64
	leaq	.Lggv$250(%rip), %rcx
	callq	runtime.print_string
	movq	%rdi, %rcx
	callq	runtime.print_i64
	movb	$10, %cl
	callq	runtime.print_byte
	callq	runtime.bounds_trap
	int3
	.seh_endproc

	.def	"runtime.type_assertion_check2.handle_error-1";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"runtime.type_assertion_check2.handle_error-1":
.seh_proc "runtime.type_assertion_check2.handle_error-1"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$88, %rsp
	.seh_stackalloc 88
	.seh_endprologue
	movq	%r9, %rsi
	testq	%r9, %r9
	jne	.LBB109_2
.LBB109_1:
	xorl	%edi, %edi
	jmp	.LBB109_22
.LBB109_2:
	movq	168(%rsp), %rax
	movq	%rsi, %rdi
	testq	%rax, %rax
	je	.LBB109_22
	movabsq	$72057594037927935, %r9
	andq	%rsi, %r9
	xorl	%r10d, %r10d
	cmpq	$160, %r9
	cmovbq	%r9, %r10
	leaq	.L__$type_info_data(%rip), %r9
	movq	(%r9,%r10,8), %rdi
	testq	%rdi, %rdi
	jne	.LBB109_9
	movq	104, %r9
	xorl	%edi, %edi
.LBB109_5:
	cmpq	$20, %r9
	je	.LBB109_11
	movq	%rsi, %rdi
	cmpq	$9, %r9
	jne	.LBB109_22
	addq	$8, %rax
.LBB109_8:
	movq	(%rax), %rdi
	jmp	.LBB109_22
	.p2align	4, 0x90
.LBB109_9:
	movq	104(%rdi), %r9
	cmpq	$1, %r9
	jne	.LBB109_5
	movq	48(%rdi), %rdi
	jmp	.LBB109_9
.LBB109_11:
	movq	32(%rdi), %r11
	movq	40(%rdi), %r10
	movq	56(%rdi), %r9
	movq	(%r9), %rbx
	xorl	%r9d, %r9d
	decq	%rbx
	cmpq	$15, %rbx
	ja	.LBB109_19
	movq	48(%rdi), %rdi
	leaq	.LJTI109_0(%rip), %r14
	movslq	(%r14,%rbx,4), %rbx
	addq	%r14, %rbx
	jmpq	*%rbx
.LBB109_13:
	movq	(%rax,%rdi), %r9
	jmp	.LBB109_17
.LBB109_14:
	movl	(%rax,%rdi), %r9d
	jmp	.LBB109_17
.LBB109_15:
	movzbl	(%rax,%rdi), %r9d
	jmp	.LBB109_17
.LBB109_16:
	movzwl	(%rax,%rdi), %r9d
.LBB109_17:
	decq	%r9
	js	.LBB109_1
.LBB109_19:
	movq	%rsi, %rdi
	cmpq	%r10, %r9
	jge	.LBB109_22
	jae	.LBB109_25
	movq	(%r11,%r9,8), %rax
	addq	$24, %rax
	jmp	.LBB109_8
.LBB109_22:
	movq	160(%rsp), %rbx
	xorps	%xmm0, %xmm0
	movups	%xmm0, 72(%rsp)
	movups	(%rcx), %xmm0
	movups	%xmm0, 48(%rsp)
	movl	%edx, 64(%rsp)
	movl	%r8d, 68(%rsp)
	leaq	48(%rsp), %rcx
	callq	runtime.print_caller_location
	leaq	.Lggv$25b(%rip), %rcx
	callq	runtime.print_string
	movq	%rsi, %rcx
	callq	runtime.print_typeid
	leaq	.Lggv$25c(%rip), %rcx
	callq	runtime.print_string
	movq	%rbx, %rcx
	callq	runtime.print_typeid
	cmpq	%rsi, %rdi
	je	.LBB109_24
	leaq	.Lggv$25d(%rip), %rcx
	callq	runtime.print_string
	movq	%rdi, %rcx
	callq	runtime.print_typeid
.LBB109_24:
	movb	$10, %cl
	callq	runtime.print_byte
	callq	runtime.type_assertion_trap
.LBB109_25:
	movq	%r10, 32(%rsp)
	leaq	.Lggv$25a(%rip), %rcx
	movl	$209, %edx
	movl	$24, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI109_0:
	.long	.LBB109_15-.LJTI109_0
	.long	.LBB109_16-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_14-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_13-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_19-.LJTI109_0
	.long	.LBB109_13-.LJTI109_0
	.text
	.seh_endproc

	.def	"fmt.wprintf.parse_options-0";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"fmt.wprintf.parse_options-0":
.seh_proc "fmt.wprintf.parse_options-0"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	movq	160(%rsp), %rbx
	cmpq	$15, %rdx
	jg	.LBB110_1
	leaq	.Lcsbs$d8(%rip), %r10
	leaq	.LJTI110_0(%rip), %r11
	xorl	%eax, %eax
	movq	%rdx, %rsi
	jmp	.LBB110_3
.LBB110_10:
	cmpb	$0, (%rcx)
	sete	3(%rcx)
.LBB110_11:
	leaq	1(%rsi), %rdi
	cmpq	$15, %rsi
	movq	%rdi, %rsi
	je	.LBB110_12
.LBB110_3:
	cmpq	$16, %rsi
	jae	.LBB110_77
	movzbl	(%rsi,%r10), %edi
	addl	$-32, %edi
	cmpl	$16, %edi
	ja	.LBB110_34
	movslq	(%r11,%rdi,4), %rdi
	addq	%r11, %rdi
	jmpq	*%rdi
.LBB110_8:
	movb	$1, 2(%rcx)
	jmp	.LBB110_11
.LBB110_6:
	movb	$1, 1(%rcx)
	jmp	.LBB110_11
.LBB110_9:
	movb	$1, 4(%rcx)
	jmp	.LBB110_11
.LBB110_7:
	movb	$1, (%rcx)
	movb	$0, 3(%rcx)
	jmp	.LBB110_11
.LBB110_1:
	xorl	%eax, %eax
	movq	%rdx, %r11
	jmp	.LBB110_39
.LBB110_12:
	movl	$16, %edx
	movl	$16, %r11d
.LBB110_39:
	cmpq	%rdx, %r11
	movq	%rax, 16(%rcx)
	setg	5(%rcx)
	movq	%r11, %rsi
.LBB110_40:
	cmpq	$15, %rsi
	jg	.LBB110_41
	ja	.LBB110_78
	leaq	.Lcsbs$d8(%rip), %rax
	movzbl	(%rsi,%rax), %eax
	movq	%rsi, %r11
.LBB110_44:
	cmpb	$46, %al
	jne	.LBB110_45
	cmpq	$15, %r11
	jae	.LBB110_47
	leaq	1(%r11), %r10
	leaq	.Lcsbs$d8(%rip), %rdx
	cmpb	$42, (%r10,%rdx)
	jne	.LBB110_70
	movl	$16, %eax
	cmpq	$14, %r11
	je	.LBB110_76
	leaq	2(%r11), %rax
	cmpb	$91, (%rax,%rdx)
	jne	.LBB110_76
	cmpq	$11, %r11
	ja	.LBB110_58
	movq	8(%r9), %r10
	movl	$14, %esi
	subq	%r11, %rsi
	leaq	4(%r11), %rax
	movl	$1, %edi
.LBB110_53:
	cmpb	$93, -1(%rax,%rdx)
	je	.LBB110_54
	incq	%rdi
	incq	%rax
	cmpq	$17, %rax
	jne	.LBB110_53
.LBB110_58:
	addq	$3, %r11
	movq	%r11, %rax
	jmp	.LBB110_76
.LBB110_41:
	movq	%rsi, %rax
	jmp	.LBB110_76
.LBB110_45:
	movq	%r11, %rax
	jmp	.LBB110_76
.LBB110_47:
	leaq	24(%rcx), %r8
	addq	$6, %rcx
	movl	$16, %r10d
.LBB110_75:
	movq	$0, (%r8)
	movb	$1, (%rcx)
	movq	%r10, %rax
.LBB110_76:
	addq	$64, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r14
	popq	%r15
	retq
.LBB110_13:
	movl	$16, %eax
	cmpq	$15, %rsi
	je	.LBB110_76
	leaq	1(%rsi), %r11
	movzbl	(%r11,%r10), %eax
	cmpb	$91, %al
	jne	.LBB110_44
	cmpq	$12, %rsi
	ja	.LBB110_28
	movq	8(%r9), %rdx
	movq	%rsi, %r11
	xorq	$15, %r11
	movq	$-3, %rax
	leaq	.Lcsbs$d8+2(%rip), %rdi
.LBB110_17:
	cmpb	$93, (%rdi,%rsi)
	je	.LBB110_18
	leaq	(%r11,%rax), %r14
	decq	%r14
	decq	%rax
	incq	%rdi
	cmpq	$-2, %r14
	jne	.LBB110_17
.LBB110_28:
	addq	$2, %rsi
	jmp	.LBB110_40
.LBB110_34:
	xorl	%eax, %eax
	movq	%rsi, %r11
	.p2align	4, 0x90
.LBB110_35:
	movzbl	(%r11,%r10), %edx
	leal	-58(%rdx), %edi
	cmpb	$-10, %dil
	jb	.LBB110_38
	incq	%r11
	leaq	(%rax,%rax,4), %rax
	leaq	(%rdx,%rax,2), %rax
	addq	$-48, %rax
	cmpq	$16, %r11
	jne	.LBB110_35
	movl	$16, %r11d
.LBB110_38:
	movq	%rsi, %rdx
	jmp	.LBB110_39
.LBB110_70:
	leaq	24(%rcx), %r8
	addq	$6, %rcx
	xorl	%r9d, %r9d
	movq	%r10, %rax
	.p2align	4, 0x90
.LBB110_71:
	movzbl	(%rax,%rdx), %r11d
	leal	-58(%r11), %esi
	cmpb	$-10, %sil
	jb	.LBB110_74
	incq	%rax
	leaq	(%r9,%r9,4), %r9
	leaq	(%r11,%r9,2), %r9
	addq	$-48, %r9
	cmpq	$16, %rax
	jne	.LBB110_71
	movl	$16, %eax
.LBB110_74:
	movq	%r9, (%r8)
	cmpq	%r10, %rax
	setg	(%rcx)
	je	.LBB110_75
	jmp	.LBB110_76
.LBB110_18:
	leaq	(%rsi,%r10), %r14
	addq	$2, %r14
	movl	$1, %edi
	xorl	%r10d, %r10d
.LBB110_19:
	movzbl	-1(%r14,%rdi), %r15d
	leal	-58(%r15), %ebp
	cmpb	$-10, %bpl
	jb	.LBB110_22
	incq	%rdi
	leaq	(%r10,%r10,4), %r10
	leaq	(%r15,%r10,2), %r10
	addq	$-48, %r10
	cmpq	%rdi, %r11
	jne	.LBB110_19
	movq	%r11, %rdi
.LBB110_22:
	leaq	(%rdi,%rax), %r11
	cmpq	$2, %rdi
	setl	%dil
	cmpq	$-2, %r11
	setne	%r11b
	orb	%dil, %r11b
	subq	%rax, %rsi
	xorl	%eax, %eax
	testb	%r11b, %r11b
	cmoveq	%r10, %rax
	jne	.LBB110_40
	testq	%rax, %rax
	js	.LBB110_40
	cmpq	%rdx, %rax
	jge	.LBB110_40
	movq	%rcx, %r14
	movq	$-2, %rdx
	movl	%eax, %ecx
	rolq	%cl, %rdx
	cmpq	$64, %rax
	movq	$-1, %rcx
	cmovbq	%rdx, %rcx
	andq	%rcx, (%r8)
	cmpq	%rax, 8(%r9)
	jle	.LBB110_26
	movq	%r8, %r15
	shlq	$4, %rax
	movq	%r9, %r12
	addq	(%r9), %rax
	movq	$0, 56(%rsp)
	leaq	56(%rsp), %rdi
	movq	%rax, %rcx
	movq	%rdi, %rdx
	callq	reflect.as_i64
	movq	56(%rsp), %rdx
	movq	%r14, %rcx
	movq	%rdx, 16(%r14)
	movb	%al, 5(%r14)
	testb	%al, %al
	jne	.LBB110_32
	movq	40(%rcx), %rax
	testq	%rax, %rax
	je	.LBB110_32
	movq	48(%rcx), %rcx
	movq	$0, 56(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rdi, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$260(%rip), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	%r14, %rcx
	movq	56(%rsp), %rax
	addq	%rax, 112(%r14)
	movq	16(%r14), %rdx
.LBB110_32:
	movq	%r12, %r9
	testq	%rdx, %rdx
	movq	%r15, %r8
	jns	.LBB110_40
	negq	%rdx
	movq	%rdx, 16(%rcx)
	movb	$1, (%rcx)
	movb	$0, 3(%rcx)
	jmp	.LBB110_40
.LBB110_54:
	movl	$13, %r14d
	subq	%r11, %r14
	leaq	(%r11,%rdx), %r15
	addq	$3, %r15
	xorl	%edx, %edx
	xorl	%r11d, %r11d
.LBB110_55:
	movzbl	(%r15,%rdx), %r12d
	leal	-58(%r12), %ebp
	cmpb	$-10, %bpl
	jb	.LBB110_59
	leaq	(%r11,%r11,4), %r11
	leaq	(%r12,%r11,2), %r11
	addq	$-48, %r11
	incq	%rdx
	cmpq	%rdx, %r14
	jne	.LBB110_55
	jmp	.LBB110_60
.LBB110_59:
	incq	%rdx
	movq	%rdx, %rsi
.LBB110_60:
	cmpq	$2, %rsi
	setl	%bpl
	cmpq	%rdi, %rsi
	setne	%sil
	xorl	%edx, %edx
	orb	%bpl, %sil
	cmoveq	%r11, %rdx
	jne	.LBB110_76
	testq	%rdx, %rdx
	js	.LBB110_76
	cmpq	%r10, %rdx
	jge	.LBB110_76
	movq	%rcx, %r14
	movq	$-2, %r10
	movl	%edx, %ecx
	rolq	%cl, %r10
	cmpq	$64, %rdx
	movq	$-1, %rcx
	cmovbq	%r10, %rcx
	andq	%rcx, (%r8)
	cmpq	%rdx, 8(%r9)
	jle	.LBB110_64
	movq	%rax, %rdi
	shlq	$4, %rdx
	addq	(%r9), %rdx
	movq	$0, 56(%rsp)
	leaq	56(%rsp), %rsi
	movq	%rdx, %rcx
	movq	%rsi, %rdx
	callq	reflect.as_i64
	movq	56(%rsp), %rcx
	movq	%r14, %r9
	movq	%rcx, 24(%r14)
	movb	%al, 6(%r14)
	testq	%rcx, %rcx
	js	.LBB110_66
	testb	%al, %al
	movq	%rdi, %rax
	jne	.LBB110_76
	jmp	.LBB110_68
.LBB110_26:
	movq	%r14, %rcx
	movq	$0, 16(%r14)
	movb	$1, 5(%r14)
	jmp	.LBB110_40
.LBB110_64:
	movq	$0, 24(%r14)
	movb	$1, 6(%r14)
	jmp	.LBB110_76
.LBB110_66:
	movq	$0, 24(%r9)
	movb	$0, 6(%r9)
	movq	%rdi, %rax
.LBB110_68:
	movq	40(%r9), %r10
	testq	%r10, %r10
	je	.LBB110_76
	movq	48(%r9), %rcx
	movq	$0, 56(%rsp)
	movq	%rbx, 48(%rsp)
	movq	%rsi, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	.Lggv$263(%rip), %r8
	movl	$4, %edx
	movq	%r9, %rsi
	xorl	%r9d, %r9d
	callq	*%r10
	movq	%rdi, %rax
	movq	56(%rsp), %rcx
	addq	%rcx, 112(%rsi)
	jmp	.LBB110_76
.LBB110_77:
	cmpq	$17, %rdx
	movl	$16, %r9d
	cmovaeq	%rdx, %r9
	movq	$16, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$572, %edx
	movl	$15, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB110_78:
	movq	$16, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$613, %edx
	movl	$21, %r8d
	movq	%rsi, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.section	.rdata,"dr"
	.p2align	2, 0x0
.LJTI110_0:
	.long	.LBB110_8-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_9-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_13-.LJTI110_0
	.long	.LBB110_6-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_7-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_34-.LJTI110_0
	.long	.LBB110_10-.LJTI110_0
	.text
	.seh_endproc

	.def	"fmt.handle_tag-1898.handle_optional_len-0";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"fmt.handle_tag-1898.handle_optional_len-0":
.seh_proc "fmt.handle_tag-1898.handle_optional_len-0"
	pushq	%r14
	.seh_pushreg %r14
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbp
	.seh_pushreg %rbp
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$64, %rsp
	.seh_stackalloc 64
	.seh_endprologue
	testq	%r9, %r9
	je	.LBB111_13
	movslq	40(%rdx), %rax
	testq	%rax, %rax
	js	.LBB111_14
	testl	%eax, %eax
	je	.LBB111_13
	movq	8(%rdx), %r11
	movq	8(%r8), %rsi
	xorl	%r10d, %r10d
	jmp	.LBB111_4
	.p2align	4, 0x90
.LBB111_10:
	incq	%r10
	cmpq	%rax, %r10
	je	.LBB111_13
.LBB111_4:
	movq	%r10, %rdi
	shlq	$4, %rdi
	cmpq	%rsi, 8(%r11,%rdi)
	jne	.LBB111_10
	testq	%rsi, %rsi
	je	.LBB111_11
	movq	(%r11,%rdi), %rdi
	movq	(%r8), %rbx
	cmpq	%rbx, %rdi
	je	.LBB111_11
	xorl	%r14d, %r14d
	.p2align	4, 0x90
.LBB111_9:
	movzbl	(%rdi,%r14), %ebp
	cmpb	(%rbx,%r14), %bpl
	jne	.LBB111_10
	incq	%r14
	cmpq	%r14, %rsi
	jne	.LBB111_9
.LBB111_11:
	movq	(%rdx), %rax
	movq	16(%rdx), %rdx
	addq	(%rdx,%r10,8), %rcx
	movq	(%rax,%r10,8), %rax
	movq	24(%rax), %rax
	movq	%rcx, 48(%rsp)
	movq	%rax, 56(%rsp)
	movq	$0, 40(%rsp)
	leaq	48(%rsp), %rcx
	leaq	40(%rsp), %rdx
	movq	%r9, %rsi
	callq	reflect.as_i64
	testb	%al, %al
	je	.LBB111_13
	movq	%rsi, %rcx
	movq	40(%rsp), %rax
	xorl	%edx, %edx
	testq	%rax, %rax
	cmovgq	%rax, %rdx
	movq	%rdx, (%rsi)
.LBB111_13:
	addq	$64, %rsp
	popq	%rbx
	popq	%rbp
	popq	%rdi
	popq	%rsi
	popq	%r14
	retq
.LBB111_14:
	leaq	.Lggv$27d(%rip), %rcx
	movl	$1875, %edx
	movl	$25, %r8d
	movq	%rax, %r9
	callq	runtime.multi_pointer_slice_handle_error
	int3
	.seh_endproc

	.def	"fmt.fmt_named.write_padded_number-0";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"fmt.fmt_named.write_padded_number-0":
.seh_proc "fmt.fmt_named.write_padded_number-0"
	pushq	%r15
	.seh_pushreg %r15
	pushq	%r14
	.seh_pushreg %r14
	pushq	%r13
	.seh_pushreg %r13
	pushq	%r12
	.seh_pushreg %r12
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	pushq	%rbx
	.seh_pushreg %rbx
	subq	$160, %rsp
	.seh_stackalloc 160
	.seh_endprologue
	movq	%r9, %rdi
	movq	%r8, %r14
	movq	%rdx, %rbx
	movq	%rcx, %rsi
	decq	%r14
	cmpq	$10, %rdx
	jl	.LBB112_3
	movabsq	$-3689348814741910323, %r8
	movq	%rbx, %rcx
	.p2align	4, 0x90
.LBB112_2:
	movq	%rcx, %rax
	mulq	%r8
	shrq	$3, %rdx
	decq	%r14
	cmpq	$99, %rcx
	movq	%rdx, %rcx
	ja	.LBB112_2
.LBB112_3:
	testq	%r14, %r14
	jle	.LBB112_8
	leaq	96(%rsp), %r12
	leaq	72(%rsp), %r13
	leaq	112(%rsp), %r15
	jmp	.LBB112_5
	.p2align	4, 0x90
.LBB112_7:
	decq	%r14
	je	.LBB112_8
.LBB112_5:
	movb	$48, 96(%rsp)
	movq	%r12, 112(%rsp)
	movq	$1, 120(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB112_7
	movq	48(%rsi), %rcx
	movq	$0, 72(%rsp)
	movq	%rdi, 48(%rsp)
	movq	%r13, 40(%rsp)
	movq	$0, 32(%rsp)
	movl	$4, %edx
	movq	%r15, %r8
	xorl	%r9d, %r9d
	callq	*%rax
	movq	72(%rsp), %rax
	addq	%rax, 112(%rsi)
	jmp	.LBB112_7
.LBB112_8:
	xorps	%xmm0, %xmm0
	movaps	%xmm0, 112(%rsp)
	movaps	%xmm0, 128(%rsp)
	leaq	112(%rsp), %rax
	movq	%rax, 72(%rsp)
	movq	$32, 80(%rsp)
	movaps	%xmm0, 96(%rsp)
	movq	%rdi, 64(%rsp)
	leaq	strconv.digits(%rip), %rax
	movq	%rax, 48(%rsp)
	movb	$0, 56(%rsp)
	movq	$64, 40(%rsp)
	movb	$1, 32(%rsp)
	leaq	96(%rsp), %rcx
	leaq	72(%rsp), %rdx
	movl	$10, %r9d
	movq	%rbx, %r8
	callq	strconv.append_bits
	movaps	96(%rsp), %xmm0
	movups	%xmm0, 144(%rsp)
	movq	40(%rsi), %rax
	testq	%rax, %rax
	je	.LBB112_10
	movq	48(%rsi), %rcx
	movq	$0, 88(%rsp)
	movq	%rdi, 48(%rsp)
	leaq	88(%rsp), %rdx
	movq	%rdx, 40(%rsp)
	movq	$0, 32(%rsp)
	leaq	144(%rsp), %r8
	movl	$4, %edx
	xorl	%r9d, %r9d
	callq	*%rax
	movq	88(%rsp), %rax
	addq	%rax, 112(%rsi)
.LBB112_10:
	addq	$160, %rsp
	popq	%rbx
	popq	%rdi
	popq	%rsi
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	retq
	.seh_endproc

	.def	"fmt.fmt_named.fint-2";
	.scl	3;
	.type	32;
	.endef
	.p2align	4, 0x90
"fmt.fmt_named.fint-2":
.seh_proc "fmt.fmt_named.fint-2"
	pushq	%rsi
	.seh_pushreg %rsi
	pushq	%rdi
	.seh_pushreg %rdi
	subq	$40, %rsp
	.seh_stackalloc 40
	.seh_endprologue
	movq	8(%rcx), %r9
	testq	%rdx, %rdx
	je	.LBB113_4
	movq	%rdx, %r8
	movabsq	$-3689348814741910323, %r11
	.p2align	4, 0x90
.LBB113_2:
	leaq	-1(%r9), %r10
	movq	8(%rcx), %rax
	cmpq	%rax, %r10
	jae	.LBB113_3
	movq	%r8, %rax
	mulq	%r11
	movq	(%rcx), %rax
	shrq	$3, %rdx
	leal	(%rdx,%rdx), %esi
	leal	(%rsi,%rsi,4), %esi
	movl	%r8d, %edi
	subl	%esi, %edi
	orb	$48, %dil
	movb	%dil, -1(%rax,%r9)
	movq	%r10, %r9
	cmpq	$9, %r8
	movq	%rdx, %r8
	ja	.LBB113_2
	jmp	.LBB113_7
.LBB113_4:
	subq	$1, %r9
	jb	.LBB113_8
	movq	(%rcx), %rax
	movb	$48, (%rax,%r9)
	movq	%r9, %r10
.LBB113_7:
	movq	%r10, %rax
	addq	$40, %rsp
	popq	%rdi
	popq	%rsi
	retq
.LBB113_3:
	movq	%rax, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2334, %edx
	movl	$11, %r8d
	movq	%r10, %r9
	callq	"runtime.bounds_check_error.handle_error-0"
.LBB113_8:
	movq	$0, 32(%rsp)
	leaq	.Lggv$27d(%rip), %rcx
	movl	$2330, %edx
	movl	$10, %r8d
	callq	"runtime.bounds_check_error.handle_error-0"
	int3
	.seh_endproc

	.def	__$hasher1;
	.scl	2;
	.type	32;
	.endef
	.globl	__$hasher1
	.p2align	4, 0x90
__$hasher1:
	movabsq	$-3750763034362895579, %rax
	addq	%rdx, %rax
	movzbl	(%rcx), %edx
	xorq	%rax, %rdx
	movabsq	$1099511628211, %rax
	imulq	%rax, %rdx
	movzbl	1(%rcx), %r8d
	xorq	%rdx, %r8
	imulq	%rax, %r8
	movzbl	2(%rcx), %edx
	xorq	%r8, %rdx
	imulq	%rax, %rdx
	movzbl	3(%rcx), %r8d
	xorq	%rdx, %r8
	imulq	%rax, %r8
	movzbl	4(%rcx), %edx
	xorq	%r8, %rdx
	imulq	%rax, %rdx
	movzbl	5(%rcx), %r8d
	xorq	%rdx, %r8
	imulq	%rax, %r8
	movzbl	6(%rcx), %edx
	xorq	%r8, %rdx
	imulq	%rax, %rdx
	movzbl	7(%rcx), %ecx
	xorq	%rdx, %rcx
	imulq	%rax, %rcx
	movabsq	$9223372036854775807, %rdx
	xorl	%eax, %eax
	andq	%rcx, %rdx
	sete	%al
	orq	%rdx, %rax
	retq

	.section	.rdata,"dr"
	.p2align	4, 0x0
.L__$type_info_data:
	.quad	".L__$ti-0"
	.quad	".L__$ti-1"
	.quad	".L__$ti-2"
	.quad	".L__$ti-3"
	.quad	".L__$ti-4"
	.quad	".L__$ti-5"
	.quad	".L__$ti-6"
	.quad	".L__$ti-7"
	.quad	".L__$ti-8"
	.quad	".L__$ti-9"
	.quad	".L__$ti-10"
	.quad	".L__$ti-11"
	.quad	".L__$ti-12"
	.quad	".L__$ti-13"
	.quad	".L__$ti-14"
	.quad	".L__$ti-15"
	.quad	".L__$ti-16"
	.quad	".L__$ti-17"
	.quad	".L__$ti-18"
	.quad	".L__$ti-19"
	.quad	".L__$ti-20"
	.quad	".L__$ti-21"
	.quad	".L__$ti-22"
	.quad	".L__$ti-23"
	.quad	".L__$ti-24"
	.quad	".L__$ti-25"
	.quad	".L__$ti-26"
	.quad	".L__$ti-27"
	.quad	".L__$ti-28"
	.quad	".L__$ti-29"
	.quad	".L__$ti-30"
	.quad	".L__$ti-31"
	.quad	".L__$ti-32"
	.quad	".L__$ti-33"
	.quad	".L__$ti-34"
	.quad	".L__$ti-35"
	.quad	".L__$ti-36"
	.quad	".L__$ti-37"
	.quad	".L__$ti-38"
	.quad	".L__$ti-39"
	.quad	".L__$ti-40"
	.quad	".L__$ti-41"
	.quad	".L__$ti-42"
	.quad	".L__$ti-43"
	.quad	".L__$ti-44"
	.quad	".L__$ti-45"
	.quad	".L__$ti-46"
	.quad	".L__$ti-47"
	.quad	".L__$ti-48"
	.quad	".L__$ti-49"
	.quad	".L__$ti-50"
	.quad	".L__$ti-51"
	.quad	".L__$ti-52"
	.quad	".L__$ti-53"
	.quad	".L__$ti-54"
	.quad	".L__$ti-55"
	.quad	".L__$ti-56"
	.quad	".L__$ti-57"
	.quad	".L__$ti-58"
	.quad	".L__$ti-59"
	.quad	".L__$ti-60"
	.quad	".L__$ti-61"
	.quad	".L__$ti-62"
	.quad	".L__$ti-63"
	.quad	".L__$ti-64"
	.quad	".L__$ti-65"
	.quad	".L__$ti-66"
	.quad	".L__$ti-67"
	.quad	".L__$ti-68"
	.quad	".L__$ti-69"
	.quad	".L__$ti-70"
	.quad	".L__$ti-71"
	.quad	".L__$ti-72"
	.quad	".L__$ti-73"
	.quad	".L__$ti-74"
	.quad	".L__$ti-75"
	.quad	".L__$ti-76"
	.quad	".L__$ti-77"
	.quad	".L__$ti-78"
	.quad	".L__$ti-79"
	.quad	".L__$ti-80"
	.quad	".L__$ti-81"
	.quad	".L__$ti-82"
	.quad	".L__$ti-83"
	.quad	".L__$ti-84"
	.quad	".L__$ti-85"
	.quad	".L__$ti-86"
	.quad	".L__$ti-87"
	.quad	".L__$ti-88"
	.quad	".L__$ti-89"
	.quad	".L__$ti-90"
	.quad	".L__$ti-91"
	.quad	".L__$ti-92"
	.quad	".L__$ti-93"
	.quad	".L__$ti-94"
	.quad	".L__$ti-95"
	.quad	".L__$ti-96"
	.quad	".L__$ti-97"
	.quad	".L__$ti-98"
	.quad	".L__$ti-99"
	.quad	".L__$ti-100"
	.quad	".L__$ti-101"
	.quad	".L__$ti-102"
	.quad	".L__$ti-103"
	.quad	".L__$ti-104"
	.quad	".L__$ti-105"
	.quad	".L__$ti-106"
	.quad	".L__$ti-107"
	.quad	".L__$ti-108"
	.quad	".L__$ti-109"
	.quad	".L__$ti-110"
	.quad	".L__$ti-111"
	.quad	".L__$ti-112"
	.quad	".L__$ti-113"
	.quad	".L__$ti-114"
	.quad	".L__$ti-115"
	.quad	".L__$ti-116"
	.quad	".L__$ti-117"
	.quad	".L__$ti-118"
	.quad	".L__$ti-119"
	.quad	".L__$ti-120"
	.quad	".L__$ti-121"
	.quad	".L__$ti-122"
	.quad	".L__$ti-123"
	.quad	".L__$ti-124"
	.quad	".L__$ti-125"
	.quad	".L__$ti-126"
	.quad	".L__$ti-127"
	.quad	".L__$ti-128"
	.quad	".L__$ti-129"
	.quad	".L__$ti-130"
	.quad	".L__$ti-131"
	.quad	".L__$ti-132"
	.quad	".L__$ti-133"
	.quad	".L__$ti-134"
	.quad	".L__$ti-135"
	.quad	".L__$ti-136"
	.quad	".L__$ti-137"
	.quad	".L__$ti-138"
	.quad	".L__$ti-139"
	.quad	".L__$ti-140"
	.quad	".L__$ti-141"
	.quad	".L__$ti-142"
	.quad	".L__$ti-143"
	.quad	".L__$ti-144"
	.quad	".L__$ti-145"
	.quad	".L__$ti-146"
	.quad	".L__$ti-147"
	.quad	".L__$ti-148"
	.quad	".L__$ti-149"
	.quad	".L__$ti-150"
	.quad	".L__$ti-151"
	.quad	".L__$ti-152"
	.quad	".L__$ti-153"
	.quad	".L__$ti-154"
	.quad	".L__$ti-155"
	.quad	".L__$ti-156"
	.quad	".L__$ti-157"
	.quad	".L__$ti-158"
	.quad	".L__$ti-159"

	.p2align	4, 0x0
.L__$type_info_types_data:
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-38"
	.quad	".L__$ti-8"
	.quad	".L__$ti-30"
	.quad	".L__$ti-32"
	.quad	".L__$ti-45"
	.quad	".L__$ti-48"
	.quad	".L__$ti-13"
	.quad	".L__$ti-29"
	.quad	".L__$ti-49"
	.quad	".L__$ti-50"
	.quad	".L__$ti-27"
	.quad	".L__$ti-52"
	.quad	".L__$ti-53"
	.quad	".L__$ti-54"
	.quad	".L__$ti-56"
	.quad	".L__$ti-57"
	.quad	".L__$ti-61"
	.quad	".L__$ti-63"
	.quad	".L__$ti-66"
	.quad	".L__$ti-68"
	.quad	".L__$ti-69"
	.quad	".L__$ti-75"
	.quad	".L__$ti-92"
	.quad	".L__$ti-94"
	.quad	".L__$ti-98"
	.quad	".L__$ti-111"
	.quad	".L__$ti-113"
	.quad	".L__$ti-114"
	.quad	".L__$ti-116"
	.quad	".L__$ti-117"
	.quad	".L__$ti-120"
	.quad	".L__$ti-121"
	.quad	".L__$ti-34"
	.quad	".L__$ti-35"
	.quad	".L__$ti-34"
	.quad	".L__$ti-42"
	.quad	".L__$ti-34"
	.quad	".L__$ti-22"
	.quad	".L__$ti-22"
	.quad	".L__$ti-34"
	.quad	".L__$ti-47"
	.quad	".L__$ti-15"
	.quad	".L__$ti-15"
	.quad	".L__$ti-47"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-47"
	.quad	".L__$ti-59"
	.quad	".L__$ti-35"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-65"
	.quad	".L__$ti-65"
	.quad	".L__$ti-47"
	.quad	".L__$ti-35"
	.quad	".L__$ti-4"
	.quad	".L__$ti-71"
	.quad	".L__$ti-73"
	.quad	".L__$ti-77"
	.quad	".L__$ti-78"
	.quad	".L__$ti-79"
	.quad	".L__$ti-81"
	.quad	".L__$ti-78"
	.quad	".L__$ti-22"
	.quad	".L__$ti-82"
	.quad	".L__$ti-86"
	.quad	".L__$ti-22"
	.quad	".L__$ti-35"
	.quad	".L__$ti-88"
	.quad	".L__$ti-7"
	.quad	".L__$ti-7"
	.quad	".L__$ti-47"
	.quad	".L__$ti-71"
	.quad	".L__$ti-80"
	.quad	".L__$ti-35"
	.quad	".L__$ti-88"
	.quad	".L__$ti-47"
	.quad	".L__$ti-47"
	.quad	".L__$ti-47"
	.quad	".L__$ti-35"
	.quad	".L__$ti-73"
	.quad	".L__$ti-96"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-100"
	.quad	".L__$ti-103"
	.quad	".L__$ti-103"
	.quad	".L__$ti-106"
	.quad	".L__$ti-109"
	.quad	".L__$ti-80"
	.quad	".L__$ti-80"
	.quad	".L__$ti-80"
	.quad	".L__$ti-80"
	.quad	".L__$ti-7"
	.quad	".L__$ti-80"
	.quad	".L__$ti-80"
	.quad	".L__$ti-7"
	.quad	".L__$ti-7"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-23"
	.quad	".L__$ti-23"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-35"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-119"
	.quad	".L__$ti-35"
	.quad	".L__$ti-78"
	.quad	".L__$ti-77"
	.quad	".L__$ti-79"
	.quad	".L__$ti-79"
	.quad	".L__$ti-78"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-4"
	.quad	".L__$ti-23"

	.p2align	4, 0x0
.L__$type_info_names_data:
	.quad	.Lcsbs$45
	.quad	4
	.quad	.Lcsbs$46
	.quad	5
	.quad	.Lcsbs$47
	.quad	5
	.quad	.Lcsbs$48
	.quad	2
	.quad	.Lcsbs$49
	.quad	7
	.quad	.Lcsbs$4f
	.quad	4
	.quad	.Lcsbs$50
	.quad	4
	.quad	.Lcsbs$51
	.quad	3
	.quad	.Lcsbs$52
	.quad	3
	.quad	.Lcsbs$54
	.quad	9
	.quad	.Lcsbs$55
	.quad	4
	.quad	.Lcsbs$56
	.quad	6
	.quad	.Lcsbs$57
	.quad	9
	.quad	.Lcsbs$59
	.quad	6
	.quad	.Lcsbs$5a
	.quad	10
	.quad	.Lcsbs$5a
	.quad	10
	.quad	.Lcsbs$64
	.quad	10
	.quad	.Lcsbs$69
	.quad	4
	.quad	.Lcsbs$6c
	.quad	6
	.quad	.Lcsbs$6d
	.quad	7
	.quad	.Lcsbs$6e
	.quad	8
	.quad	.Lcsbs$6f
	.quad	10
	.quad	.Lcsbs$69
	.quad	4
	.quad	.Lcsbs$7c
	.quad	9
	.quad	.Lcsbs$7d
	.quad	5
	.quad	.Lcsbs$69
	.quad	4
	.quad	.Lcsbs$7f
	.quad	5
	.quad	.Lcsbs$7c
	.quad	9
	.quad	.Lcsbs$7d
	.quad	5
	.quad	.Lcsbs$80
	.quad	9
	.quad	.Lcsbs$81
	.quad	9
	.quad	.Lcsbs$82
	.quad	9
	.quad	.Lcsbs$69
	.quad	4
	.quad	.Lcsbs$7c
	.quad	9
	.quad	.Lcsbs$87
	.quad	5
	.quad	.Lcsbs$88
	.quad	5
	.quad	.Lcsbs$87
	.quad	5
	.quad	.Lcsbs$88
	.quad	5
	.quad	.Lcsbs$8b
	.quad	7
	.quad	.Lcsbs$8c
	.quad	6
	.quad	.Lcsbs$8d
	.quad	4
	.quad	.Lcsbs$8e
	.quad	11
	.quad	.Lcsbs$47
	.quad	5
	.quad	.Lcsbs$8f
	.quad	8
	.quad	.Lcsbs$90
	.quad	7
	.quad	.Lcsbs$91
	.quad	13
	.quad	.Lcsbs$92
	.quad	5
	.quad	.Lcsbs$9d
	.quad	1
	.quad	.Lcsbs$9d
	.quad	1
	.zero	16
	.quad	.Lcsbs$9f
	.quad	8
	.quad	.Lcsbs$a0
	.quad	10
	.quad	.Lcsbs$a1
	.quad	8
	.quad	.Lcsbs$92
	.quad	5
	.quad	.Lcsbs$a2
	.quad	12
	.quad	.Lcsbs$a3
	.quad	6
	.quad	.Lcsbs$a4
	.quad	10
	.quad	.Lcsbs$50
	.quad	4
	.quad	.Lcsbs$88
	.quad	5
	.quad	.Lcsbs$a6
	.quad	6
	.quad	.Lcsbs$a8
	.quad	3
	.quad	.Lcsbs$a9
	.quad	5
	.quad	.Lcsbs$aa
	.quad	8
	.quad	.Lcsbs$ad
	.quad	2
	.quad	.Lcsbs$ae
	.quad	2
	.quad	.Lcsbs$af
	.quad	10
	.quad	.Lcsbs$b0
	.quad	9
	.quad	.Lcsbs$b2
	.quad	12
	.quad	.Lcsbs$b3
	.quad	13
	.quad	.Lcsbs$b4
	.quad	12
	.quad	.Lcsbs$b5
	.quad	17
	.quad	.Lcsbs$a8
	.quad	3
	.quad	.Lcsbs$b6
	.quad	4
	.zero	16
	.quad	.Lcsbs$b7
	.quad	3
	.quad	.Lcsbs$b8
	.quad	3
	.quad	.Lcsbs$69
	.quad	4
	.quad	.Lcsbs$ba
	.quad	10
	.quad	.Lcsbs$bb
	.quad	5
	.quad	.Lcsbs$bc
	.quad	5
	.quad	.Lcsbs$bf
	.quad	7
	.quad	.Lcsbs$c0
	.quad	12
	.quad	.Lcsbs$69
	.quad	4
	.quad	.Lcsbs$7c
	.quad	9
	.quad	.Lcsbs$c3
	.quad	11
	.quad	.Lcsbs$c4
	.quad	9
	.quad	.Lcsbs$c5
	.quad	12
	.quad	.Lcsbs$c6
	.quad	6
	.quad	.Lcsbs$cb
	.quad	12
	.quad	.Lcsbs$88
	.quad	5
	.quad	.Lcsbs$87
	.quad	5
	.quad	.Lcsbs$cc
	.quad	9
	.quad	.Lcsbs$cd
	.quad	11
	.quad	.Lcsbs$8d
	.quad	4
	.quad	.Lcsbs$8e
	.quad	11
	.quad	.Lcsbs$d1
	.quad	1
	.quad	.Lcsbs$d6
	.quad	5
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16

	.p2align	4, 0x0
.L__$type_info_offsets_data:
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	32
	.quad	0
	.quad	16
	.quad	24
	.quad	40
	.quad	0
	.quad	16
	.quad	20
	.quad	24
	.quad	0
	.quad	1
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	8
	.quad	16
	.quad	17
	.quad	0
	.quad	8
	.quad	16
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	32
	.quad	40
	.quad	48
	.quad	0
	.quad	8
	.quad	0
	.quad	16
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	32
	.quad	40
	.quad	44
	.quad	45
	.quad	48
	.quad	56
	.quad	64
	.quad	0
	.quad	16
	.quad	24
	.quad	32
	.quad	40
	.quad	41
	.quad	42
	.quad	0
	.quad	8
	.quad	24
	.quad	0
	.quad	8
	.quad	16
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	0
	.quad	8
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	32
	.quad	40
	.quad	0
	.quad	8
	.quad	16
	.quad	24
	.quad	32
	.quad	40
	.quad	48
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0
	.quad	0

	.p2align	4, 0x0
.L__$type_info_usings_data:
	.zero	127

	.p2align	4, 0x0
.L__$type_info_tags_data:
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.quad	.Lcsbs$8a
	.quad	19
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16
	.zero	16

	.lcomm	runtime.args__.0,8,8
	.lcomm	runtime.args__.1,8,8
	.section	.tls$,"dw"
	.p2align	4, 0x0
runtime.global_default_temp_allocator_data:
	.zero	56

	.data
	.p2align	3, 0x0
fmt.__MEMORY_LOWER:
	.quad	.Lcsbs$0
	.quad	26

	.section	.rdata,"dr"
.Lcsbs$0:
	.asciz	" b kib mib gib tib pib eib"

	.data
	.p2align	3, 0x0
fmt.__MEMORY_UPPER:
	.quad	.Lcsbs$1
	.quad	26

	.section	.rdata,"dr"
.Lcsbs$1:
	.asciz	" B KiB MiB GiB TiB PiB EiB"

	.data
	.p2align	3, 0x0
fmt.__DIGITS_LOWER:
	.quad	.Lcsbs$2
	.quad	17

	.section	.rdata,"dr"
.Lcsbs$2:
	.asciz	"0123456789abcdefx"

	.data
	.p2align	3, 0x0
fmt.__DIGITS_UPPER:
	.quad	.Lcsbs$3
	.quad	17

	.section	.rdata,"dr"
.Lcsbs$3:
	.asciz	"0123456789ABCDEFX"

	.p2align	4, 0x0
time.days_before:
	.long	0
	.long	31
	.long	59
	.long	90
	.long	120
	.long	151
	.long	181
	.long	212
	.long	243
	.long	273
	.long	304
	.long	334
	.long	365

	.p2align	3, 0x0
utf8.accept_ranges:
	.byte	128
	.byte	191
	.byte	160
	.byte	191
	.byte	128
	.byte	159
	.byte	144
	.byte	191
	.byte	128
	.byte	143

	.p2align	4, 0x0
strconv._f16_info:
	.quad	10
	.quad	5
	.quad	-15

	.p2align	4, 0x0
strconv._f32_info:
	.quad	23
	.quad	8
	.quad	-127

	.p2align	4, 0x0
strconv._f64_info:
	.quad	52
	.quad	11
	.quad	-1023

	.data
	.p2align	3, 0x0
strconv.digits:
	.quad	.Lcsbs$4
	.quad	36

	.section	.rdata,"dr"
.Lcsbs$4:
	.asciz	"0123456789abcdefghijklmnopqrstuvwxyz"

	.p2align	4, 0x0
"strconv_decimal._shift_left_offsets-5539":
	.zero	24
	.quad	1
	.quad	.Lcsbs$6
	.quad	1
	.quad	1
	.quad	.Lcsbs$7
	.quad	2
	.quad	1
	.quad	.Lcsbs$8
	.quad	3
	.quad	2
	.quad	.Lcsbs$9
	.quad	3
	.quad	2
	.quad	.Lcsbs$a
	.quad	4
	.quad	2
	.quad	.Lcsbs$b
	.quad	5
	.quad	3
	.quad	.Lcsbs$c
	.quad	5
	.quad	3
	.quad	.Lcsbs$d
	.quad	6
	.quad	3
	.quad	.Lcsbs$e
	.quad	7
	.quad	4
	.quad	.Lcsbs$f
	.quad	7
	.quad	4
	.quad	.Lcsbs$10
	.quad	8
	.quad	4
	.quad	.Lcsbs$11
	.quad	9
	.quad	4
	.quad	.Lcsbs$12
	.quad	10
	.quad	5
	.quad	.Lcsbs$13
	.quad	10
	.quad	5
	.quad	.Lcsbs$14
	.quad	11
	.quad	5
	.quad	.Lcsbs$15
	.quad	12
	.quad	6
	.quad	.Lcsbs$16
	.quad	12
	.quad	6
	.quad	.Lcsbs$17
	.quad	13
	.quad	6
	.quad	.Lcsbs$18
	.quad	14
	.quad	7
	.quad	.Lcsbs$19
	.quad	14
	.quad	7
	.quad	.Lcsbs$1a
	.quad	15
	.quad	7
	.quad	.Lcsbs$1b
	.quad	16
	.quad	7
	.quad	.Lcsbs$1c
	.quad	17
	.quad	8
	.quad	.Lcsbs$1d
	.quad	17
	.quad	8
	.quad	.Lcsbs$1e
	.quad	18
	.quad	8
	.quad	.Lcsbs$1f
	.quad	19
	.quad	9
	.quad	.Lcsbs$20
	.quad	19
	.quad	9
	.quad	.Lcsbs$21
	.quad	20
	.quad	9
	.quad	.Lcsbs$22
	.quad	21
	.quad	10
	.quad	.Lcsbs$23
	.quad	21
	.quad	10
	.quad	.Lcsbs$24
	.quad	22
	.quad	10
	.quad	.Lcsbs$25
	.quad	23
	.quad	10
	.quad	.Lcsbs$26
	.quad	24
	.quad	11
	.quad	.Lcsbs$27
	.quad	24
	.quad	11
	.quad	.Lcsbs$28
	.quad	25
	.quad	11
	.quad	.Lcsbs$29
	.quad	26
	.quad	12
	.quad	.Lcsbs$2a
	.quad	26
	.quad	12
	.quad	.Lcsbs$2b
	.quad	27
	.quad	12
	.quad	.Lcsbs$2c
	.quad	28
	.quad	13
	.quad	.Lcsbs$2d
	.quad	28
	.quad	13
	.quad	.Lcsbs$2e
	.quad	29
	.quad	13
	.quad	.Lcsbs$2f
	.quad	30
	.quad	13
	.quad	.Lcsbs$30
	.quad	31
	.quad	14
	.quad	.Lcsbs$31
	.quad	31
	.quad	14
	.quad	.Lcsbs$32
	.quad	32
	.quad	14
	.quad	.Lcsbs$33
	.quad	33
	.quad	15
	.quad	.Lcsbs$34
	.quad	33
	.quad	15
	.quad	.Lcsbs$35
	.quad	34
	.quad	15
	.quad	.Lcsbs$36
	.quad	35
	.quad	16
	.quad	.Lcsbs$37
	.quad	35
	.quad	16
	.quad	.Lcsbs$38
	.quad	36
	.quad	16
	.quad	.Lcsbs$39
	.quad	37
	.quad	16
	.quad	.Lcsbs$3a
	.quad	38
	.quad	17
	.quad	.Lcsbs$3b
	.quad	38
	.quad	17
	.quad	.Lcsbs$3c
	.quad	39
	.quad	17
	.quad	.Lcsbs$3d
	.quad	40
	.quad	18
	.quad	.Lcsbs$3e
	.quad	40
	.quad	18
	.quad	.Lcsbs$3f
	.quad	41
	.quad	18
	.quad	.Lcsbs$40
	.quad	42
	.quad	19
	.quad	.Lcsbs$41
	.quad	42

.Lcsbs$5:
	.zero	1

.Lcsbs$6:
	.asciz	"5"

.Lcsbs$7:
	.asciz	"25"

.Lcsbs$8:
	.asciz	"125"

.Lcsbs$9:
	.asciz	"625"

.Lcsbs$a:
	.asciz	"3125"

.Lcsbs$b:
	.asciz	"15625"

.Lcsbs$c:
	.asciz	"78125"

.Lcsbs$d:
	.asciz	"390625"

.Lcsbs$e:
	.asciz	"1953125"

.Lcsbs$f:
	.asciz	"9765625"

.Lcsbs$10:
	.asciz	"48828125"

.Lcsbs$11:
	.asciz	"244140625"

.Lcsbs$12:
	.asciz	"1220703125"

.Lcsbs$13:
	.asciz	"6103515625"

.Lcsbs$14:
	.asciz	"30517578125"

.Lcsbs$15:
	.asciz	"152587890625"

.Lcsbs$16:
	.asciz	"762939453125"

.Lcsbs$17:
	.asciz	"3814697265625"

.Lcsbs$18:
	.asciz	"19073486328125"

.Lcsbs$19:
	.asciz	"95367431640625"

.Lcsbs$1a:
	.asciz	"476837158203125"

.Lcsbs$1b:
	.asciz	"2384185791015625"

.Lcsbs$1c:
	.asciz	"11920928955078125"

.Lcsbs$1d:
	.asciz	"59604644775390625"

.Lcsbs$1e:
	.asciz	"298023223876953125"

.Lcsbs$1f:
	.asciz	"1490116119384765625"

.Lcsbs$20:
	.asciz	"7450580596923828125"

.Lcsbs$21:
	.asciz	"37252902984619140625"

.Lcsbs$22:
	.asciz	"186264514923095703125"

.Lcsbs$23:
	.asciz	"931322574615478515625"

.Lcsbs$24:
	.asciz	"4656612873077392578125"

.Lcsbs$25:
	.asciz	"23283064365386962890625"

.Lcsbs$26:
	.asciz	"116415321826934814453125"

.Lcsbs$27:
	.asciz	"582076609134674072265625"

.Lcsbs$28:
	.asciz	"2910383045673370361328125"

.Lcsbs$29:
	.asciz	"14551915228366851806640625"

.Lcsbs$2a:
	.asciz	"72759576141834259033203125"

.Lcsbs$2b:
	.asciz	"363797880709171295166015625"

.Lcsbs$2c:
	.asciz	"1818989403545856475830078125"

.Lcsbs$2d:
	.asciz	"9094947017729282379150390625"

.Lcsbs$2e:
	.asciz	"45474735088646411895751953125"

.Lcsbs$2f:
	.asciz	"227373675443232059478759765625"

.Lcsbs$30:
	.asciz	"1136868377216160297393798828125"

.Lcsbs$31:
	.asciz	"5684341886080801486968994140625"

.Lcsbs$32:
	.asciz	"28421709430404007434844970703125"

.Lcsbs$33:
	.asciz	"142108547152020037174224853515625"

.Lcsbs$34:
	.asciz	"710542735760100185871124267578125"

.Lcsbs$35:
	.asciz	"3552713678800500929355621337890625"

.Lcsbs$36:
	.asciz	"17763568394002504646778106689453125"

.Lcsbs$37:
	.asciz	"88817841970012523233890533447265625"

.Lcsbs$38:
	.asciz	"444089209850062616169452667236328125"

.Lcsbs$39:
	.asciz	"2220446049250313080847263336181640625"

.Lcsbs$3a:
	.asciz	"11102230246251565404236316680908203125"

.Lcsbs$3b:
	.asciz	"55511151231257827021181583404541015625"

.Lcsbs$3c:
	.asciz	"277555756156289135105907917022705078125"

.Lcsbs$3d:
	.asciz	"1387778780781445675529539585113525390625"

.Lcsbs$3e:
	.asciz	"6938893903907228377647697925567626953125"

.Lcsbs$3f:
	.asciz	"34694469519536141888238489627838134765625"

.Lcsbs$40:
	.asciz	"173472347597680709441192448139190673828125"

.Lcsbs$41:
	.asciz	"867361737988403547205962240695953369140625"

	.lcomm	os.stdout,8,8
	.p2align	4, 0x0
".L__$ti-0":
	.zero	112

	.p2align	4, 0x0
".L__$ti-22":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	4683743612465315862
	.byte	1
	.byte	0
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-6":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	6
	.zero	48
	.zero	24
	.quad	9

	.p2align	4, 0x0
".L__$ti-35":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279395
	.quad	".L__$ti-36"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-36":
	.quad	112
	.quad	8
	.long	0
	.long	0
	.quad	3602879701896396836
	.quad	.Lcsbs$44
	.quad	9
	.quad	".L__$ti-37"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$0
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-37":
	.quad	112
	.quad	8
	.long	0
	.long	0
	.quad	1297036692682702885
	.quad	.L__$type_info_types_data
	.quad	.L__$type_info_names_data
	.quad	.L__$type_info_offsets_data
	.quad	.L__$type_info_usings_data
	.quad	.L__$type_info_tags_data
	.long	5
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-4":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	4683743612465315844
	.byte	1
	.byte	0
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-38":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	3891110078048108582
	.quad	.Lcsbs$4a
	.quad	15
	.quad	".L__$ti-39"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-39":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	1585267068834414631
	.quad	".L__$ti-40"
	.quad	".L__$ti-24"
	.quad	0
	.quad	1
	.zero	40
	.quad	23

	.p2align	4, 0x0
".L__$ti-40":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3746994889972252712
	.quad	.Lcsbs$4b
	.quad	14
	.quad	".L__$ti-41"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$2
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-41":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1441151880758558761
	.quad	".L__$ti-2"
	.quad	".L$enum_names-41"
	.quad	2
	.quad	".L$enum_values-119"
	.quad	2
	.zero	32
	.quad	21

	.p2align	4, 0x0
".L__$ti-2":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	72057594037927938
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-24":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	72057594037927960
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-8":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	8
	.zero	48
	.zero	24
	.quad	10

	.p2align	4, 0x0
".L__$ti-30":
	.quad	80
	.quad	8
	.long	0
	.long	0
	.quad	1369094286720630814
	.quad	.L__$type_info_types_data+40
	.quad	29
	.quad	72
	.quad	".L__$ti-31"
	.quad	0
	.byte	0
	.byte	0
	.byte	0
	.zero	5
	.zero	24
	.quad	20

	.p2align	4, 0x0
".L__$ti-31":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	72057594037927967
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-32":
	.quad	48
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396832
	.quad	.Lcsbs$4e
	.quad	15
	.quad	".L__$ti-33"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$3
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-33":
	.quad	48
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702881
	.quad	.L__$type_info_types_data+272
	.quad	.L__$type_info_names_data+80
	.quad	.L__$type_info_offsets_data+40
	.quad	.L__$type_info_usings_data+5
	.quad	.L__$type_info_tags_data+80
	.long	4
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	__$equal1
	.quad	19

	.p2align	4, 0x0
".L__$ti-34":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	432345564227567650
	.zero	1
	.zero	71
	.quad	7

	.p2align	4, 0x0
".L__$ti-1":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279361
	.quad	".L__$ti-2"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-42":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279402
	.quad	".L__$ti-43"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-43":
	.quad	40
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396843
	.quad	.Lcsbs$53
	.quad	20
	.quad	".L__$ti-44"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$4
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-44":
	.quad	40
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702892
	.quad	.L__$type_info_types_data+304
	.quad	.L__$type_info_names_data+144
	.quad	.L__$type_info_offsets_data+72
	.quad	.L__$type_info_usings_data+9
	.quad	.L__$type_info_tags_data+144
	.long	4
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	__$equal2
	.quad	19

	.p2align	4, 0x0
".L__$ti-45":
	.quad	2
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396845
	.quad	.Lcsbs$58
	.quad	17
	.quad	".L__$ti-46"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$5
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-46":
	.quad	2
	.quad	1
	.long	1
	.long	0
	.quad	1297036692682702894
	.quad	.L__$type_info_types_data+336
	.quad	.L__$type_info_names_data+208
	.quad	.L__$type_info_offsets_data+104
	.quad	.L__$type_info_usings_data+13
	.quad	.L__$type_info_tags_data+208
	.long	2
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-47":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	504403158265495599
	.zero	72
	.quad	8

	.p2align	4, 0x0
".L__$ti-15":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3746994889972252687
	.quad	.Lcsbs$5b
	.quad	19
	.quad	".L__$ti-16"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$6
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-16":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1441151880758558736
	.quad	".L__$ti-2"
	.quad	".L$enum_names-16"
	.quad	3
	.quad	".L$enum_values-16"
	.quad	3
	.zero	32
	.quad	21

	.p2align	4, 0x0
".L__$ti-48":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396848
	.quad	.Lcsbs$5f
	.quad	14
	.quad	".L__$ti-28"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$7
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-28":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	1297036692682702876
	.zero	72
	.quad	19

	.p2align	4, 0x0
".L__$ti-13":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396813
	.quad	.Lcsbs$60
	.quad	15
	.quad	".L__$ti-14"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$8
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-14":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1297036692682702862
	.quad	.L__$type_info_types_data+352
	.quad	.L__$type_info_names_data+240
	.quad	.L__$type_info_offsets_data+120
	.quad	.L__$type_info_usings_data+15
	.quad	.L__$type_info_tags_data+240
	.long	1
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-29":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396829
	.quad	.Lcsbs$61
	.quad	17
	.quad	".L__$ti-28"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$9
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-49":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396849
	.quad	.Lcsbs$62
	.quad	20
	.quad	".L__$ti-28"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$a
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-50":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396850
	.quad	.Lcsbs$63
	.quad	16
	.quad	".L__$ti-51"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$b
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-51":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1297036692682702899
	.quad	.L__$type_info_types_data+360
	.quad	.L__$type_info_names_data+256
	.quad	.L__$type_info_offsets_data+128
	.quad	.L__$type_info_usings_data+16
	.quad	.L__$type_info_tags_data+256
	.long	1
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-27":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396827
	.quad	.Lcsbs$65
	.quad	17
	.quad	".L__$ti-28"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$c
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-52":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396852
	.quad	.Lcsbs$66
	.quad	13
	.quad	".L__$ti-28"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$d
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-53":
	.quad	0
	.quad	1
	.long	1
	.long	0
	.quad	3602879701896396853
	.quad	.Lcsbs$67
	.quad	17
	.quad	".L__$ti-28"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$e
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-54":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396854
	.quad	.Lcsbs$68
	.quad	17
	.quad	".L__$ti-55"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$f
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-55":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702903
	.quad	.L__$type_info_types_data+368
	.quad	.L__$type_info_names_data+272
	.quad	.L__$type_info_offsets_data+136
	.quad	.L__$type_info_usings_data+17
	.quad	.L__$type_info_tags_data+272
	.long	1
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-56":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396856
	.quad	.Lcsbs$6a
	.quad	23
	.quad	".L__$ti-55"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$10
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-57":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396857
	.quad	.Lcsbs$6b
	.quad	19
	.quad	".L__$ti-58"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$11
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-58":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702906
	.quad	.L__$type_info_types_data+376
	.quad	.L__$type_info_names_data+288
	.quad	.L__$type_info_offsets_data+144
	.quad	.L__$type_info_usings_data+18
	.quad	.L__$type_info_tags_data+288
	.long	4
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-59":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3746994889972252731
	.quad	.Lcsbs$70
	.quad	18
	.quad	".L__$ti-60"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$12
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-60":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1441151880758558780
	.quad	".L__$ti-2"
	.quad	".L$enum_names-60"
	.quad	10
	.quad	".L$enum_values-60"
	.quad	10
	.zero	32
	.quad	21

	.p2align	4, 0x0
".L__$ti-61":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396861
	.quad	.Lcsbs$7b
	.quad	15
	.quad	".L__$ti-62"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$13
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-62":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702910
	.quad	.L__$type_info_types_data+408
	.quad	.L__$type_info_names_data+352
	.quad	.L__$type_info_offsets_data+176
	.quad	.L__$type_info_usings_data+22
	.quad	.L__$type_info_tags_data+352
	.long	3
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-63":
	.quad	56
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396863
	.quad	.Lcsbs$7e
	.quad	26
	.quad	".L__$ti-64"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$14
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-64":
	.quad	56
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702912
	.quad	.L__$type_info_types_data+432
	.quad	.L__$type_info_names_data+400
	.quad	.L__$type_info_offsets_data+200
	.quad	.L__$type_info_usings_data+25
	.quad	.L__$type_info_tags_data+400
	.long	7
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-65":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	6989586621679009857
	.quad	.Lcsbs$83
	.quad	20
	.quad	".L__$ti-23"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$15
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-23":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	4683743612465315863
	.byte	1
	.byte	0
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-66":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396866
	.quad	.Lcsbs$84
	.quad	23
	.quad	".L__$ti-67"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$16
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-67":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702915
	.quad	.L__$type_info_types_data+488
	.quad	.L__$type_info_names_data+512
	.quad	.L__$type_info_offsets_data+256
	.quad	.L__$type_info_usings_data+32
	.quad	.L__$type_info_tags_data+512
	.long	2
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-68":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396868
	.quad	.Lcsbs$85
	.quad	15
	.quad	".L__$ti-67"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$17
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-69":
	.quad	32
	.quad	8
	.long	0
	.long	0
	.quad	3602879701896396869
	.quad	.Lcsbs$86
	.quad	20
	.quad	".L__$ti-70"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$18
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-70":
	.quad	32
	.quad	8
	.long	0
	.long	0
	.quad	1297036692682702918
	.quad	.L__$type_info_types_data+504
	.quad	.L__$type_info_names_data+544
	.quad	.L__$type_info_offsets_data+272
	.quad	.L__$type_info_usings_data+34
	.quad	.L__$type_info_tags_data+544
	.long	2
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-71":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	1152921504606847047
	.quad	".L__$ti-35"
	.quad	8
	.zero	56
	.quad	17

	.p2align	4, 0x0
".L__$ti-72":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279432
	.quad	".L__$ti-35"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-73":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	1152921504606847049
	.quad	".L__$ti-34"
	.quad	16
	.zero	56
	.quad	17

	.p2align	4, 0x0
".L__$ti-74":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279434
	.quad	".L__$ti-34"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-75":
	.quad	72
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396875
	.quad	.Lcsbs$89
	.quad	16
	.quad	".L__$ti-76"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$19
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-76":
	.quad	72
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702924
	.quad	.L__$type_info_types_data+520
	.quad	.L__$type_info_names_data+576
	.quad	.L__$type_info_offsets_data+288
	.quad	.L__$type_info_usings_data+36
	.quad	.L__$type_info_tags_data+576
	.long	11
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-77":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	792633534417207373
	.quad	".L__$ti-35"
	.zero	64
	.quad	12

	.p2align	4, 0x0
".L__$ti-78":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	792633534417207374
	.quad	".L__$ti-34"
	.zero	64
	.quad	12

	.p2align	4, 0x0
".L__$ti-79":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	792633534417207375
	.quad	".L__$ti-80"
	.zero	64
	.quad	12

	.p2align	4, 0x0
".L__$ti-80":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	72057594037928016
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-81":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	792633534417207377
	.quad	".L__$ti-47"
	.zero	64
	.quad	12

	.p2align	4, 0x0
".L__$ti-82":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3891110078048108626
	.quad	.Lcsbs$93
	.quad	22
	.quad	".L__$ti-83"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1a
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-83":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1585267068834414675
	.quad	".L__$ti-84"
	.quad	".L__$ti-2"
	.quad	0
	.quad	3
	.zero	40
	.quad	23

	.p2align	4, 0x0
".L__$ti-84":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3746994889972252756
	.quad	.Lcsbs$94
	.quad	21
	.quad	".L__$ti-85"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1b
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-85":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1441151880758558805
	.quad	".L__$ti-2"
	.quad	".L$enum_names-85"
	.quad	4
	.quad	".L$enum_values-87"
	.quad	4
	.zero	32
	.quad	21

	.p2align	4, 0x0
".L__$ti-86":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	3746994889972252758
	.quad	.Lcsbs$98
	.quad	25
	.quad	".L__$ti-87"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1c
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-87":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1441151880758558807
	.quad	".L__$ti-2"
	.quad	".L$enum_names-87"
	.quad	4
	.quad	".L$enum_values-87"
	.quad	4
	.zero	32
	.quad	21

	.p2align	4, 0x0
".L__$ti-88":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	3170534137668829272
	.quad	.Lcsbs$9c
	.quad	10
	.quad	".L__$ti-89"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1d
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-89":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	864691128455135321
	.quad	".L__$ti-90"
	.quad	".L__$ti-91"
	.byte	0
	.byte	2
	.zero	6
	.zero	48
	.quad	13

	.p2align	4, 0x0
".L__$ti-90":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	1224979098644775002
	.quad	.L__$type_info_types_data+608
	.quad	2
	.quad	.L__$type_info_names_data+752
	.quad	2
	.zero	40
	.quad	18

	.p2align	4, 0x0
".L__$ti-7":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279367
	.zero	8
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-91":
	.quad	1
	.quad	1
	.long	0
	.long	0
	.quad	1224979098644775003
	.quad	.L__$type_info_types_data+624
	.quad	1
	.quad	.L__$type_info_names_data+784
	.quad	1
	.zero	40
	.quad	18

	.p2align	4, 0x0
".L__$ti-92":
	.quad	48
	.quad	8
	.long	0
	.long	0
	.quad	3602879701896396892
	.quad	.Lcsbs$9e
	.quad	15
	.quad	".L__$ti-93"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1e
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-93":
	.quad	48
	.quad	8
	.long	0
	.long	0
	.quad	1297036692682702941
	.quad	.L__$type_info_types_data+632
	.quad	.L__$type_info_names_data+800
	.quad	.L__$type_info_offsets_data+376
	.quad	.L__$type_info_usings_data+47
	.quad	.L__$type_info_tags_data+752
	.long	7
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-94":
	.quad	40
	.quad	8
	.long	0
	.long	0
	.quad	3602879701896396894
	.quad	.Lcsbs$a5
	.quad	14
	.quad	".L__$ti-95"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$1f
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-95":
	.quad	40
	.quad	8
	.long	0
	.long	0
	.quad	1297036692682702943
	.quad	.L__$type_info_types_data+688
	.quad	.L__$type_info_names_data+912
	.quad	.L__$type_info_offsets_data+432
	.quad	.L__$type_info_usings_data+54
	.quad	.L__$type_info_tags_data+864
	.long	3
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-96":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	1152921504606847072
	.quad	".L__$ti-65"
	.quad	8
	.zero	56
	.quad	17

	.p2align	4, 0x0
".L__$ti-97":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279457
	.quad	".L__$ti-65"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-98":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396898
	.quad	.Lcsbs$a7
	.quad	13
	.quad	".L__$ti-99"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$20
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-99":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702947
	.quad	.L__$type_info_types_data+712
	.quad	.L__$type_info_names_data+960
	.quad	.L__$type_info_offsets_data+456
	.quad	.L__$type_info_usings_data+57
	.quad	.L__$type_info_tags_data+912
	.long	3
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-100":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279460
	.quad	".L__$ti-101"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-101":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396901
	.quad	.Lcsbs$ac
	.quad	8
	.quad	".L__$ti-102"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$21
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-102":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702950
	.quad	.L__$type_info_types_data+736
	.quad	.L__$type_info_names_data+1008
	.quad	.L__$type_info_offsets_data+480
	.quad	.L__$type_info_usings_data+60
	.quad	.L__$type_info_tags_data+960
	.long	4
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-103":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	720575940379279463
	.quad	".L__$ti-104"
	.zero	64
	.quad	11

	.p2align	4, 0x0
".L__$ti-104":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396904
	.quad	.Lcsbs$b1
	.quad	13
	.quad	".L__$ti-105"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$22
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-105":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702953
	.quad	.L__$type_info_types_data+768
	.quad	.L__$type_info_names_data+1072
	.quad	.L__$type_info_offsets_data+512
	.quad	.L__$type_info_usings_data+64
	.quad	.L__$type_info_tags_data+1024
	.long	4
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-106":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	864691128455135338
	.quad	".L__$ti-107"
	.quad	".L__$ti-108"
	.byte	0
	.byte	2
	.zero	6
	.zero	48
	.quad	13

	.p2align	4, 0x0
".L__$ti-107":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	1224979098644775019
	.quad	.L__$type_info_types_data+800
	.quad	2
	.quad	.L__$type_info_names_data+1136
	.quad	2
	.zero	40
	.quad	18

	.p2align	4, 0x0
".L__$ti-108":
	.quad	8
	.quad	8
	.long	0
	.long	0
	.quad	1224979098644775020
	.quad	.L__$type_info_types_data+816
	.quad	1
	.quad	.L__$type_info_names_data+1168
	.quad	1
	.zero	40
	.quad	18

	.p2align	4, 0x0
".L__$ti-109":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	864691128455135341
	.quad	".L__$ti-110"
	.quad	".L__$ti-91"
	.byte	0
	.byte	2
	.zero	6
	.zero	48
	.quad	13

	.p2align	4, 0x0
".L__$ti-110":
	.quad	16
	.quad	8
	.long	0
	.long	0
	.quad	1224979098644775022
	.quad	.L__$type_info_types_data+824
	.quad	2
	.quad	.L__$type_info_names_data+1184
	.quad	2
	.zero	40
	.quad	18

	.p2align	4, 0x0
".L__$ti-111":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396911
	.quad	.Lcsbs$b9
	.quad	17
	.quad	".L__$ti-112"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$23
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-112":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702960
	.quad	.L__$type_info_types_data+840
	.quad	.L__$type_info_names_data+1216
	.quad	.L__$type_info_offsets_data+544
	.quad	.L__$type_info_usings_data+68
	.quad	.L__$type_info_tags_data+1088
	.long	4
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-113":
	.quad	24
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396913
	.quad	.Lcsbs$bd
	.quad	21
	.quad	".L__$ti-62"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$24
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-114":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396914
	.quad	.Lcsbs$be
	.quad	26
	.quad	".L__$ti-115"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$25
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-115":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702963
	.quad	.L__$type_info_types_data+872
	.quad	.L__$type_info_names_data+1280
	.quad	.L__$type_info_offsets_data+576
	.quad	.L__$type_info_usings_data+72
	.quad	.L__$type_info_tags_data+1152
	.long	2
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-116":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396916
	.quad	.Lcsbs$c1
	.quad	32
	.quad	".L__$ti-115"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$26
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-117":
	.quad	48
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396917
	.quad	.Lcsbs$c2
	.quad	16
	.quad	".L__$ti-118"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$27
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-118":
	.quad	48
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702966
	.quad	.L__$type_info_types_data+888
	.quad	.L__$type_info_names_data+1312
	.quad	.L__$type_info_offsets_data+592
	.quad	.L__$type_info_usings_data+74
	.quad	.L__$type_info_tags_data+1184
	.long	6
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-3":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	5044031582654955523
	.byte	1
	.zero	71
	.quad	7

	.p2align	4, 0x0
".L__$ti-144":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	72057594037928080
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-120":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396920
	.quad	.Lcsbs$c7
	.quad	21
	.quad	".L__$ti-55"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$28
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-119":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	1441151880758558839
	.quad	".L__$ti-2"
	.quad	".L$enum_names-119"
	.quad	2
	.quad	".L$enum_values-119"
	.quad	2
	.zero	32
	.quad	21

	.p2align	4, 0x0
".L__$ti-121":
	.quad	56
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396921
	.quad	.Lcsbs$ca
	.quad	19
	.quad	".L__$ti-122"
	.quad	.Lcsbs$42
	.quad	7
	.quad	.Lggv$29
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-122":
	.quad	56
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682702970
	.quad	.L__$type_info_types_data+936
	.quad	.L__$type_info_names_data+1408
	.quad	.L__$type_info_offsets_data+640
	.quad	.L__$type_info_usings_data+80
	.quad	.L__$type_info_tags_data+1280
	.long	7
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

	.p2align	4, 0x0
".L__$ti-18":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	4755801206503243794
	.zero	72
	.quad	3

	.p2align	4, 0x0
".L__$ti-11":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	72057594037927947
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-126":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	72057594037928062
	.byte	0
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-123":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	72057594037928059
	.byte	0
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-136":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	72057594037928072
	.byte	0
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-139":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	72057594037928075
	.byte	0
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-127":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	72057594037928063
	.byte	0
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-135":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	72057594037928071
	.byte	0
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-141":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	4683743612465315981
	.byte	1
	.byte	0
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-9":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	4683743612465315849
	.byte	1
	.byte	0
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-147":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	4683743612465315987
	.byte	1
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-148":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	4683743612465315988
	.byte	1
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-26":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	4683743612465315866
	.byte	1
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-145":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	4683743612465315985
	.byte	1
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-146":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	4683743612465315986
	.byte	1
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-138":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	4683743612465315978
	.byte	1
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-10":
	.quad	1
	.quad	1
	.long	1
	.long	0
	.quad	504403158265495562
	.zero	72
	.quad	8

	.p2align	4, 0x0
".L__$ti-142":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	504403158265495694
	.zero	72
	.quad	8

	.p2align	4, 0x0
".L__$ti-131":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	504403158265495683
	.zero	72
	.quad	8

	.p2align	4, 0x0
".L__$ti-125":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	504403158265495677
	.zero	72
	.quad	8

	.p2align	4, 0x0
".L__$ti-155":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	3674937295934324891
	.quad	.Lcsbs$d0
	.quad	9
	.quad	".L__$ti-156"
	.quad	.Lcsbs$ce
	.quad	3
	.quad	.Lggv$2a
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-156":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	1369094286720630940
	.quad	.L__$type_info_types_data+992
	.quad	1
	.quad	8
	.quad	".L__$ti-31"
	.quad	0
	.byte	0
	.byte	0
	.byte	0
	.zero	5
	.zero	24
	.quad	20

	.p2align	4, 0x0
".L__$ti-154":
	.quad	8
	.quad	8
	.long	0
	.long	0
	.quad	1224979098644775066
	.quad	.L__$type_info_types_data+1000
	.quad	1
	.quad	.L__$type_info_names_data+1520
	.quad	1
	.zero	40
	.quad	18

	.p2align	4, 0x0
".L__$ti-5":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	1585267068834414597
	.quad	".L__$ti-4"
	.quad	0
	.quad	0
	.quad	63
	.zero	40
	.quad	23

	.p2align	4, 0x0
".L__$ti-151":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	216172782113783959
	.zero	1
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-17":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	216172782113783825
	.zero	1
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-21":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	216172782113783829
	.zero	1
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-150":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	216172782113783958
	.byte	1
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-132":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	216172782113783940
	.byte	1
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-130":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	216172782113783938
	.byte	1
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-153":
	.quad	2
	.quad	2
	.long	1
	.long	0
	.quad	216172782113783961
	.byte	2
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-25":
	.quad	4
	.quad	4
	.long	1
	.long	0
	.quad	216172782113783833
	.byte	2
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-124":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	216172782113783932
	.byte	2
	.zero	71
	.quad	4

	.p2align	4, 0x0
".L__$ti-152":
	.quad	4
	.quad	2
	.long	1
	.long	0
	.quad	288230376151711896
	.zero	72
	.quad	5

	.p2align	4, 0x0
".L__$ti-143":
	.quad	8
	.quad	4
	.long	1
	.long	0
	.quad	288230376151711887
	.zero	72
	.quad	5

	.p2align	4, 0x0
".L__$ti-137":
	.quad	16
	.quad	8
	.long	1
	.long	0
	.quad	288230376151711881
	.zero	72
	.quad	5

	.p2align	4, 0x0
".L__$ti-149":
	.quad	8
	.quad	2
	.long	1
	.long	0
	.quad	149
	.zero	48
	.zero	24
	.quad	6

	.p2align	4, 0x0
".L__$ti-12":
	.quad	16
	.quad	4
	.long	1
	.long	0
	.quad	12
	.zero	48
	.zero	24
	.quad	6

	.p2align	4, 0x0
".L__$ti-20":
	.quad	32
	.quad	8
	.long	1
	.long	0
	.quad	20
	.zero	48
	.zero	24
	.quad	6

	.p2align	4, 0x0
".L__$ti-129":
	.quad	16
	.quad	16
	.long	1
	.long	0
	.quad	4683743612465315969
	.byte	1
	.byte	0
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-128":
	.quad	16
	.quad	16
	.long	1
	.long	0
	.quad	72057594037928064
	.zero	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-134":
	.quad	16
	.quad	16
	.long	1
	.long	0
	.quad	72057594037928070
	.byte	0
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-19":
	.quad	16
	.quad	16
	.long	1
	.long	0
	.quad	4683743612465315859
	.byte	1
	.byte	1
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-140":
	.quad	16
	.quad	16
	.long	1
	.long	0
	.quad	72057594037928076
	.byte	0
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-133":
	.quad	16
	.quad	16
	.long	1
	.long	0
	.quad	4683743612465315973
	.byte	1
	.byte	2
	.zero	70
	.quad	2

	.p2align	4, 0x0
".L__$ti-159":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	6989586621679009951
	.quad	.Lcsbs$d4
	.quad	8
	.quad	".L__$ti-23"
	.quad	.Lcsbs$d2
	.quad	4
	.quad	.Lggv$2b
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-157":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	3602879701896396957
	.quad	.Lcsbs$d5
	.quad	4
	.quad	".L__$ti-158"
	.quad	.Lcsbs$d2
	.quad	4
	.quad	.Lggv$2c
	.zero	24
	.quad	1

	.p2align	4, 0x0
".L__$ti-158":
	.quad	8
	.quad	8
	.long	1
	.long	0
	.quad	1297036692682703006
	.quad	.L__$type_info_types_data+1008
	.quad	.L__$type_info_names_data+1536
	.quad	.L__$type_info_offsets_data+696
	.quad	.L__$type_info_usings_data+87
	.quad	.L__$type_info_tags_data+1392
	.long	1
	.byte	0
	.byte	0
	.zero	2
	.long	0
	.zero	4
	.quad	0
	.quad	0
	.quad	19

.Lcsbs$42:
	.asciz	"runtime"

.Lcsbs$43:
	.asciz	"C:/Home/share/odin/base/runtime/core.odin"

	.p2align	4, 0x0
.Lggv$0:
	.quad	.Lcsbs$43
	.quad	41
	.long	213
	.long	1
	.zero	16

.Lcsbs$44:
	.asciz	"Type_Info"

.Lcsbs$45:
	.asciz	"size"

.Lcsbs$46:
	.asciz	"align"

.Lcsbs$47:
	.asciz	"flags"

.Lcsbs$48:
	.asciz	"id"

.Lcsbs$49:
	.asciz	"variant"

	.p2align	4, 0x0
.Lggv$1:
	.quad	.Lcsbs$43
	.quad	41
	.long	211
	.long	1
	.zero	16

.Lcsbs$4a:
	.asciz	"Type_Info_Flags"

	.p2align	4, 0x0
.Lggv$2:
	.quad	.Lcsbs$43
	.quad	41
	.long	207
	.long	1
	.zero	16

.Lcsbs$4b:
	.asciz	"Type_Info_Flag"

	.p2align	4, 0x0
".L$enum_names-41":
	.quad	.Lcsbs$4c
	.quad	10
	.quad	.Lcsbs$4d
	.quad	14

.Lcsbs$4c:
	.asciz	"Comparable"

.Lcsbs$4d:
	.asciz	"Simple_Compare"

	.p2align	4, 0x0
.Lggv$3:
	.quad	.Lcsbs$43
	.quad	41
	.long	65
	.long	1
	.zero	16

.Lcsbs$4e:
	.asciz	"Type_Info_Named"

.Lcsbs$4f:
	.asciz	"name"

.Lcsbs$50:
	.asciz	"base"

.Lcsbs$51:
	.asciz	"pkg"

.Lcsbs$52:
	.asciz	"loc"

	.p2align	4, 0x0
.Lggv$4:
	.quad	.Lcsbs$43
	.quad	41
	.long	319
	.long	1
	.zero	16

.Lcsbs$53:
	.asciz	"Source_Code_Location"

.Lcsbs$54:
	.asciz	"file_path"

.Lcsbs$55:
	.asciz	"line"

.Lcsbs$56:
	.asciz	"column"

.Lcsbs$57:
	.asciz	"procedure"

	.p2align	4, 0x0
.Lggv$5:
	.quad	.Lcsbs$43
	.quad	41
	.long	71
	.long	1
	.zero	16

.Lcsbs$58:
	.asciz	"Type_Info_Integer"

.Lcsbs$59:
	.asciz	"signed"

.Lcsbs$5a:
	.asciz	"endianness"

	.p2align	4, 0x0
.Lggv$6:
	.quad	.Lcsbs$43
	.quad	41
	.long	46
	.long	1
	.zero	16

.Lcsbs$5b:
	.asciz	"Platform_Endianness"

	.p2align	4, 0x0
".L$enum_names-16":
	.quad	.Lcsbs$5c
	.quad	8
	.quad	.Lcsbs$5d
	.quad	6
	.quad	.Lcsbs$5e
	.quad	3

	.p2align	4, 0x0
".L$enum_values-16":
	.quad	0
	.quad	1
	.quad	2

.Lcsbs$5c:
	.asciz	"Platform"

.Lcsbs$5d:
	.asciz	"Little"

.Lcsbs$5e:
	.asciz	"Big"

	.p2align	4, 0x0
.Lggv$7:
	.quad	.Lcsbs$43
	.quad	41
	.long	72
	.long	1
	.zero	16

.Lcsbs$5f:
	.asciz	"Type_Info_Rune"

	.p2align	4, 0x0
.Lggv$8:
	.quad	.Lcsbs$43
	.quad	41
	.long	73
	.long	1
	.zero	16

.Lcsbs$60:
	.asciz	"Type_Info_Float"

	.p2align	4, 0x0
.Lggv$9:
	.quad	.Lcsbs$43
	.quad	41
	.long	74
	.long	1
	.zero	16

.Lcsbs$61:
	.asciz	"Type_Info_Complex"

	.p2align	4, 0x0
.Lggv$a:
	.quad	.Lcsbs$43
	.quad	41
	.long	75
	.long	1
	.zero	16

.Lcsbs$62:
	.asciz	"Type_Info_Quaternion"

	.p2align	4, 0x0
.Lggv$b:
	.quad	.Lcsbs$43
	.quad	41
	.long	76
	.long	1
	.zero	16

.Lcsbs$63:
	.asciz	"Type_Info_String"

.Lcsbs$64:
	.asciz	"is_cstring"

	.p2align	4, 0x0
.Lggv$c:
	.quad	.Lcsbs$43
	.quad	41
	.long	77
	.long	1
	.zero	16

.Lcsbs$65:
	.asciz	"Type_Info_Boolean"

	.p2align	4, 0x0
.Lggv$d:
	.quad	.Lcsbs$43
	.quad	41
	.long	78
	.long	1
	.zero	16

.Lcsbs$66:
	.asciz	"Type_Info_Any"

	.p2align	4, 0x0
.Lggv$e:
	.quad	.Lcsbs$43
	.quad	41
	.long	79
	.long	1
	.zero	16

.Lcsbs$67:
	.asciz	"Type_Info_Type_Id"

	.p2align	4, 0x0
.Lggv$f:
	.quad	.Lcsbs$43
	.quad	41
	.long	80
	.long	1
	.zero	16

.Lcsbs$68:
	.asciz	"Type_Info_Pointer"

.Lcsbs$69:
	.asciz	"elem"

	.p2align	4, 0x0
.Lggv$10:
	.quad	.Lcsbs$43
	.quad	41
	.long	83
	.long	1
	.zero	16

.Lcsbs$6a:
	.asciz	"Type_Info_Multi_Pointer"

	.p2align	4, 0x0
.Lggv$11:
	.quad	.Lcsbs$43
	.quad	41
	.long	86
	.long	1
	.zero	16

.Lcsbs$6b:
	.asciz	"Type_Info_Procedure"

.Lcsbs$6c:
	.asciz	"params"

.Lcsbs$6d:
	.asciz	"results"

.Lcsbs$6e:
	.asciz	"variadic"

.Lcsbs$6f:
	.asciz	"convention"

	.p2align	4, 0x0
.Lggv$12:
	.quad	.Lcsbs$43
	.quad	41
	.long	27
	.long	1
	.zero	16

.Lcsbs$70:
	.asciz	"Calling_Convention"

	.p2align	4, 0x0
".L$enum_names-60":
	.quad	.Lcsbs$71
	.quad	7
	.quad	.Lcsbs$72
	.quad	4
	.quad	.Lcsbs$73
	.quad	11
	.quad	.Lcsbs$74
	.quad	5
	.quad	.Lcsbs$75
	.quad	8
	.quad	.Lcsbs$76
	.quad	9
	.quad	.Lcsbs$77
	.quad	4
	.quad	.Lcsbs$78
	.quad	5
	.quad	.Lcsbs$79
	.quad	5
	.quad	.Lcsbs$7a
	.quad	4

	.p2align	4, 0x0
".L$enum_values-60":
	.quad	0
	.quad	1
	.quad	2
	.quad	3
	.quad	4
	.quad	5
	.quad	6
	.quad	7
	.quad	9
	.quad	10

.Lcsbs$71:
	.asciz	"Invalid"

.Lcsbs$72:
	.asciz	"Odin"

.Lcsbs$73:
	.asciz	"Contextless"

.Lcsbs$74:
	.asciz	"CDecl"

.Lcsbs$75:
	.asciz	"Std_Call"

.Lcsbs$76:
	.asciz	"Fast_Call"

.Lcsbs$77:
	.asciz	"None"

.Lcsbs$78:
	.asciz	"Naked"

.Lcsbs$79:
	.asciz	"Win64"

.Lcsbs$7a:
	.asciz	"SysV"

	.p2align	4, 0x0
.Lggv$13:
	.quad	.Lcsbs$43
	.quad	41
	.long	92
	.long	1
	.zero	16

.Lcsbs$7b:
	.asciz	"Type_Info_Array"

.Lcsbs$7c:
	.asciz	"elem_size"

.Lcsbs$7d:
	.asciz	"count"

	.p2align	4, 0x0
.Lggv$14:
	.quad	.Lcsbs$43
	.quad	41
	.long	97
	.long	1
	.zero	16

.Lcsbs$7e:
	.asciz	"Type_Info_Enumerated_Array"

.Lcsbs$7f:
	.asciz	"index"

.Lcsbs$80:
	.asciz	"min_value"

.Lcsbs$81:
	.asciz	"max_value"

.Lcsbs$82:
	.asciz	"is_sparse"

	.p2align	4, 0x0
.Lggv$15:
	.quad	.Lcsbs$43
	.quad	41
	.long	44
	.long	1
	.zero	16

.Lcsbs$83:
	.asciz	"Type_Info_Enum_Value"

	.p2align	4, 0x0
.Lggv$16:
	.quad	.Lcsbs$43
	.quad	41
	.long	106
	.long	1
	.zero	16

.Lcsbs$84:
	.asciz	"Type_Info_Dynamic_Array"

	.p2align	4, 0x0
.Lggv$17:
	.quad	.Lcsbs$43
	.quad	41
	.long	107
	.long	1
	.zero	16

.Lcsbs$85:
	.asciz	"Type_Info_Slice"

	.p2align	4, 0x0
.Lggv$18:
	.quad	.Lcsbs$43
	.quad	41
	.long	109
	.long	1
	.zero	16

.Lcsbs$86:
	.asciz	"Type_Info_Parameters"

.Lcsbs$87:
	.asciz	"types"

.Lcsbs$88:
	.asciz	"names"

	.p2align	4, 0x0
.Lggv$19:
	.quad	.Lcsbs$43
	.quad	41
	.long	123
	.long	1
	.zero	16

.Lcsbs$89:
	.asciz	"Type_Info_Struct"

.Lcsbs$8a:
	.asciz	"fmt:\"v,field_count\""

.Lcsbs$8b:
	.asciz	"offsets"

.Lcsbs$8c:
	.asciz	"usings"

.Lcsbs$8d:
	.asciz	"tags"

.Lcsbs$8e:
	.asciz	"field_count"

.Lcsbs$8f:
	.asciz	"soa_kind"

.Lcsbs$90:
	.asciz	"soa_len"

.Lcsbs$91:
	.asciz	"soa_base_type"

.Lcsbs$92:
	.asciz	"equal"

	.p2align	4, 0x0
.Lggv$1a:
	.quad	.Lcsbs$43
	.quad	41
	.long	115
	.long	1
	.zero	16

.Lcsbs$93:
	.asciz	"Type_Info_Struct_Flags"

	.p2align	4, 0x0
.Lggv$1b:
	.quad	.Lcsbs$43
	.quad	41
	.long	116
	.long	1
	.zero	16

.Lcsbs$94:
	.asciz	"Type_Info_Struct_Flag"

	.p2align	4, 0x0
".L$enum_names-85":
	.quad	.Lcsbs$95
	.quad	6
	.quad	.Lcsbs$96
	.quad	9
	.quad	.Lcsbs$97
	.quad	7
	.quad	.Lcsbs$46
	.quad	5

.Lcsbs$95:
	.asciz	"packed"

.Lcsbs$96:
	.asciz	"raw_union"

.Lcsbs$97:
	.asciz	"no_copy"

	.p2align	4, 0x0
.Lggv$1c:
	.quad	.Lcsbs$43
	.quad	41
	.long	57
	.long	1
	.zero	16

.Lcsbs$98:
	.asciz	"Type_Info_Struct_Soa_Kind"

	.p2align	4, 0x0
".L$enum_names-87":
	.quad	.Lcsbs$77
	.quad	4
	.quad	.Lcsbs$99
	.quad	5
	.quad	.Lcsbs$9a
	.quad	5
	.quad	.Lcsbs$9b
	.quad	7

	.p2align	4, 0x0
".L$enum_values-87":
	.quad	0
	.quad	1
	.quad	2
	.quad	3

.Lcsbs$99:
	.asciz	"Fixed"

.Lcsbs$9a:
	.asciz	"Slice"

.Lcsbs$9b:
	.asciz	"Dynamic"

	.p2align	4, 0x0
.Lggv$1d:
	.quad	.Lcsbs$43
	.quad	41
	.long	53
	.long	1
	.zero	16

.Lcsbs$9c:
	.asciz	"Equal_Proc"

.Lcsbs$9d:
	.asciz	"_"

	.p2align	4, 0x0
.Lggv$1e:
	.quad	.Lcsbs$43
	.quad	41
	.long	142
	.long	1
	.zero	16

.Lcsbs$9e:
	.asciz	"Type_Info_Union"

.Lcsbs$9f:
	.asciz	"variants"

.Lcsbs$a0:
	.asciz	"tag_offset"

.Lcsbs$a1:
	.asciz	"tag_type"

.Lcsbs$a2:
	.asciz	"custom_align"

.Lcsbs$a3:
	.asciz	"no_nil"

.Lcsbs$a4:
	.asciz	"shared_nil"

	.p2align	4, 0x0
.Lggv$1f:
	.quad	.Lcsbs$43
	.quad	41
	.long	153
	.long	1
	.zero	16

.Lcsbs$a5:
	.asciz	"Type_Info_Enum"

.Lcsbs$a6:
	.asciz	"values"

	.p2align	4, 0x0
.Lggv$20:
	.quad	.Lcsbs$43
	.quad	41
	.long	158
	.long	1
	.zero	16

.Lcsbs$a7:
	.asciz	"Type_Info_Map"

.Lcsbs$a8:
	.asciz	"key"

.Lcsbs$a9:
	.asciz	"value"

.Lcsbs$aa:
	.asciz	"map_info"

.Lcsbs$ab:
	.asciz	"C:/Home/share/odin/base/runtime/dynamic_map_internal.odin"

	.p2align	4, 0x0
.Lggv$21:
	.quad	.Lcsbs$ab
	.quad	57
	.long	300
	.long	1
	.zero	16

.Lcsbs$ac:
	.asciz	"Map_Info"

.Lcsbs$ad:
	.asciz	"ks"

.Lcsbs$ae:
	.asciz	"vs"

.Lcsbs$af:
	.asciz	"key_hasher"

.Lcsbs$b0:
	.asciz	"key_equal"

	.p2align	4, 0x0
.Lggv$22:
	.quad	.Lcsbs$ab
	.quad	57
	.long	99
	.long	1
	.zero	16

.Lcsbs$b1:
	.asciz	"Map_Cell_Info"

.Lcsbs$b2:
	.asciz	"size_of_type"

.Lcsbs$b3:
	.asciz	"align_of_type"

.Lcsbs$b4:
	.asciz	"size_of_cell"

.Lcsbs$b5:
	.asciz	"elements_per_cell"

.Lcsbs$b6:
	.asciz	"seed"

.Lcsbs$b7:
	.asciz	"lhs"

.Lcsbs$b8:
	.asciz	"rhs"

	.p2align	4, 0x0
.Lggv$23:
	.quad	.Lcsbs$43
	.quad	41
	.long	163
	.long	1
	.zero	16

.Lcsbs$b9:
	.asciz	"Type_Info_Bit_Set"

.Lcsbs$ba:
	.asciz	"underlying"

.Lcsbs$bb:
	.asciz	"lower"

.Lcsbs$bc:
	.asciz	"upper"

	.p2align	4, 0x0
.Lggv$24:
	.quad	.Lcsbs$43
	.quad	41
	.long	169
	.long	1
	.zero	16

.Lcsbs$bd:
	.asciz	"Type_Info_Simd_Vector"

	.p2align	4, 0x0
.Lggv$25:
	.quad	.Lcsbs$43
	.quad	41
	.long	174
	.long	1
	.zero	16

.Lcsbs$be:
	.asciz	"Type_Info_Relative_Pointer"

.Lcsbs$bf:
	.asciz	"pointer"

.Lcsbs$c0:
	.asciz	"base_integer"

	.p2align	4, 0x0
.Lggv$26:
	.quad	.Lcsbs$43
	.quad	41
	.long	178
	.long	1
	.zero	16

.Lcsbs$c1:
	.asciz	"Type_Info_Relative_Multi_Pointer"

	.p2align	4, 0x0
.Lggv$27:
	.quad	.Lcsbs$43
	.quad	41
	.long	182
	.long	1
	.zero	16

.Lcsbs$c2:
	.asciz	"Type_Info_Matrix"

.Lcsbs$c3:
	.asciz	"elem_stride"

.Lcsbs$c4:
	.asciz	"row_count"

.Lcsbs$c5:
	.asciz	"column_count"

.Lcsbs$c6:
	.asciz	"layout"

	.p2align	4, 0x0
.Lggv$28:
	.quad	.Lcsbs$43
	.quad	41
	.long	194
	.long	1
	.zero	16

.Lcsbs$c7:
	.asciz	"Type_Info_Soa_Pointer"

	.p2align	4, 0x0
".L$enum_names-119":
	.quad	.Lcsbs$c8
	.quad	12
	.quad	.Lcsbs$c9
	.quad	9

	.p2align	3, 0x0
".L$enum_values-119":
	.quad	0
	.quad	1

.Lcsbs$c8:
	.asciz	"Column_Major"

.Lcsbs$c9:
	.asciz	"Row_Major"

	.p2align	4, 0x0
.Lggv$29:
	.quad	.Lcsbs$43
	.quad	41
	.long	197
	.long	1
	.zero	16

.Lcsbs$ca:
	.asciz	"Type_Info_Bit_Field"

.Lcsbs$cb:
	.asciz	"backing_type"

.Lcsbs$cc:
	.asciz	"bit_sizes"

.Lcsbs$cd:
	.asciz	"bit_offsets"

.Lcsbs$ce:
	.asciz	"fmt"

.Lcsbs$cf:
	.asciz	"C:/Home/share/odin/base/runtime/core_builtin.odin"

	.p2align	4, 0x0
.Lggv$2a:
	.quad	.Lcsbs$cf
	.quad	49
	.long	6
	.long	10
	.zero	16

.Lcsbs$d0:
	.asciz	"Maybe($T)"

.Lcsbs$d1:
	.asciz	"T"

.Lcsbs$d2:
	.asciz	"time"

.Lcsbs$d3:
	.asciz	"C:/Home/share/odin/core/time/time.odin"

	.p2align	4, 0x0
.Lggv$2b:
	.quad	.Lcsbs$d3
	.quad	38
	.long	10
	.long	1
	.zero	16

.Lcsbs$d4:
	.asciz	"Duration"

	.p2align	4, 0x0
.Lggv$2c:
	.quad	.Lcsbs$d3
	.quad	38
	.long	66
	.long	1
	.zero	16

.Lcsbs$d5:
	.asciz	"Time"

.Lcsbs$d6:
	.asciz	"_nsec"

.Lcsbs$d8:
	.asciz	"Hello world %s!\n"

.Lcsbs$d9:
	.asciz	"is_integer_negative: Unknown integer size"

.Lcsbs$da:
	.asciz	"C:/Home/share/odin/core/strconv/integers.odin"

.Lcsbs$db:
	.asciz	"is_integer_negative"

	.p2align	4, 0x0
.Lggv$2f:
	.quad	.Lcsbs$da
	.quad	45
	.long	45
	.long	4
	.quad	.Lcsbs$db
	.quad	19

	.p2align	3, 0x0
.Lggv$30:
	.quad	.Lcsbs$d9
	.quad	41

.Lcsbs$dc:
	.asciz	"C:/Home/share/odin/core/unicode/utf16/utf16.odin"

.Lcsbs$dd:
	.asciz	"C:/Home/share/odin/core/bufio/writer.odin"

.Lcsbs$de:
	.asciz	"writer_destroy"

	.p2align	4, 0x0
.Lggv$35:
	.quad	.Lcsbs$dd
	.quad	41
	.long	38
	.long	2
	.quad	.Lcsbs$de
	.quad	14

.Lcsbs$df:
	.asciz	"C:/Home/share/odin/base/runtime/default_temp_allocator_arena.odin"

.Lcsbs$e0:
	.asciz	"memory_block_alloc"

	.p2align	4, 0x0
.Lggv$36:
	.quad	.Lcsbs$df
	.quad	65
	.long	47
	.long	2
	.quad	.Lcsbs$e0
	.quad	18

	.p2align	4, 0x0
.Lggv$38:
	.quad	.Lcsbs$df
	.quad	65
	.long	48
	.long	2
	.quad	.Lcsbs$e0
	.quad	18

.Lcsbs$e1:
	.asciz	"C:/Home/share/odin/base/runtime/default_temporary_allocator.odin"

.Lcsbs$e2:
	.asciz	"default_temp_allocator_destroy"

	.p2align	4, 0x0
.Lggv$3a:
	.quad	.Lcsbs$e1
	.quad	64
	.long	33
	.long	4
	.quad	.Lcsbs$e2
	.quad	30

.Lcsbs$e3:
	.asciz	"strconv: invalid bit_size"

.Lcsbs$e4:
	.asciz	"C:/Home/share/odin/core/strconv/generic_float.odin"

.Lcsbs$e5:
	.asciz	"generic_ftoa"

	.p2align	4, 0x0
.Lggv$3b:
	.quad	.Lcsbs$e4
	.quad	50
	.long	60
	.long	3
	.quad	.Lcsbs$e5
	.quad	12

	.p2align	3, 0x0
.Lggv$3c:
	.quad	.Lcsbs$e3
	.quad	25

.Lcsbs$e6:
	.asciz	"NaN"

.Lcsbs$e7:
	.asciz	"-Inf"

.Lcsbs$e8:
	.asciz	"+Inf"

	.section	.tls$,"dw"
	.globl	"runtime.default_random_generator_proc-.global_rand_seed-29264"
	.p2align	3, 0x0
"runtime.default_random_generator_proc-.global_rand_seed-29264":
	.zero	16

	.section	.rdata,"dr"
.Lcsbs$e9:
	.asciz	" Invalid slice indices "

.Lcsbs$ea:
	.asciz	":"

.Lcsbs$eb:
	.asciz	" is out of range 0..<"

.Lcsbs$ec:
	.asciz	"C:/Home/share/odin/base/runtime/entry_windows.odin"

	.p2align	3, 0x0
.Lggv$41:
	.quad	.Lcsbs$ec
	.quad	50

	.p2align	3, 0x0
.Lggv$45:
	.quad	.Lcsbs$e9
	.quad	23

	.p2align	3, 0x0
.Lggv$46:
	.quad	.Lcsbs$ea
	.quad	1

	.p2align	3, 0x0
.Lggv$59:
	.quad	.Lcsbs$dd
	.quad	41

.Lcsbs$ef:
	.asciz	"C:/Home/share/odin/core/os/file_windows.odin"

	.p2align	3, 0x0
.Lggv$5f:
	.quad	.Lcsbs$dc
	.quad	48

.Lcsbs$f0:
	.asciz	"C:/Home/share/odin/core/unicode/utf8/utf8.odin"

.Lcsbs$f1:
	.asciz	"\r\n"

.Lcsbs$f2:
	.asciz	"non-power of two alignment"

	.p2align	3, 0x0
.Lggv$6e:
	.quad	.Lcsbs$f2
	.quad	26

.Lcsbs$f4:
	.asciz	"\\a"

.Lcsbs$f5:
	.asciz	"\\b"

.Lcsbs$f6:
	.asciz	"\\e"

.Lcsbs$f7:
	.asciz	"\\f"

.Lcsbs$f8:
	.asciz	"\\n"

.Lcsbs$f9:
	.asciz	"\\r"

.Lcsbs$fa:
	.asciz	"\\t"

.Lcsbs$fb:
	.asciz	"\\v"

.Lcsbs$fc:
	.asciz	"\\x00"

	.p2align	3, 0x0
.Lggv$7d:
	.quad	.Lcsbs$fc
	.quad	4

.Lcsbs$fd:
	.asciz	"\\x"

.Lcsbs$fe:
	.asciz	"C:/Home/share/odin/base/runtime/print.odin"

	.p2align	3, 0x0
.Lggv$89:
	.quad	.Lcsbs$fd
	.quad	2

.Lcsbs$ff:
	.asciz	"00"

	.p2align	3, 0x0
.Lggv$8a:
	.quad	.Lcsbs$ff
	.quad	2

.Lcsbs$100:
	.asciz	"C:/Home/share/odin/core/strconv/decimal/decimal.odin"

	.p2align	3, 0x0
.Lggv$a8:
	.quad	.Lcsbs$da
	.quad	45

.Lcsbs$102:
	.asciz	"C:/Home/share/odin/core/io/util.odin"

	.p2align	3, 0x0
.Lggv$aa:
	.quad	.Lcsbs$f4
	.quad	2

	.p2align	3, 0x0
.Lggv$ab:
	.quad	.Lcsbs$f5
	.quad	2

	.p2align	3, 0x0
.Lggv$ac:
	.quad	.Lcsbs$f6
	.quad	2

	.p2align	3, 0x0
.Lggv$ad:
	.quad	.Lcsbs$f7
	.quad	2

	.p2align	3, 0x0
.Lggv$ae:
	.quad	.Lcsbs$f8
	.quad	2

	.p2align	3, 0x0
.Lggv$af:
	.quad	.Lcsbs$f9
	.quad	2

	.p2align	3, 0x0
.Lggv$b0:
	.quad	.Lcsbs$fa
	.quad	2

	.p2align	3, 0x0
.Lggv$b1:
	.quad	.Lcsbs$fb
	.quad	2

.Lcsbs$105:
	.asciz	"nil"

	.p2align	3, 0x0
.Lggv$bd:
	.quad	.Lcsbs$df
	.quad	65

.Lcsbs$106:
	.asciz	"int"

.Lcsbs$107:
	.asciz	"uint"

.Lcsbs$108:
	.asciz	"uintptr"

.Lcsbs$109:
	.asciz	"rune"

.Lcsbs$10a:
	.asciz	"complex"

.Lcsbs$10b:
	.asciz	"quaternion"

.Lcsbs$10c:
	.asciz	"string"

.Lcsbs$10d:
	.asciz	"bool"

.Lcsbs$10e:
	.asciz	"any"

.Lcsbs$10f:
	.asciz	"typeid"

.Lcsbs$110:
	.asciz	"rawptr"

.Lcsbs$111:
	.asciz	"^"

.Lcsbs$112:
	.asciz	"[^]"

.Lcsbs$113:
	.asciz	"#soa ^"

.Lcsbs$114:
	.asciz	"proc"

.Lcsbs$115:
	.asciz	"()"

.Lcsbs$116:
	.asciz	", "

.Lcsbs$117:
	.asciz	")"

.Lcsbs$118:
	.asciz	" -> "

.Lcsbs$119:
	.asciz	": "

.Lcsbs$11a:
	.asciz	"#sparse"

.Lcsbs$11b:
	.asciz	"[dynamic]"

.Lcsbs$11c:
	.asciz	"[]"

.Lcsbs$11d:
	.asciz	"map["

.Lcsbs$11e:
	.asciz	"#soa["

.Lcsbs$11f:
	.asciz	"#soa[]"

.Lcsbs$120:
	.asciz	"#soa[dynamic]"

.Lcsbs$121:
	.asciz	"struct "

.Lcsbs$122:
	.asciz	"#packed "

.Lcsbs$123:
	.asciz	"#raw_union "

.Lcsbs$124:
	.asciz	"#no_copy "

.Lcsbs$125:
	.asciz	"#align("

.Lcsbs$126:
	.asciz	") "

.Lcsbs$127:
	.asciz	"union "

.Lcsbs$128:
	.asciz	"#no_nil "

.Lcsbs$129:
	.asciz	"}"

.Lcsbs$12a:
	.asciz	"enum "

.Lcsbs$12b:
	.asciz	" {"

.Lcsbs$12c:
	.asciz	"bit_set["

.Lcsbs$12d:
	.asciz	".."

	.p2align	3, 0x0
.Lggv$f4:
	.quad	.Lcsbs$12d
	.quad	2

.Lcsbs$12e:
	.asciz	"; "

.Lcsbs$12f:
	.asciz	"bit_field "

	.p2align	3, 0x0
.Lggv$f8:
	.quad	.Lcsbs$fe
	.quad	42

.Lcsbs$130:
	.asciz	" | "

.Lcsbs$131:
	.asciz	"#simd["

.Lcsbs$132:
	.asciz	"#relative("

.Lcsbs$133:
	.asciz	"matrix["

.Lcsbs$134:
	.asciz	"]"

	.p2align	3, 0x0
.Lggv$10d:
	.quad	.Lcsbs$f0
	.quad	46

	.p2align	3, 0x0
.Lggv$113:
	.quad	.Lcsbs$102
	.quad	36

	.p2align	3, 0x0
.Lggv$115:
	.quad	.Lcsbs$ef
	.quad	44

	.p2align	3, 0x0
.Lggv$11b:
	.quad	.Lcsbs$100
	.quad	52

	.p2align	3, 0x0
.Lggv$122:
	.quad	.Lcsbs$106
	.quad	3

	.p2align	3, 0x0
.Lggv$123:
	.quad	.Lcsbs$107
	.quad	4

	.p2align	3, 0x0
.Lggv$124:
	.quad	.Lcsbs$108
	.quad	7

.Lcsbs$137:
	.asciz	"le"

.Lcsbs$138:
	.asciz	"be"

	.p2align	3, 0x0
.Lggv$127:
	.quad	.Lcsbs$109
	.quad	4

	.p2align	3, 0x0
.Lggv$128:
	.quad	.Lcsbs$137
	.quad	2

	.p2align	3, 0x0
.Lggv$129:
	.quad	.Lcsbs$138
	.quad	2

	.p2align	3, 0x0
.Lggv$12a:
	.quad	.Lcsbs$10a
	.quad	7

	.p2align	3, 0x0
.Lggv$12b:
	.quad	.Lcsbs$10b
	.quad	10

.Lcsbs$139:
	.asciz	"cstring"

	.p2align	3, 0x0
.Lggv$12c:
	.quad	.Lcsbs$139
	.quad	7

	.p2align	3, 0x0
.Lggv$12d:
	.quad	.Lcsbs$10c
	.quad	6

	.p2align	3, 0x0
.Lggv$12e:
	.quad	.Lcsbs$10d
	.quad	4

	.p2align	3, 0x0
.Lggv$12f:
	.quad	.Lcsbs$10e
	.quad	3

	.p2align	3, 0x0
.Lggv$130:
	.quad	.Lcsbs$10f
	.quad	6

	.p2align	3, 0x0
.Lggv$131:
	.quad	.Lcsbs$110
	.quad	6

	.p2align	3, 0x0
.Lggv$132:
	.quad	.Lcsbs$111
	.quad	1

	.p2align	3, 0x0
.Lggv$133:
	.quad	.Lcsbs$112
	.quad	3

	.p2align	3, 0x0
.Lggv$134:
	.quad	.Lcsbs$113
	.quad	6

	.p2align	3, 0x0
.Lggv$135:
	.quad	.Lcsbs$114
	.quad	4

	.p2align	3, 0x0
.Lggv$136:
	.quad	.Lcsbs$115
	.quad	2

.Lcsbs$13a:
	.asciz	"C:/Home/share/odin/core/reflect/types.odin"

.Lcsbs$13b:
	.asciz	"("

	.p2align	3, 0x0
.Lggv$13b:
	.quad	.Lcsbs$118
	.quad	4

	.p2align	3, 0x0
.Lggv$13c:
	.quad	.Lcsbs$13b
	.quad	1

.Lcsbs$13c:
	.asciz	"["

	.p2align	3, 0x0
.Lggv$143:
	.quad	.Lcsbs$11a
	.quad	7

	.p2align	3, 0x0
.Lggv$144:
	.quad	.Lcsbs$13c
	.quad	1

	.p2align	3, 0x0
.Lggv$146:
	.quad	.Lcsbs$11b
	.quad	9

	.p2align	3, 0x0
.Lggv$147:
	.quad	.Lcsbs$11c
	.quad	2

	.p2align	3, 0x0
.Lggv$148:
	.quad	.Lcsbs$11d
	.quad	4

	.p2align	3, 0x0
.Lggv$149:
	.quad	.Lcsbs$11e
	.quad	5

	.p2align	3, 0x0
.Lggv$14a:
	.quad	.Lcsbs$11f
	.quad	6

	.p2align	3, 0x0
.Lggv$14b:
	.quad	.Lcsbs$120
	.quad	13

	.p2align	3, 0x0
.Lggv$14c:
	.quad	.Lcsbs$121
	.quad	7

	.p2align	3, 0x0
.Lggv$14d:
	.quad	.Lcsbs$122
	.quad	8

	.p2align	3, 0x0
.Lggv$14e:
	.quad	.Lcsbs$123
	.quad	11

	.p2align	3, 0x0
.Lggv$14f:
	.quad	.Lcsbs$124
	.quad	9

	.p2align	3, 0x0
.Lggv$155:
	.quad	.Lcsbs$127
	.quad	6

	.p2align	3, 0x0
.Lggv$156:
	.quad	.Lcsbs$128
	.quad	8

.Lcsbs$13d:
	.asciz	"#shared_nil "

	.p2align	3, 0x0
.Lggv$157:
	.quad	.Lcsbs$13d
	.quad	12

	.p2align	3, 0x0
.Lggv$158:
	.quad	.Lcsbs$125
	.quad	7

	.p2align	3, 0x0
.Lggv$15b:
	.quad	.Lcsbs$12a
	.quad	5

	.p2align	3, 0x0
.Lggv$15e:
	.quad	.Lcsbs$12c
	.quad	8

.Lcsbs$13e:
	.asciz	"..="

	.p2align	3, 0x0
.Lggv$160:
	.quad	.Lcsbs$13e
	.quad	3

	.p2align	3, 0x0
.Lggv$161:
	.quad	.Lcsbs$12e
	.quad	2

	.p2align	3, 0x0
.Lggv$162:
	.quad	.Lcsbs$12f
	.quad	10

	.p2align	3, 0x0
.Lggv$163:
	.quad	.Lcsbs$12b
	.quad	2

	.p2align	3, 0x0
.Lggv$164:
	.quad	.Lcsbs$13a
	.quad	42

	.p2align	3, 0x0
.Lggv$167:
	.quad	.Lcsbs$130
	.quad	3

	.p2align	3, 0x0
.Lggv$169:
	.quad	.Lcsbs$131
	.quad	6

	.p2align	3, 0x0
.Lggv$16c:
	.quad	.Lcsbs$132
	.quad	10

	.p2align	3, 0x0
.Lggv$16d:
	.quad	.Lcsbs$126
	.quad	2

.Lcsbs$13f:
	.asciz	"#row_major "

	.p2align	3, 0x0
.Lggv$16e:
	.quad	.Lcsbs$13f
	.quad	11

	.p2align	3, 0x0
.Lggv$16f:
	.quad	.Lcsbs$133
	.quad	7

	.p2align	3, 0x0
.Lggv$171:
	.quad	.Lcsbs$134
	.quad	1

.Lcsbs$140:
	.asciz	"C:/Home/share/odin/core/reflect/reflect.odin"

	.p2align	4, 0x0
"runtime.string_decode_rune-.accept_sizes-28525":
	.ascii	

	.p2align	3, 0x0
"runtime.string_decode_rune-.accept_ranges-28682":
	.byte	128
	.byte	191
	.byte	160
	.byte	191
	.byte	128
	.byte	159
	.byte	144
	.byte	191
	.byte	128
	.byte	143

.Lcsbs$141:
	.asciz	"C:/Home/share/odin/base/runtime/internal.odin"

	.p2align	3, 0x0
.Lggv$184:
	.quad	.Lcsbs$141
	.quad	45

.Lcsbs$145:
	.asciz	" "

	.p2align	3, 0x0
.Lggv$18a:
	.quad	.Lcsbs$145
	.quad	1

	.p2align	3, 0x0
.Lggv$18b:
	.quad	.Lcsbs$119
	.quad	2

.Lcsbs$147:
	.asciz	"C:/Home/share/odin/core/fmt/fmt.odin"

.Lcsbs$149:
	.asciz	"%!(NO VERB)"

	.p2align	3, 0x0
.Lggv$1a0:
	.quad	.Lcsbs$149
	.quad	11

.Lcsbs$14a:
	.asciz	"%!(MISSING CLOSE BRACE)"

	.p2align	3, 0x0
.Lggv$1a4:
	.quad	.Lcsbs$14a
	.quad	23

.Lcsbs$14b:
	.asciz	"%!(EXTRA "

	.p2align	3, 0x0
.Lggv$1a6:
	.quad	.Lcsbs$14b
	.quad	9

.Lcsbs$14c:
	.asciz	"<nil>"

	.p2align	3, 0x0
.Lggv$1ab:
	.quad	.Lcsbs$d3
	.quad	38

	.p2align	3, 0x0
.Lggv$1ac:
	.quad	.Lcsbs$140
	.quad	44

.Lcsbs$14d:
	.asciz	"%!"

	.p2align	3, 0x0
.Lggv$1b1:
	.quad	.Lcsbs$14d
	.quad	2

.Lcsbs$14e:
	.asciz	"true"

.Lcsbs$14f:
	.asciz	"false"

.Lcsbs$150:
	.asciz	"_fmt_int: buffer overrun. Width and precision too big"

.Lcsbs$151:
	.asciz	"_fmt_int"

	.p2align	4, 0x0
.Lggv$1b3:
	.quad	.Lcsbs$147
	.quad	36
	.long	1029
	.long	4
	.quad	.Lcsbs$151
	.quad	8

.Lcsbs$152:
	.asciz	"_fmt_int: unknown base, whoops"

	.p2align	4, 0x0
.Lggv$1b5:
	.quad	.Lcsbs$147
	.quad	36
	.long	1082
	.long	3
	.quad	.Lcsbs$151
	.quad	8

.Lcsbs$153:
	.asciz	"_fmt_int_128"

	.p2align	4, 0x0
.Lggv$1b8:
	.quad	.Lcsbs$147
	.quad	36
	.long	1114
	.long	4
	.quad	.Lcsbs$153
	.quad	12

	.p2align	3, 0x0
.Lggv$1b9:
	.quad	.Lcsbs$150
	.quad	53

	.p2align	4, 0x0
.Lggv$1ba:
	.quad	.Lcsbs$147
	.quad	36
	.long	1167
	.long	3
	.quad	.Lcsbs$153
	.quad	12

	.p2align	3, 0x0
.Lggv$1bb:
	.quad	.Lcsbs$152
	.quad	30

.Lcsbs$154:
	.asciz	"panic"

	.p2align	3, 0x0
.Lggv$1bd:
	.quad	.Lcsbs$154
	.quad	5

.Lcsbs$155:
	.asciz	"C:/Home/share/odin/core/strings/strings.odin"

.Lcsbs$156:
	.asciz	"U+"

	.p2align	3, 0x0
.Lggv$1c6:
	.quad	.Lcsbs$156
	.quad	2

.Lcsbs$157:
	.asciz	"Unhandled float size"

.Lcsbs$158:
	.asciz	"fmt_float"

	.p2align	4, 0x0
.Lggv$1d2:
	.quad	.Lcsbs$147
	.quad	36
	.long	1432
	.long	9
	.quad	.Lcsbs$158
	.quad	9

	.p2align	3, 0x0
.Lggv$1d3:
	.quad	.Lcsbs$157
	.quad	20

.Lcsbs$159:
	.asciz	"0h"

	.p2align	3, 0x0
.Lggv$1d4:
	.quad	.Lcsbs$159
	.quad	2

.Lcsbs$15a:
	.asciz	"0x"

	.p2align	3, 0x0
.Lggv$1d7:
	.quad	.Lcsbs$15a
	.quad	2

.Lcsbs$15b:
	.asciz	"#soa{data=0x"

	.p2align	3, 0x0
.Lggv$1d8:
	.quad	.Lcsbs$15b
	.quad	12

.Lcsbs$15c:
	.asciz	", index="

	.p2align	3, 0x0
.Lggv$1d9:
	.quad	.Lcsbs$15c
	.quad	8

	.p2align	3, 0x0
.Lggv$1da:
	.quad	.Lcsbs$129
	.quad	1

.Lcsbs$15d:
	.asciz	"%!(BAD ENUM VALUE="

	.p2align	3, 0x0
.Lggv$1de:
	.quad	.Lcsbs$15d
	.quad	18

	.p2align	3, 0x0
.Lggv$1df:
	.quad	.Lcsbs$117
	.quad	1

.Lcsbs$15e:
	.asciz	"unknown bit_size size"

.Lcsbs$15f:
	.asciz	"fmt_bit_set"

	.p2align	4, 0x0
.Lggv$1e2:
	.quad	.Lcsbs$147
	.quad	36
	.long	1751
	.long	9
	.quad	.Lcsbs$15f
	.quad	11

	.p2align	3, 0x0
.Lggv$1e3:
	.quad	.Lcsbs$15e
	.quad	21

.Lcsbs$160:
	.asciz	",\n"

.Lcsbs$161:
	.asciz	"-"

.Lcsbs$163:
	.asciz	"0"

.Lcsbs$164:
	.asciz	"(raw union)"

	.p2align	3, 0x0
.Lggv$1f6:
	.quad	.Lcsbs$164
	.quad	11

.Lcsbs$165:
	.asciz	"{}"

	.p2align	3, 0x0
.Lggv$1f7:
	.quad	.Lcsbs$165
	.quad	2

.Lcsbs$166:
	.asciz	" = "

.Lcsbs$167:
	.asciz	"any{}"

	.p2align	3, 0x0
.Lggv$205:
	.quad	.Lcsbs$167
	.quad	5

.Lcsbs$168:
	.asciz	"0s"

	.p2align	3, 0x0
.Lggv$212:
	.quad	.Lcsbs$168
	.quad	2

.Lcsbs$16a:
	.asciz	" +0000 UTC"

	.p2align	3, 0x0
.Lggv$222:
	.quad	.Lcsbs$16a
	.quad	10

	.p2align	3, 0x0
.Lggv$226:
	.quad	.Lcsbs$155
	.quad	44

.Lcsbs$16b:
	.asciz	"Invalid union tag type"

.Lcsbs$16c:
	.asciz	"fmt_union"

	.p2align	4, 0x0
.Lggv$22a:
	.quad	.Lcsbs$147
	.quad	36
	.long	2487
	.long	8
	.quad	.Lcsbs$16c
	.quad	9

	.p2align	3, 0x0
.Lggv$22b:
	.quad	.Lcsbs$16b
	.quad	22

	.p2align	4, 0x0
.Lggv$22c:
	.quad	.Lcsbs$147
	.quad	36
	.long	2489
	.long	2
	.quad	.Lcsbs$16c
	.quad	9

.Lcsbs$16d:
	.asciz	"matrix"

	.p2align	3, 0x0
.Lggv$232:
	.quad	.Lcsbs$16d
	.quad	6

.Lcsbs$16e:
	.asciz	"bit_field"

.Lcsbs$16f:
	.asciz	"map"

	.p2align	3, 0x0
.Lggv$243:
	.quad	.Lcsbs$16f
	.quad	3

	.p2align	3, 0x0
.Lggv$244:
	.quad	.Lcsbs$116
	.quad	2

	.p2align	3, 0x0
.Lggv$245:
	.quad	.Lcsbs$166
	.quad	3

.Lcsbs$170:
	.asciz	"="

	.p2align	3, 0x0
.Lggv$246:
	.quad	.Lcsbs$170
	.quad	1

	.p2align	3, 0x0
.Lggv$247:
	.quad	.Lcsbs$160
	.quad	2

	.p2align	3, 0x0
.Lggv$249:
	.quad	.Lcsbs$105
	.quad	3

.Lcsbs$171:
	.asciz	" @ "

	.p2align	3, 0x0
.Lggv$24a:
	.quad	.Lcsbs$171
	.quad	3

	.p2align	3, 0x0
.Lggv$24c:
	.zero	16

	.p2align	3, 0x0
.Lggv$24d:
	.quad	.Lcsbs$14c
	.quad	5

.Lcsbs$172:
	.asciz	"C:/Home/share/odin/base/runtime/heap_allocator.odin"

	.p2align	3, 0x0
.Lggv$24e:
	.quad	.Lcsbs$172
	.quad	51

.Lcsbs$173:
	.asciz	" Index "

	.p2align	3, 0x0
.Lggv$24f:
	.quad	.Lcsbs$173
	.quad	7

	.p2align	3, 0x0
.Lggv$250:
	.quad	.Lcsbs$eb
	.quad	21

	.p2align	3, 0x0
.Lggv$257:
	.quad	.Lcsbs$e4
	.quad	50

.Lcsbs$177:
	.asciz	" Invalid type assertion from "

.Lcsbs$178:
	.asciz	" to "

.Lcsbs$179:
	.asciz	"C:/Home/share/odin/base/runtime/error_checks.odin"

	.p2align	3, 0x0
.Lggv$25a:
	.quad	.Lcsbs$179
	.quad	49

	.p2align	3, 0x0
.Lggv$25b:
	.quad	.Lcsbs$177
	.quad	29

	.p2align	3, 0x0
.Lggv$25c:
	.quad	.Lcsbs$178
	.quad	4

.Lcsbs$17a:
	.asciz	", actual type: "

	.p2align	3, 0x0
.Lggv$25d:
	.quad	.Lcsbs$17a
	.quad	15

.Lcsbs$17b:
	.asciz	"%!(BAD WIDTH)"

	.p2align	3, 0x0
.Lggv$260:
	.quad	.Lcsbs$17b
	.quad	13

.Lcsbs$17c:
	.asciz	"%!(BAD PRECISION)"

	.p2align	3, 0x0
.Lggv$263:
	.quad	.Lcsbs$17c
	.quad	17

.Lcsbs$17d:
	.asciz	"%!(MISSING ARGUMENT)"

	.p2align	3, 0x0
.Lggv$264:
	.quad	.Lcsbs$17d
	.quad	20

.Lcsbs$17e:
	.asciz	"%!(BAD ARGUMENT NUMBER)"

	.p2align	3, 0x0
.Lggv$265:
	.quad	.Lcsbs$17e
	.quad	23

.Lcsbs$17f:
	.asciz	"runtime assertion"

	.p2align	3, 0x0
.Lggv$267:
	.quad	.Lcsbs$17f
	.quad	17

	.p2align	3, 0x0
.Lggv$27a:
	.quad	.Lcsbs$ce
	.quad	3

	.p2align	3, 0x0
.Lggv$27d:
	.quad	.Lcsbs$147
	.quad	36

	.globl	_fltused
